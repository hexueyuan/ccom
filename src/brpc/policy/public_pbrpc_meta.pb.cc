// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/policy/public_pbrpc_meta.proto

#include "brpc/policy/public_pbrpc_meta.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace brpc {
namespace policy {
PROTOBUF_CONSTEXPR PublicPbrpcRequest::PublicPbrpcRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.requestbody_)*/{}
  , /*decltype(_impl_.requesthead_)*/nullptr} {}
struct PublicPbrpcRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublicPbrpcRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublicPbrpcRequestDefaultTypeInternal() {}
  union {
    PublicPbrpcRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublicPbrpcRequestDefaultTypeInternal _PublicPbrpcRequest_default_instance_;
PROTOBUF_CONSTEXPR RequestHead::RequestHead(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.from_host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.charset_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.accept_charset_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.create_time_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_type_)*/0u
  , /*decltype(_impl_.connection_)*/false
  , /*decltype(_impl_.log_id_)*/uint64_t{0u}
  , /*decltype(_impl_.compress_type_)*/0u} {}
struct RequestHeadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestHeadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestHeadDefaultTypeInternal() {}
  union {
    RequestHead _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestHeadDefaultTypeInternal _RequestHead_default_instance_;
PROTOBUF_CONSTEXPR RequestBody::RequestBody(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.charset_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.service_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serialized_request_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.method_id_)*/0u} {}
struct RequestBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestBodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestBodyDefaultTypeInternal() {}
  union {
    RequestBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestBodyDefaultTypeInternal _RequestBody_default_instance_;
PROTOBUF_CONSTEXPR PublicPbrpcResponse::PublicPbrpcResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.responsebody_)*/{}
  , /*decltype(_impl_.responsehead_)*/nullptr} {}
struct PublicPbrpcResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublicPbrpcResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublicPbrpcResponseDefaultTypeInternal() {}
  union {
    PublicPbrpcResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublicPbrpcResponseDefaultTypeInternal _PublicPbrpcResponse_default_instance_;
PROTOBUF_CONSTEXPR ResponseHead::ResponseHead(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_.compress_type_)*/0u} {}
struct ResponseHeadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseHeadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseHeadDefaultTypeInternal() {}
  union {
    ResponseHead _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseHeadDefaultTypeInternal _ResponseHead_default_instance_;
PROTOBUF_CONSTEXPR ResponseBody::ResponseBody(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.serialized_response_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.error_)*/0} {}
struct ResponseBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseBodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseBodyDefaultTypeInternal() {}
  union {
    ResponseBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseBodyDefaultTypeInternal _ResponseBody_default_instance_;
}  // namespace policy
}  // namespace brpc
static ::_pb::Metadata file_level_metadata_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto = nullptr;

const uint32_t TableStruct_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::brpc::policy::PublicPbrpcRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::PublicPbrpcRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::brpc::policy::PublicPbrpcRequest, _impl_.requesthead_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::PublicPbrpcRequest, _impl_.requestbody_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RequestHead, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RequestHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RequestHead, _impl_.from_host_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RequestHead, _impl_.content_type_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RequestHead, _impl_.connection_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RequestHead, _impl_.charset_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RequestHead, _impl_.accept_charset_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RequestHead, _impl_.create_time_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RequestHead, _impl_.log_id_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RequestHead, _impl_.compress_type_),
  0,
  4,
  5,
  1,
  2,
  3,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RequestBody, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RequestBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RequestBody, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RequestBody, _impl_.charset_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RequestBody, _impl_.service_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RequestBody, _impl_.method_id_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RequestBody, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RequestBody, _impl_.serialized_request_),
  0,
  1,
  2,
  5,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::brpc::policy::PublicPbrpcResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::PublicPbrpcResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::brpc::policy::PublicPbrpcResponse, _impl_.responsehead_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::PublicPbrpcResponse, _impl_.responsebody_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::brpc::policy::ResponseHead, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::ResponseHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::brpc::policy::ResponseHead, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::ResponseHead, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::ResponseHead, _impl_.from_host_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::ResponseHead, _impl_.compress_type_),
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::brpc::policy::ResponseBody, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::ResponseBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::brpc::policy::ResponseBody, _impl_.serialized_response_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::ResponseBody, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::ResponseBody, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::ResponseBody, _impl_.id_),
  0,
  1,
  3,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::brpc::policy::PublicPbrpcRequest)},
  { 10, 24, -1, sizeof(::brpc::policy::RequestHead)},
  { 32, 44, -1, sizeof(::brpc::policy::RequestBody)},
  { 50, 58, -1, sizeof(::brpc::policy::PublicPbrpcResponse)},
  { 60, 70, -1, sizeof(::brpc::policy::ResponseHead)},
  { 74, 84, -1, sizeof(::brpc::policy::ResponseBody)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::brpc::policy::_PublicPbrpcRequest_default_instance_._instance,
  &::brpc::policy::_RequestHead_default_instance_._instance,
  &::brpc::policy::_RequestBody_default_instance_._instance,
  &::brpc::policy::_PublicPbrpcResponse_default_instance_._instance,
  &::brpc::policy::_ResponseHead_default_instance_._instance,
  &::brpc::policy::_ResponseBody_default_instance_._instance,
};

const char descriptor_table_protodef_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#brpc/policy/public_pbrpc_meta.proto\022\013b"
  "rpc.policy\"r\n\022PublicPbrpcRequest\022-\n\013requ"
  "estHead\030\001 \001(\0132\030.brpc.policy.RequestHead\022"
  "-\n\013requestBody\030\002 \003(\0132\030.brpc.policy.Reque"
  "stBody\"\257\001\n\013RequestHead\022\021\n\tfrom_host\030\001 \001("
  "\t\022\024\n\014content_type\030\002 \001(\r\022\022\n\nconnection\030\003 "
  "\001(\010\022\017\n\007charset\030\004 \001(\t\022\026\n\016accept_charset\030\005"
  " \001(\t\022\023\n\013create_time\030\006 \001(\t\022\016\n\006log_id\030\007 \001("
  "\004\022\025\n\rcompress_type\030\010 \001(\r\"{\n\013RequestBody\022"
  "\017\n\007version\030\001 \001(\t\022\017\n\007charset\030\002 \001(\t\022\017\n\007ser"
  "vice\030\003 \002(\t\022\021\n\tmethod_id\030\004 \002(\r\022\n\n\002id\030\005 \002("
  "\004\022\032\n\022serialized_request\030\006 \001(\014\"w\n\023PublicP"
  "brpcResponse\022/\n\014responseHead\030\001 \001(\0132\031.brp"
  "c.policy.ResponseHead\022/\n\014responseBody\030\002 "
  "\003(\0132\031.brpc.policy.ResponseBody\"T\n\014Respon"
  "seHead\022\014\n\004code\030\001 \002(\021\022\014\n\004text\030\002 \001(\t\022\021\n\tfr"
  "om_host\030\003 \001(\t\022\025\n\rcompress_type\030\004 \001(\r\"W\n\014"
  "ResponseBody\022\033\n\023serialized_response\030\001 \001("
  "\014\022\017\n\007version\030\002 \001(\t\022\r\n\005error\030\003 \001(\005\022\n\n\002id\030"
  "\004 \002(\004B#\n\017com.brpc.policyB\020PublicPbrpcPro"
  "to"
  ;
static ::_pbi::once_flag descriptor_table_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto = {
    false, false, 802, descriptor_table_protodef_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto,
    "brpc/policy/public_pbrpc_meta.proto",
    &descriptor_table_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::offsets,
    file_level_metadata_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto, file_level_enum_descriptors_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto,
    file_level_service_descriptors_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto_getter() {
  return &descriptor_table_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto(&descriptor_table_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto);
namespace brpc {
namespace policy {

// ===================================================================

class PublicPbrpcRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PublicPbrpcRequest>()._impl_._has_bits_);
  static const ::brpc::policy::RequestHead& requesthead(const PublicPbrpcRequest* msg);
  static void set_has_requesthead(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::brpc::policy::RequestHead&
PublicPbrpcRequest::_Internal::requesthead(const PublicPbrpcRequest* msg) {
  return *msg->_impl_.requesthead_;
}
PublicPbrpcRequest::PublicPbrpcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:brpc.policy.PublicPbrpcRequest)
}
PublicPbrpcRequest::PublicPbrpcRequest(const PublicPbrpcRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.requestbody_){from._impl_.requestbody_}
    , decltype(_impl_.requesthead_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_requesthead()) {
    _impl_.requesthead_ = new ::brpc::policy::RequestHead(*from._impl_.requesthead_);
  }
  // @@protoc_insertion_point(copy_constructor:brpc.policy.PublicPbrpcRequest)
}

inline void PublicPbrpcRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.requestbody_){arena}
    , decltype(_impl_.requesthead_){nullptr}
  };
}

PublicPbrpcRequest::~PublicPbrpcRequest() {
  // @@protoc_insertion_point(destructor:brpc.policy.PublicPbrpcRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PublicPbrpcRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.requestbody_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.requesthead_;
}

void PublicPbrpcRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PublicPbrpcRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.policy.PublicPbrpcRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.requestbody_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.requesthead_ != nullptr);
    _impl_.requesthead_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublicPbrpcRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .brpc.policy.RequestHead requestHead = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_requesthead(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .brpc.policy.RequestBody requestBody = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requestbody(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublicPbrpcRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.PublicPbrpcRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .brpc.policy.RequestHead requestHead = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::requesthead(this),
        _Internal::requesthead(this).GetCachedSize(), target, stream);
  }

  // repeated .brpc.policy.RequestBody requestBody = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_requestbody_size()); i < n; i++) {
    const auto& repfield = this->_internal_requestbody(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.PublicPbrpcRequest)
  return target;
}

size_t PublicPbrpcRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.policy.PublicPbrpcRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .brpc.policy.RequestBody requestBody = 2;
  total_size += 1UL * this->_internal_requestbody_size();
  for (const auto& msg : this->_impl_.requestbody_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .brpc.policy.RequestHead requestHead = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.requesthead_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublicPbrpcRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PublicPbrpcRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublicPbrpcRequest::GetClassData() const { return &_class_data_; }

void PublicPbrpcRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PublicPbrpcRequest *>(to)->MergeFrom(
      static_cast<const PublicPbrpcRequest &>(from));
}


void PublicPbrpcRequest::MergeFrom(const PublicPbrpcRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.policy.PublicPbrpcRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.requestbody_.MergeFrom(from._impl_.requestbody_);
  if (from._internal_has_requesthead()) {
    _internal_mutable_requesthead()->::brpc::policy::RequestHead::MergeFrom(from._internal_requesthead());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublicPbrpcRequest::CopyFrom(const PublicPbrpcRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.policy.PublicPbrpcRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicPbrpcRequest::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.requestbody_))
    return false;
  return true;
}

void PublicPbrpcRequest::InternalSwap(PublicPbrpcRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.requestbody_.InternalSwap(&other->_impl_.requestbody_);
  swap(_impl_.requesthead_, other->_impl_.requesthead_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublicPbrpcRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto_getter, &descriptor_table_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto_once,
      file_level_metadata_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto[0]);
}

// ===================================================================

class RequestHead::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestHead>()._impl_._has_bits_);
  static void set_has_from_host(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_content_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_connection(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_charset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_accept_charset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_create_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_log_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_compress_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

RequestHead::RequestHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:brpc.policy.RequestHead)
}
RequestHead::RequestHead(const RequestHead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.from_host_){}
    , decltype(_impl_.charset_){}
    , decltype(_impl_.accept_charset_){}
    , decltype(_impl_.create_time_){}
    , decltype(_impl_.content_type_){}
    , decltype(_impl_.connection_){}
    , decltype(_impl_.log_id_){}
    , decltype(_impl_.compress_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.from_host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_from_host()) {
    _impl_.from_host_.Set(from._internal_from_host(), 
      GetArenaForAllocation());
  }
  _impl_.charset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.charset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_charset()) {
    _impl_.charset_.Set(from._internal_charset(), 
      GetArenaForAllocation());
  }
  _impl_.accept_charset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accept_charset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_accept_charset()) {
    _impl_.accept_charset_.Set(from._internal_accept_charset(), 
      GetArenaForAllocation());
  }
  _impl_.create_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.create_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_create_time()) {
    _impl_.create_time_.Set(from._internal_create_time(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.content_type_, &from._impl_.content_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.compress_type_) -
    reinterpret_cast<char*>(&_impl_.content_type_)) + sizeof(_impl_.compress_type_));
  // @@protoc_insertion_point(copy_constructor:brpc.policy.RequestHead)
}

inline void RequestHead::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.from_host_){}
    , decltype(_impl_.charset_){}
    , decltype(_impl_.accept_charset_){}
    , decltype(_impl_.create_time_){}
    , decltype(_impl_.content_type_){0u}
    , decltype(_impl_.connection_){false}
    , decltype(_impl_.log_id_){uint64_t{0u}}
    , decltype(_impl_.compress_type_){0u}
  };
  _impl_.from_host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.charset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.charset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.accept_charset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accept_charset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.create_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.create_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestHead::~RequestHead() {
  // @@protoc_insertion_point(destructor:brpc.policy.RequestHead)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestHead::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.from_host_.Destroy();
  _impl_.charset_.Destroy();
  _impl_.accept_charset_.Destroy();
  _impl_.create_time_.Destroy();
}

void RequestHead::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestHead::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.policy.RequestHead)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.from_host_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.charset_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.accept_charset_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.create_time_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.content_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.compress_type_) -
        reinterpret_cast<char*>(&_impl_.content_type_)) + sizeof(_impl_.compress_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestHead::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string from_host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_from_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "brpc.policy.RequestHead.from_host");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 content_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_content_type(&has_bits);
          _impl_.content_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool connection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_connection(&has_bits);
          _impl_.connection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string charset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_charset();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "brpc.policy.RequestHead.charset");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string accept_charset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_accept_charset();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "brpc.policy.RequestHead.accept_charset");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string create_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_create_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "brpc.policy.RequestHead.create_time");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint64 log_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_log_id(&has_bits);
          _impl_.log_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 compress_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_compress_type(&has_bits);
          _impl_.compress_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestHead::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.RequestHead)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string from_host = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_from_host().data(), static_cast<int>(this->_internal_from_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "brpc.policy.RequestHead.from_host");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_from_host(), target);
  }

  // optional uint32 content_type = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_content_type(), target);
  }

  // optional bool connection = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_connection(), target);
  }

  // optional string charset = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_charset().data(), static_cast<int>(this->_internal_charset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "brpc.policy.RequestHead.charset");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_charset(), target);
  }

  // optional string accept_charset = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_accept_charset().data(), static_cast<int>(this->_internal_accept_charset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "brpc.policy.RequestHead.accept_charset");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_accept_charset(), target);
  }

  // optional string create_time = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_create_time().data(), static_cast<int>(this->_internal_create_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "brpc.policy.RequestHead.create_time");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_create_time(), target);
  }

  // optional uint64 log_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_log_id(), target);
  }

  // optional uint32 compress_type = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_compress_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.RequestHead)
  return target;
}

size_t RequestHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.policy.RequestHead)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string from_host = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_from_host());
    }

    // optional string charset = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_charset());
    }

    // optional string accept_charset = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_accept_charset());
    }

    // optional string create_time = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_create_time());
    }

    // optional uint32 content_type = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_content_type());
    }

    // optional bool connection = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint64 log_id = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_log_id());
    }

    // optional uint32 compress_type = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_compress_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestHead::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestHead::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestHead::GetClassData() const { return &_class_data_; }

void RequestHead::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestHead *>(to)->MergeFrom(
      static_cast<const RequestHead &>(from));
}


void RequestHead::MergeFrom(const RequestHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.policy.RequestHead)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_from_host(from._internal_from_host());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_charset(from._internal_charset());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_accept_charset(from._internal_accept_charset());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_create_time(from._internal_create_time());
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.content_type_ = from._impl_.content_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.connection_ = from._impl_.connection_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.log_id_ = from._impl_.log_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.compress_type_ = from._impl_.compress_type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestHead::CopyFrom(const RequestHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.policy.RequestHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHead::IsInitialized() const {
  return true;
}

void RequestHead::InternalSwap(RequestHead* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.from_host_, lhs_arena,
      &other->_impl_.from_host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.charset_, lhs_arena,
      &other->_impl_.charset_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accept_charset_, lhs_arena,
      &other->_impl_.accept_charset_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.create_time_, lhs_arena,
      &other->_impl_.create_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestHead, _impl_.compress_type_)
      + sizeof(RequestHead::_impl_.compress_type_)
      - PROTOBUF_FIELD_OFFSET(RequestHead, _impl_.content_type_)>(
          reinterpret_cast<char*>(&_impl_.content_type_),
          reinterpret_cast<char*>(&other->_impl_.content_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestHead::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto_getter, &descriptor_table_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto_once,
      file_level_metadata_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto[1]);
}

// ===================================================================

class RequestBody::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestBody>()._impl_._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_charset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_service(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_method_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_serialized_request(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000034) ^ 0x00000034) != 0;
  }
};

RequestBody::RequestBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:brpc.policy.RequestBody)
}
RequestBody::RequestBody(const RequestBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.version_){}
    , decltype(_impl_.charset_){}
    , decltype(_impl_.service_){}
    , decltype(_impl_.serialized_request_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.method_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version()) {
    _impl_.version_.Set(from._internal_version(), 
      GetArenaForAllocation());
  }
  _impl_.charset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.charset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_charset()) {
    _impl_.charset_.Set(from._internal_charset(), 
      GetArenaForAllocation());
  }
  _impl_.service_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_service()) {
    _impl_.service_.Set(from._internal_service(), 
      GetArenaForAllocation());
  }
  _impl_.serialized_request_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serialized_request_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serialized_request()) {
    _impl_.serialized_request_.Set(from._internal_serialized_request(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.method_id_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.method_id_));
  // @@protoc_insertion_point(copy_constructor:brpc.policy.RequestBody)
}

inline void RequestBody::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.version_){}
    , decltype(_impl_.charset_){}
    , decltype(_impl_.service_){}
    , decltype(_impl_.serialized_request_){}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.method_id_){0u}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.charset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.charset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.service_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serialized_request_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serialized_request_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestBody::~RequestBody() {
  // @@protoc_insertion_point(destructor:brpc.policy.RequestBody)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
  _impl_.charset_.Destroy();
  _impl_.service_.Destroy();
  _impl_.serialized_request_.Destroy();
}

void RequestBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestBody::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.policy.RequestBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.charset_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.service_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.serialized_request_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.method_id_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.method_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestBody::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "brpc.policy.RequestBody.version");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string charset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_charset();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "brpc.policy.RequestBody.charset");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string service = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_service();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "brpc.policy.RequestBody.service");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required uint32 method_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_method_id(&has_bits);
          _impl_.method_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes serialized_request = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_serialized_request();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.RequestBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "brpc.policy.RequestBody.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // optional string charset = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_charset().data(), static_cast<int>(this->_internal_charset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "brpc.policy.RequestBody.charset");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_charset(), target);
  }

  // required string service = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_service().data(), static_cast<int>(this->_internal_service().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "brpc.policy.RequestBody.service");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_service(), target);
  }

  // required uint32 method_id = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_method_id(), target);
  }

  // required uint64 id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_id(), target);
  }

  // optional bytes serialized_request = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_serialized_request(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.RequestBody)
  return target;
}

size_t RequestBody::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:brpc.policy.RequestBody)
  size_t total_size = 0;

  if (_internal_has_service()) {
    // required string service = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service());
  }

  if (_internal_has_id()) {
    // required uint64 id = 5;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  if (_internal_has_method_id()) {
    // required uint32 method_id = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_method_id());
  }

  return total_size;
}
size_t RequestBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.policy.RequestBody)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000034) ^ 0x00000034) == 0) {  // All required fields are present.
    // required string service = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service());

    // required uint64 id = 5;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());

    // required uint32 method_id = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_method_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional string charset = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_charset());
    }

  }
  // optional bytes serialized_request = 6;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_serialized_request());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestBody::GetClassData() const { return &_class_data_; }

void RequestBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestBody *>(to)->MergeFrom(
      static_cast<const RequestBody &>(from));
}


void RequestBody::MergeFrom(const RequestBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.policy.RequestBody)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_charset(from._internal_charset());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_service(from._internal_service());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_serialized_request(from._internal_serialized_request());
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.method_id_ = from._impl_.method_id_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestBody::CopyFrom(const RequestBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.policy.RequestBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBody::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RequestBody::InternalSwap(RequestBody* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.charset_, lhs_arena,
      &other->_impl_.charset_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_, lhs_arena,
      &other->_impl_.service_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serialized_request_, lhs_arena,
      &other->_impl_.serialized_request_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestBody, _impl_.method_id_)
      + sizeof(RequestBody::_impl_.method_id_)
      - PROTOBUF_FIELD_OFFSET(RequestBody, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto_getter, &descriptor_table_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto_once,
      file_level_metadata_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto[2]);
}

// ===================================================================

class PublicPbrpcResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<PublicPbrpcResponse>()._impl_._has_bits_);
  static const ::brpc::policy::ResponseHead& responsehead(const PublicPbrpcResponse* msg);
  static void set_has_responsehead(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::brpc::policy::ResponseHead&
PublicPbrpcResponse::_Internal::responsehead(const PublicPbrpcResponse* msg) {
  return *msg->_impl_.responsehead_;
}
PublicPbrpcResponse::PublicPbrpcResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:brpc.policy.PublicPbrpcResponse)
}
PublicPbrpcResponse::PublicPbrpcResponse(const PublicPbrpcResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.responsebody_){from._impl_.responsebody_}
    , decltype(_impl_.responsehead_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_responsehead()) {
    _impl_.responsehead_ = new ::brpc::policy::ResponseHead(*from._impl_.responsehead_);
  }
  // @@protoc_insertion_point(copy_constructor:brpc.policy.PublicPbrpcResponse)
}

inline void PublicPbrpcResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.responsebody_){arena}
    , decltype(_impl_.responsehead_){nullptr}
  };
}

PublicPbrpcResponse::~PublicPbrpcResponse() {
  // @@protoc_insertion_point(destructor:brpc.policy.PublicPbrpcResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PublicPbrpcResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.responsebody_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.responsehead_;
}

void PublicPbrpcResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PublicPbrpcResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.policy.PublicPbrpcResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.responsebody_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.responsehead_ != nullptr);
    _impl_.responsehead_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublicPbrpcResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .brpc.policy.ResponseHead responseHead = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_responsehead(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .brpc.policy.ResponseBody responseBody = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responsebody(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublicPbrpcResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.PublicPbrpcResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .brpc.policy.ResponseHead responseHead = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::responsehead(this),
        _Internal::responsehead(this).GetCachedSize(), target, stream);
  }

  // repeated .brpc.policy.ResponseBody responseBody = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_responsebody_size()); i < n; i++) {
    const auto& repfield = this->_internal_responsebody(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.PublicPbrpcResponse)
  return target;
}

size_t PublicPbrpcResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.policy.PublicPbrpcResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .brpc.policy.ResponseBody responseBody = 2;
  total_size += 1UL * this->_internal_responsebody_size();
  for (const auto& msg : this->_impl_.responsebody_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .brpc.policy.ResponseHead responseHead = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.responsehead_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublicPbrpcResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PublicPbrpcResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublicPbrpcResponse::GetClassData() const { return &_class_data_; }

void PublicPbrpcResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PublicPbrpcResponse *>(to)->MergeFrom(
      static_cast<const PublicPbrpcResponse &>(from));
}


void PublicPbrpcResponse::MergeFrom(const PublicPbrpcResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.policy.PublicPbrpcResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.responsebody_.MergeFrom(from._impl_.responsebody_);
  if (from._internal_has_responsehead()) {
    _internal_mutable_responsehead()->::brpc::policy::ResponseHead::MergeFrom(from._internal_responsehead());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublicPbrpcResponse::CopyFrom(const PublicPbrpcResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.policy.PublicPbrpcResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicPbrpcResponse::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.responsebody_))
    return false;
  if (_internal_has_responsehead()) {
    if (!_impl_.responsehead_->IsInitialized()) return false;
  }
  return true;
}

void PublicPbrpcResponse::InternalSwap(PublicPbrpcResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.responsebody_.InternalSwap(&other->_impl_.responsebody_);
  swap(_impl_.responsehead_, other->_impl_.responsehead_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublicPbrpcResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto_getter, &descriptor_table_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto_once,
      file_level_metadata_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto[3]);
}

// ===================================================================

class ResponseHead::_Internal {
 public:
  using HasBits = decltype(std::declval<ResponseHead>()._impl_._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_from_host(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_compress_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

ResponseHead::ResponseHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:brpc.policy.ResponseHead)
}
ResponseHead::ResponseHead(const ResponseHead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}
    , decltype(_impl_.from_host_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.compress_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    _impl_.text_.Set(from._internal_text(), 
      GetArenaForAllocation());
  }
  _impl_.from_host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_from_host()) {
    _impl_.from_host_.Set(from._internal_from_host(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.code_, &from._impl_.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.compress_type_) -
    reinterpret_cast<char*>(&_impl_.code_)) + sizeof(_impl_.compress_type_));
  // @@protoc_insertion_point(copy_constructor:brpc.policy.ResponseHead)
}

inline void ResponseHead::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}
    , decltype(_impl_.from_host_){}
    , decltype(_impl_.code_){0}
    , decltype(_impl_.compress_type_){0u}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.from_host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResponseHead::~ResponseHead() {
  // @@protoc_insertion_point(destructor:brpc.policy.ResponseHead)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseHead::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
  _impl_.from_host_.Destroy();
}

void ResponseHead::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseHead::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.policy.ResponseHead)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.from_host_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.compress_type_) -
        reinterpret_cast<char*>(&_impl_.code_)) + sizeof(_impl_.compress_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseHead::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required sint32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_code(&has_bits);
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "brpc.policy.ResponseHead.text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string from_host = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_from_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "brpc.policy.ResponseHead.from_host");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 compress_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_compress_type(&has_bits);
          _impl_.compress_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseHead::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.ResponseHead)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required sint32 code = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_code(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "brpc.policy.ResponseHead.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  // optional string from_host = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_from_host().data(), static_cast<int>(this->_internal_from_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "brpc.policy.ResponseHead.from_host");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_from_host(), target);
  }

  // optional uint32 compress_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_compress_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.ResponseHead)
  return target;
}

size_t ResponseHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.policy.ResponseHead)
  size_t total_size = 0;

  // required sint32 code = 1;
  if (_internal_has_code()) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_code());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional string from_host = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_from_host());
    }

  }
  // optional uint32 compress_type = 4;
  if (cached_has_bits & 0x00000008u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_compress_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseHead::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseHead::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseHead::GetClassData() const { return &_class_data_; }

void ResponseHead::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseHead *>(to)->MergeFrom(
      static_cast<const ResponseHead &>(from));
}


void ResponseHead::MergeFrom(const ResponseHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.policy.ResponseHead)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_from_host(from._internal_from_host());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.code_ = from._impl_.code_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.compress_type_ = from._impl_.compress_type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseHead::CopyFrom(const ResponseHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.policy.ResponseHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseHead::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ResponseHead::InternalSwap(ResponseHead* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.from_host_, lhs_arena,
      &other->_impl_.from_host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseHead, _impl_.compress_type_)
      + sizeof(ResponseHead::_impl_.compress_type_)
      - PROTOBUF_FIELD_OFFSET(ResponseHead, _impl_.code_)>(
          reinterpret_cast<char*>(&_impl_.code_),
          reinterpret_cast<char*>(&other->_impl_.code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseHead::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto_getter, &descriptor_table_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto_once,
      file_level_metadata_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto[4]);
}

// ===================================================================

class ResponseBody::_Internal {
 public:
  using HasBits = decltype(std::declval<ResponseBody>()._impl_._has_bits_);
  static void set_has_serialized_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

ResponseBody::ResponseBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:brpc.policy.ResponseBody)
}
ResponseBody::ResponseBody(const ResponseBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.serialized_response_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.error_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.serialized_response_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serialized_response_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serialized_response()) {
    _impl_.serialized_response_.Set(from._internal_serialized_response(), 
      GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version()) {
    _impl_.version_.Set(from._internal_version(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.error_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.error_));
  // @@protoc_insertion_point(copy_constructor:brpc.policy.ResponseBody)
}

inline void ResponseBody::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.serialized_response_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.error_){0}
  };
  _impl_.serialized_response_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serialized_response_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResponseBody::~ResponseBody() {
  // @@protoc_insertion_point(destructor:brpc.policy.ResponseBody)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.serialized_response_.Destroy();
  _impl_.version_.Destroy();
}

void ResponseBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseBody::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.policy.ResponseBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.serialized_response_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.version_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.error_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.error_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseBody::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes serialized_response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_serialized_response();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "brpc.policy.ResponseBody.version");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_error(&has_bits);
          _impl_.error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.ResponseBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes serialized_response = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_serialized_response(), target);
  }

  // optional string version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "brpc.policy.ResponseBody.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // optional int32 error = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_error(), target);
  }

  // required uint64 id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.ResponseBody)
  return target;
}

size_t ResponseBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.policy.ResponseBody)
  size_t total_size = 0;

  // required uint64 id = 4;
  if (_internal_has_id()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes serialized_response = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_serialized_response());
    }

    // optional string version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

  }
  // optional int32 error = 3;
  if (cached_has_bits & 0x00000008u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseBody::GetClassData() const { return &_class_data_; }

void ResponseBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseBody *>(to)->MergeFrom(
      static_cast<const ResponseBody &>(from));
}


void ResponseBody::MergeFrom(const ResponseBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.policy.ResponseBody)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_serialized_response(from._internal_serialized_response());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.error_ = from._impl_.error_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseBody::CopyFrom(const ResponseBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.policy.ResponseBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseBody::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ResponseBody::InternalSwap(ResponseBody* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serialized_response_, lhs_arena,
      &other->_impl_.serialized_response_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseBody, _impl_.error_)
      + sizeof(ResponseBody::_impl_.error_)
      - PROTOBUF_FIELD_OFFSET(ResponseBody, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto_getter, &descriptor_table_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto_once,
      file_level_metadata_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace policy
}  // namespace brpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::brpc::policy::PublicPbrpcRequest*
Arena::CreateMaybeMessage< ::brpc::policy::PublicPbrpcRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::brpc::policy::PublicPbrpcRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::brpc::policy::RequestHead*
Arena::CreateMaybeMessage< ::brpc::policy::RequestHead >(Arena* arena) {
  return Arena::CreateMessageInternal< ::brpc::policy::RequestHead >(arena);
}
template<> PROTOBUF_NOINLINE ::brpc::policy::RequestBody*
Arena::CreateMaybeMessage< ::brpc::policy::RequestBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::brpc::policy::RequestBody >(arena);
}
template<> PROTOBUF_NOINLINE ::brpc::policy::PublicPbrpcResponse*
Arena::CreateMaybeMessage< ::brpc::policy::PublicPbrpcResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::brpc::policy::PublicPbrpcResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::brpc::policy::ResponseHead*
Arena::CreateMaybeMessage< ::brpc::policy::ResponseHead >(Arena* arena) {
  return Arena::CreateMessageInternal< ::brpc::policy::ResponseHead >(arena);
}
template<> PROTOBUF_NOINLINE ::brpc::policy::ResponseBody*
Arena::CreateMaybeMessage< ::brpc::policy::ResponseBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::brpc::policy::ResponseBody >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
