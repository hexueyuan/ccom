// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/policy/baidu_rpc_meta.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "brpc/options.pb.h"
#include "brpc/streaming_rpc_meta.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto;
namespace brpc {
namespace policy {
class RpcMeta;
struct RpcMetaDefaultTypeInternal;
extern RpcMetaDefaultTypeInternal _RpcMeta_default_instance_;
class RpcRequestMeta;
struct RpcRequestMetaDefaultTypeInternal;
extern RpcRequestMetaDefaultTypeInternal _RpcRequestMeta_default_instance_;
class RpcResponseMeta;
struct RpcResponseMetaDefaultTypeInternal;
extern RpcResponseMetaDefaultTypeInternal _RpcResponseMeta_default_instance_;
}  // namespace policy
}  // namespace brpc
PROTOBUF_NAMESPACE_OPEN
template<> ::brpc::policy::RpcMeta* Arena::CreateMaybeMessage<::brpc::policy::RpcMeta>(Arena*);
template<> ::brpc::policy::RpcRequestMeta* Arena::CreateMaybeMessage<::brpc::policy::RpcRequestMeta>(Arena*);
template<> ::brpc::policy::RpcResponseMeta* Arena::CreateMaybeMessage<::brpc::policy::RpcResponseMeta>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace brpc {
namespace policy {

// ===================================================================

class RpcMeta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:brpc.policy.RpcMeta) */ {
 public:
  inline RpcMeta() : RpcMeta(nullptr) {}
  ~RpcMeta() override;
  explicit PROTOBUF_CONSTEXPR RpcMeta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcMeta(const RpcMeta& from);
  RpcMeta(RpcMeta&& from) noexcept
    : RpcMeta() {
    *this = ::std::move(from);
  }

  inline RpcMeta& operator=(const RpcMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcMeta& operator=(RpcMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcMeta* internal_default_instance() {
    return reinterpret_cast<const RpcMeta*>(
               &_RpcMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RpcMeta& a, RpcMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcMeta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcMeta>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcMeta& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RpcMeta& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcMeta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "brpc.policy.RpcMeta";
  }
  protected:
  explicit RpcMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthenticationDataFieldNumber = 7,
    kRequestFieldNumber = 1,
    kResponseFieldNumber = 2,
    kChunkInfoFieldNumber = 6,
    kStreamSettingsFieldNumber = 8,
    kCorrelationIdFieldNumber = 4,
    kCompressTypeFieldNumber = 3,
    kAttachmentSizeFieldNumber = 5,
  };
  // optional bytes authentication_data = 7;
  bool has_authentication_data() const;
  private:
  bool _internal_has_authentication_data() const;
  public:
  void clear_authentication_data();
  const std::string& authentication_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_authentication_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_authentication_data();
  PROTOBUF_NODISCARD std::string* release_authentication_data();
  void set_allocated_authentication_data(std::string* authentication_data);
  private:
  const std::string& _internal_authentication_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authentication_data(const std::string& value);
  std::string* _internal_mutable_authentication_data();
  public:

  // optional .brpc.policy.RpcRequestMeta request = 1;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::brpc::policy::RpcRequestMeta& request() const;
  PROTOBUF_NODISCARD ::brpc::policy::RpcRequestMeta* release_request();
  ::brpc::policy::RpcRequestMeta* mutable_request();
  void set_allocated_request(::brpc::policy::RpcRequestMeta* request);
  private:
  const ::brpc::policy::RpcRequestMeta& _internal_request() const;
  ::brpc::policy::RpcRequestMeta* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::brpc::policy::RpcRequestMeta* request);
  ::brpc::policy::RpcRequestMeta* unsafe_arena_release_request();

  // optional .brpc.policy.RpcResponseMeta response = 2;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::brpc::policy::RpcResponseMeta& response() const;
  PROTOBUF_NODISCARD ::brpc::policy::RpcResponseMeta* release_response();
  ::brpc::policy::RpcResponseMeta* mutable_response();
  void set_allocated_response(::brpc::policy::RpcResponseMeta* response);
  private:
  const ::brpc::policy::RpcResponseMeta& _internal_response() const;
  ::brpc::policy::RpcResponseMeta* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::brpc::policy::RpcResponseMeta* response);
  ::brpc::policy::RpcResponseMeta* unsafe_arena_release_response();

  // optional .brpc.ChunkInfo chunk_info = 6;
  bool has_chunk_info() const;
  private:
  bool _internal_has_chunk_info() const;
  public:
  void clear_chunk_info();
  const ::brpc::ChunkInfo& chunk_info() const;
  PROTOBUF_NODISCARD ::brpc::ChunkInfo* release_chunk_info();
  ::brpc::ChunkInfo* mutable_chunk_info();
  void set_allocated_chunk_info(::brpc::ChunkInfo* chunk_info);
  private:
  const ::brpc::ChunkInfo& _internal_chunk_info() const;
  ::brpc::ChunkInfo* _internal_mutable_chunk_info();
  public:
  void unsafe_arena_set_allocated_chunk_info(
      ::brpc::ChunkInfo* chunk_info);
  ::brpc::ChunkInfo* unsafe_arena_release_chunk_info();

  // optional .brpc.StreamSettings stream_settings = 8;
  bool has_stream_settings() const;
  private:
  bool _internal_has_stream_settings() const;
  public:
  void clear_stream_settings();
  const ::brpc::StreamSettings& stream_settings() const;
  PROTOBUF_NODISCARD ::brpc::StreamSettings* release_stream_settings();
  ::brpc::StreamSettings* mutable_stream_settings();
  void set_allocated_stream_settings(::brpc::StreamSettings* stream_settings);
  private:
  const ::brpc::StreamSettings& _internal_stream_settings() const;
  ::brpc::StreamSettings* _internal_mutable_stream_settings();
  public:
  void unsafe_arena_set_allocated_stream_settings(
      ::brpc::StreamSettings* stream_settings);
  ::brpc::StreamSettings* unsafe_arena_release_stream_settings();

  // optional int64 correlation_id = 4;
  bool has_correlation_id() const;
  private:
  bool _internal_has_correlation_id() const;
  public:
  void clear_correlation_id();
  int64_t correlation_id() const;
  void set_correlation_id(int64_t value);
  private:
  int64_t _internal_correlation_id() const;
  void _internal_set_correlation_id(int64_t value);
  public:

  // optional int32 compress_type = 3;
  bool has_compress_type() const;
  private:
  bool _internal_has_compress_type() const;
  public:
  void clear_compress_type();
  int32_t compress_type() const;
  void set_compress_type(int32_t value);
  private:
  int32_t _internal_compress_type() const;
  void _internal_set_compress_type(int32_t value);
  public:

  // optional int32 attachment_size = 5;
  bool has_attachment_size() const;
  private:
  bool _internal_has_attachment_size() const;
  public:
  void clear_attachment_size();
  int32_t attachment_size() const;
  void set_attachment_size(int32_t value);
  private:
  int32_t _internal_attachment_size() const;
  void _internal_set_attachment_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:brpc.policy.RpcMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authentication_data_;
    ::brpc::policy::RpcRequestMeta* request_;
    ::brpc::policy::RpcResponseMeta* response_;
    ::brpc::ChunkInfo* chunk_info_;
    ::brpc::StreamSettings* stream_settings_;
    int64_t correlation_id_;
    int32_t compress_type_;
    int32_t attachment_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto;
};
// -------------------------------------------------------------------

class RpcRequestMeta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:brpc.policy.RpcRequestMeta) */ {
 public:
  inline RpcRequestMeta() : RpcRequestMeta(nullptr) {}
  ~RpcRequestMeta() override;
  explicit PROTOBUF_CONSTEXPR RpcRequestMeta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcRequestMeta(const RpcRequestMeta& from);
  RpcRequestMeta(RpcRequestMeta&& from) noexcept
    : RpcRequestMeta() {
    *this = ::std::move(from);
  }

  inline RpcRequestMeta& operator=(const RpcRequestMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcRequestMeta& operator=(RpcRequestMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcRequestMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcRequestMeta* internal_default_instance() {
    return reinterpret_cast<const RpcRequestMeta*>(
               &_RpcRequestMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RpcRequestMeta& a, RpcRequestMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcRequestMeta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcRequestMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcRequestMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcRequestMeta>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcRequestMeta& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RpcRequestMeta& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcRequestMeta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "brpc.policy.RpcRequestMeta";
  }
  protected:
  explicit RpcRequestMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
    kMethodNameFieldNumber = 2,
    kRequestIdFieldNumber = 7,
    kLogIdFieldNumber = 3,
    kTraceIdFieldNumber = 4,
    kSpanIdFieldNumber = 5,
    kParentSpanIdFieldNumber = 6,
    kTimeoutMsFieldNumber = 8,
  };
  // required string service_name = 1;
  bool has_service_name() const;
  private:
  bool _internal_has_service_name() const;
  public:
  void clear_service_name();
  const std::string& service_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service_name();
  PROTOBUF_NODISCARD std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // required string method_name = 2;
  bool has_method_name() const;
  private:
  bool _internal_has_method_name() const;
  public:
  void clear_method_name();
  const std::string& method_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_method_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_method_name();
  PROTOBUF_NODISCARD std::string* release_method_name();
  void set_allocated_method_name(std::string* method_name);
  private:
  const std::string& _internal_method_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method_name(const std::string& value);
  std::string* _internal_mutable_method_name();
  public:

  // optional string request_id = 7;
  bool has_request_id() const;
  private:
  bool _internal_has_request_id() const;
  public:
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // optional int64 log_id = 3;
  bool has_log_id() const;
  private:
  bool _internal_has_log_id() const;
  public:
  void clear_log_id();
  int64_t log_id() const;
  void set_log_id(int64_t value);
  private:
  int64_t _internal_log_id() const;
  void _internal_set_log_id(int64_t value);
  public:

  // optional int64 trace_id = 4;
  bool has_trace_id() const;
  private:
  bool _internal_has_trace_id() const;
  public:
  void clear_trace_id();
  int64_t trace_id() const;
  void set_trace_id(int64_t value);
  private:
  int64_t _internal_trace_id() const;
  void _internal_set_trace_id(int64_t value);
  public:

  // optional int64 span_id = 5;
  bool has_span_id() const;
  private:
  bool _internal_has_span_id() const;
  public:
  void clear_span_id();
  int64_t span_id() const;
  void set_span_id(int64_t value);
  private:
  int64_t _internal_span_id() const;
  void _internal_set_span_id(int64_t value);
  public:

  // optional int64 parent_span_id = 6;
  bool has_parent_span_id() const;
  private:
  bool _internal_has_parent_span_id() const;
  public:
  void clear_parent_span_id();
  int64_t parent_span_id() const;
  void set_parent_span_id(int64_t value);
  private:
  int64_t _internal_parent_span_id() const;
  void _internal_set_parent_span_id(int64_t value);
  public:

  // optional int32 timeout_ms = 8;
  bool has_timeout_ms() const;
  private:
  bool _internal_has_timeout_ms() const;
  public:
  void clear_timeout_ms();
  int32_t timeout_ms() const;
  void set_timeout_ms(int32_t value);
  private:
  int32_t _internal_timeout_ms() const;
  void _internal_set_timeout_ms(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:brpc.policy.RpcRequestMeta)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
    int64_t log_id_;
    int64_t trace_id_;
    int64_t span_id_;
    int64_t parent_span_id_;
    int32_t timeout_ms_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto;
};
// -------------------------------------------------------------------

class RpcResponseMeta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:brpc.policy.RpcResponseMeta) */ {
 public:
  inline RpcResponseMeta() : RpcResponseMeta(nullptr) {}
  ~RpcResponseMeta() override;
  explicit PROTOBUF_CONSTEXPR RpcResponseMeta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcResponseMeta(const RpcResponseMeta& from);
  RpcResponseMeta(RpcResponseMeta&& from) noexcept
    : RpcResponseMeta() {
    *this = ::std::move(from);
  }

  inline RpcResponseMeta& operator=(const RpcResponseMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcResponseMeta& operator=(RpcResponseMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcResponseMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcResponseMeta* internal_default_instance() {
    return reinterpret_cast<const RpcResponseMeta*>(
               &_RpcResponseMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RpcResponseMeta& a, RpcResponseMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcResponseMeta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcResponseMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcResponseMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcResponseMeta>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcResponseMeta& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RpcResponseMeta& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcResponseMeta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "brpc.policy.RpcResponseMeta";
  }
  protected:
  explicit RpcResponseMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorTextFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // optional string error_text = 2;
  bool has_error_text() const;
  private:
  bool _internal_has_error_text() const;
  public:
  void clear_error_text();
  const std::string& error_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_text();
  PROTOBUF_NODISCARD std::string* release_error_text();
  void set_allocated_error_text(std::string* error_text);
  private:
  const std::string& _internal_error_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_text(const std::string& value);
  std::string* _internal_mutable_error_text();
  public:

  // optional int32 error_code = 1;
  bool has_error_code() const;
  private:
  bool _internal_has_error_code() const;
  public:
  void clear_error_code();
  int32_t error_code() const;
  void set_error_code(int32_t value);
  private:
  int32_t _internal_error_code() const;
  void _internal_set_error_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:brpc.policy.RpcResponseMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_text_;
    int32_t error_code_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RpcMeta

// optional .brpc.policy.RpcRequestMeta request = 1;
inline bool RpcMeta::_internal_has_request() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.request_ != nullptr);
  return value;
}
inline bool RpcMeta::has_request() const {
  return _internal_has_request();
}
inline void RpcMeta::clear_request() {
  if (_impl_.request_ != nullptr) _impl_.request_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::brpc::policy::RpcRequestMeta& RpcMeta::_internal_request() const {
  const ::brpc::policy::RpcRequestMeta* p = _impl_.request_;
  return p != nullptr ? *p : reinterpret_cast<const ::brpc::policy::RpcRequestMeta&>(
      ::brpc::policy::_RpcRequestMeta_default_instance_);
}
inline const ::brpc::policy::RpcRequestMeta& RpcMeta::request() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcMeta.request)
  return _internal_request();
}
inline void RpcMeta::unsafe_arena_set_allocated_request(
    ::brpc::policy::RpcRequestMeta* request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.request_);
  }
  _impl_.request_ = request;
  if (request) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:brpc.policy.RpcMeta.request)
}
inline ::brpc::policy::RpcRequestMeta* RpcMeta::release_request() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::brpc::policy::RpcRequestMeta* temp = _impl_.request_;
  _impl_.request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::brpc::policy::RpcRequestMeta* RpcMeta::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:brpc.policy.RpcMeta.request)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::brpc::policy::RpcRequestMeta* temp = _impl_.request_;
  _impl_.request_ = nullptr;
  return temp;
}
inline ::brpc::policy::RpcRequestMeta* RpcMeta::_internal_mutable_request() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.request_ == nullptr) {
    auto* p = CreateMaybeMessage<::brpc::policy::RpcRequestMeta>(GetArenaForAllocation());
    _impl_.request_ = p;
  }
  return _impl_.request_;
}
inline ::brpc::policy::RpcRequestMeta* RpcMeta::mutable_request() {
  ::brpc::policy::RpcRequestMeta* _msg = _internal_mutable_request();
  // @@protoc_insertion_point(field_mutable:brpc.policy.RpcMeta.request)
  return _msg;
}
inline void RpcMeta::set_allocated_request(::brpc::policy::RpcRequestMeta* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.request_;
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(request);
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.request_ = request;
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RpcMeta.request)
}

// optional .brpc.policy.RpcResponseMeta response = 2;
inline bool RpcMeta::_internal_has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline bool RpcMeta::has_response() const {
  return _internal_has_response();
}
inline void RpcMeta::clear_response() {
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::brpc::policy::RpcResponseMeta& RpcMeta::_internal_response() const {
  const ::brpc::policy::RpcResponseMeta* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::brpc::policy::RpcResponseMeta&>(
      ::brpc::policy::_RpcResponseMeta_default_instance_);
}
inline const ::brpc::policy::RpcResponseMeta& RpcMeta::response() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcMeta.response)
  return _internal_response();
}
inline void RpcMeta::unsafe_arena_set_allocated_response(
    ::brpc::policy::RpcResponseMeta* response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = response;
  if (response) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:brpc.policy.RpcMeta.response)
}
inline ::brpc::policy::RpcResponseMeta* RpcMeta::release_response() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::brpc::policy::RpcResponseMeta* temp = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::brpc::policy::RpcResponseMeta* RpcMeta::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:brpc.policy.RpcMeta.response)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::brpc::policy::RpcResponseMeta* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::brpc::policy::RpcResponseMeta* RpcMeta::_internal_mutable_response() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::brpc::policy::RpcResponseMeta>(GetArenaForAllocation());
    _impl_.response_ = p;
  }
  return _impl_.response_;
}
inline ::brpc::policy::RpcResponseMeta* RpcMeta::mutable_response() {
  ::brpc::policy::RpcResponseMeta* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:brpc.policy.RpcMeta.response)
  return _msg;
}
inline void RpcMeta::set_allocated_response(::brpc::policy::RpcResponseMeta* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.response_ = response;
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RpcMeta.response)
}

// optional int32 compress_type = 3;
inline bool RpcMeta::_internal_has_compress_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RpcMeta::has_compress_type() const {
  return _internal_has_compress_type();
}
inline void RpcMeta::clear_compress_type() {
  _impl_.compress_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t RpcMeta::_internal_compress_type() const {
  return _impl_.compress_type_;
}
inline int32_t RpcMeta::compress_type() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcMeta.compress_type)
  return _internal_compress_type();
}
inline void RpcMeta::_internal_set_compress_type(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.compress_type_ = value;
}
inline void RpcMeta::set_compress_type(int32_t value) {
  _internal_set_compress_type(value);
  // @@protoc_insertion_point(field_set:brpc.policy.RpcMeta.compress_type)
}

// optional int64 correlation_id = 4;
inline bool RpcMeta::_internal_has_correlation_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RpcMeta::has_correlation_id() const {
  return _internal_has_correlation_id();
}
inline void RpcMeta::clear_correlation_id() {
  _impl_.correlation_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int64_t RpcMeta::_internal_correlation_id() const {
  return _impl_.correlation_id_;
}
inline int64_t RpcMeta::correlation_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcMeta.correlation_id)
  return _internal_correlation_id();
}
inline void RpcMeta::_internal_set_correlation_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.correlation_id_ = value;
}
inline void RpcMeta::set_correlation_id(int64_t value) {
  _internal_set_correlation_id(value);
  // @@protoc_insertion_point(field_set:brpc.policy.RpcMeta.correlation_id)
}

// optional int32 attachment_size = 5;
inline bool RpcMeta::_internal_has_attachment_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RpcMeta::has_attachment_size() const {
  return _internal_has_attachment_size();
}
inline void RpcMeta::clear_attachment_size() {
  _impl_.attachment_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t RpcMeta::_internal_attachment_size() const {
  return _impl_.attachment_size_;
}
inline int32_t RpcMeta::attachment_size() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcMeta.attachment_size)
  return _internal_attachment_size();
}
inline void RpcMeta::_internal_set_attachment_size(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.attachment_size_ = value;
}
inline void RpcMeta::set_attachment_size(int32_t value) {
  _internal_set_attachment_size(value);
  // @@protoc_insertion_point(field_set:brpc.policy.RpcMeta.attachment_size)
}

// optional .brpc.ChunkInfo chunk_info = 6;
inline bool RpcMeta::_internal_has_chunk_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chunk_info_ != nullptr);
  return value;
}
inline bool RpcMeta::has_chunk_info() const {
  return _internal_has_chunk_info();
}
inline const ::brpc::ChunkInfo& RpcMeta::_internal_chunk_info() const {
  const ::brpc::ChunkInfo* p = _impl_.chunk_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::brpc::ChunkInfo&>(
      ::brpc::_ChunkInfo_default_instance_);
}
inline const ::brpc::ChunkInfo& RpcMeta::chunk_info() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcMeta.chunk_info)
  return _internal_chunk_info();
}
inline void RpcMeta::unsafe_arena_set_allocated_chunk_info(
    ::brpc::ChunkInfo* chunk_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chunk_info_);
  }
  _impl_.chunk_info_ = chunk_info;
  if (chunk_info) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:brpc.policy.RpcMeta.chunk_info)
}
inline ::brpc::ChunkInfo* RpcMeta::release_chunk_info() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::brpc::ChunkInfo* temp = _impl_.chunk_info_;
  _impl_.chunk_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::brpc::ChunkInfo* RpcMeta::unsafe_arena_release_chunk_info() {
  // @@protoc_insertion_point(field_release:brpc.policy.RpcMeta.chunk_info)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::brpc::ChunkInfo* temp = _impl_.chunk_info_;
  _impl_.chunk_info_ = nullptr;
  return temp;
}
inline ::brpc::ChunkInfo* RpcMeta::_internal_mutable_chunk_info() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.chunk_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::brpc::ChunkInfo>(GetArenaForAllocation());
    _impl_.chunk_info_ = p;
  }
  return _impl_.chunk_info_;
}
inline ::brpc::ChunkInfo* RpcMeta::mutable_chunk_info() {
  ::brpc::ChunkInfo* _msg = _internal_mutable_chunk_info();
  // @@protoc_insertion_point(field_mutable:brpc.policy.RpcMeta.chunk_info)
  return _msg;
}
inline void RpcMeta::set_allocated_chunk_info(::brpc::ChunkInfo* chunk_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chunk_info_);
  }
  if (chunk_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chunk_info));
    if (message_arena != submessage_arena) {
      chunk_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chunk_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.chunk_info_ = chunk_info;
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RpcMeta.chunk_info)
}

// optional bytes authentication_data = 7;
inline bool RpcMeta::_internal_has_authentication_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RpcMeta::has_authentication_data() const {
  return _internal_has_authentication_data();
}
inline void RpcMeta::clear_authentication_data() {
  _impl_.authentication_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RpcMeta::authentication_data() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcMeta.authentication_data)
  return _internal_authentication_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcMeta::set_authentication_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.authentication_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:brpc.policy.RpcMeta.authentication_data)
}
inline std::string* RpcMeta::mutable_authentication_data() {
  std::string* _s = _internal_mutable_authentication_data();
  // @@protoc_insertion_point(field_mutable:brpc.policy.RpcMeta.authentication_data)
  return _s;
}
inline const std::string& RpcMeta::_internal_authentication_data() const {
  return _impl_.authentication_data_.Get();
}
inline void RpcMeta::_internal_set_authentication_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.authentication_data_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcMeta::_internal_mutable_authentication_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.authentication_data_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcMeta::release_authentication_data() {
  // @@protoc_insertion_point(field_release:brpc.policy.RpcMeta.authentication_data)
  if (!_internal_has_authentication_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.authentication_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.authentication_data_.IsDefault()) {
    _impl_.authentication_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RpcMeta::set_allocated_authentication_data(std::string* authentication_data) {
  if (authentication_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.authentication_data_.SetAllocated(authentication_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.authentication_data_.IsDefault()) {
    _impl_.authentication_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RpcMeta.authentication_data)
}

// optional .brpc.StreamSettings stream_settings = 8;
inline bool RpcMeta::_internal_has_stream_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stream_settings_ != nullptr);
  return value;
}
inline bool RpcMeta::has_stream_settings() const {
  return _internal_has_stream_settings();
}
inline const ::brpc::StreamSettings& RpcMeta::_internal_stream_settings() const {
  const ::brpc::StreamSettings* p = _impl_.stream_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::brpc::StreamSettings&>(
      ::brpc::_StreamSettings_default_instance_);
}
inline const ::brpc::StreamSettings& RpcMeta::stream_settings() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcMeta.stream_settings)
  return _internal_stream_settings();
}
inline void RpcMeta::unsafe_arena_set_allocated_stream_settings(
    ::brpc::StreamSettings* stream_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stream_settings_);
  }
  _impl_.stream_settings_ = stream_settings;
  if (stream_settings) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:brpc.policy.RpcMeta.stream_settings)
}
inline ::brpc::StreamSettings* RpcMeta::release_stream_settings() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::brpc::StreamSettings* temp = _impl_.stream_settings_;
  _impl_.stream_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::brpc::StreamSettings* RpcMeta::unsafe_arena_release_stream_settings() {
  // @@protoc_insertion_point(field_release:brpc.policy.RpcMeta.stream_settings)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::brpc::StreamSettings* temp = _impl_.stream_settings_;
  _impl_.stream_settings_ = nullptr;
  return temp;
}
inline ::brpc::StreamSettings* RpcMeta::_internal_mutable_stream_settings() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.stream_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::brpc::StreamSettings>(GetArenaForAllocation());
    _impl_.stream_settings_ = p;
  }
  return _impl_.stream_settings_;
}
inline ::brpc::StreamSettings* RpcMeta::mutable_stream_settings() {
  ::brpc::StreamSettings* _msg = _internal_mutable_stream_settings();
  // @@protoc_insertion_point(field_mutable:brpc.policy.RpcMeta.stream_settings)
  return _msg;
}
inline void RpcMeta::set_allocated_stream_settings(::brpc::StreamSettings* stream_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stream_settings_);
  }
  if (stream_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_settings));
    if (message_arena != submessage_arena) {
      stream_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_settings, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.stream_settings_ = stream_settings;
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RpcMeta.stream_settings)
}

// -------------------------------------------------------------------

// RpcRequestMeta

// required string service_name = 1;
inline bool RpcRequestMeta::_internal_has_service_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RpcRequestMeta::has_service_name() const {
  return _internal_has_service_name();
}
inline void RpcRequestMeta::clear_service_name() {
  _impl_.service_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RpcRequestMeta::service_name() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcRequestMeta.service_name)
  return _internal_service_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcRequestMeta::set_service_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.service_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:brpc.policy.RpcRequestMeta.service_name)
}
inline std::string* RpcRequestMeta::mutable_service_name() {
  std::string* _s = _internal_mutable_service_name();
  // @@protoc_insertion_point(field_mutable:brpc.policy.RpcRequestMeta.service_name)
  return _s;
}
inline const std::string& RpcRequestMeta::_internal_service_name() const {
  return _impl_.service_name_.Get();
}
inline void RpcRequestMeta::_internal_set_service_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.service_name_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcRequestMeta::_internal_mutable_service_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.service_name_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcRequestMeta::release_service_name() {
  // @@protoc_insertion_point(field_release:brpc.policy.RpcRequestMeta.service_name)
  if (!_internal_has_service_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.service_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_name_.IsDefault()) {
    _impl_.service_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RpcRequestMeta::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.service_name_.SetAllocated(service_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_name_.IsDefault()) {
    _impl_.service_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RpcRequestMeta.service_name)
}

// required string method_name = 2;
inline bool RpcRequestMeta::_internal_has_method_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RpcRequestMeta::has_method_name() const {
  return _internal_has_method_name();
}
inline void RpcRequestMeta::clear_method_name() {
  _impl_.method_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RpcRequestMeta::method_name() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcRequestMeta.method_name)
  return _internal_method_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcRequestMeta::set_method_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.method_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:brpc.policy.RpcRequestMeta.method_name)
}
inline std::string* RpcRequestMeta::mutable_method_name() {
  std::string* _s = _internal_mutable_method_name();
  // @@protoc_insertion_point(field_mutable:brpc.policy.RpcRequestMeta.method_name)
  return _s;
}
inline const std::string& RpcRequestMeta::_internal_method_name() const {
  return _impl_.method_name_.Get();
}
inline void RpcRequestMeta::_internal_set_method_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.method_name_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcRequestMeta::_internal_mutable_method_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.method_name_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcRequestMeta::release_method_name() {
  // @@protoc_insertion_point(field_release:brpc.policy.RpcRequestMeta.method_name)
  if (!_internal_has_method_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.method_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.method_name_.IsDefault()) {
    _impl_.method_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RpcRequestMeta::set_allocated_method_name(std::string* method_name) {
  if (method_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.method_name_.SetAllocated(method_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.method_name_.IsDefault()) {
    _impl_.method_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RpcRequestMeta.method_name)
}

// optional int64 log_id = 3;
inline bool RpcRequestMeta::_internal_has_log_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RpcRequestMeta::has_log_id() const {
  return _internal_has_log_id();
}
inline void RpcRequestMeta::clear_log_id() {
  _impl_.log_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t RpcRequestMeta::_internal_log_id() const {
  return _impl_.log_id_;
}
inline int64_t RpcRequestMeta::log_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcRequestMeta.log_id)
  return _internal_log_id();
}
inline void RpcRequestMeta::_internal_set_log_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.log_id_ = value;
}
inline void RpcRequestMeta::set_log_id(int64_t value) {
  _internal_set_log_id(value);
  // @@protoc_insertion_point(field_set:brpc.policy.RpcRequestMeta.log_id)
}

// optional int64 trace_id = 4;
inline bool RpcRequestMeta::_internal_has_trace_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RpcRequestMeta::has_trace_id() const {
  return _internal_has_trace_id();
}
inline void RpcRequestMeta::clear_trace_id() {
  _impl_.trace_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int64_t RpcRequestMeta::_internal_trace_id() const {
  return _impl_.trace_id_;
}
inline int64_t RpcRequestMeta::trace_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcRequestMeta.trace_id)
  return _internal_trace_id();
}
inline void RpcRequestMeta::_internal_set_trace_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.trace_id_ = value;
}
inline void RpcRequestMeta::set_trace_id(int64_t value) {
  _internal_set_trace_id(value);
  // @@protoc_insertion_point(field_set:brpc.policy.RpcRequestMeta.trace_id)
}

// optional int64 span_id = 5;
inline bool RpcRequestMeta::_internal_has_span_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RpcRequestMeta::has_span_id() const {
  return _internal_has_span_id();
}
inline void RpcRequestMeta::clear_span_id() {
  _impl_.span_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int64_t RpcRequestMeta::_internal_span_id() const {
  return _impl_.span_id_;
}
inline int64_t RpcRequestMeta::span_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcRequestMeta.span_id)
  return _internal_span_id();
}
inline void RpcRequestMeta::_internal_set_span_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.span_id_ = value;
}
inline void RpcRequestMeta::set_span_id(int64_t value) {
  _internal_set_span_id(value);
  // @@protoc_insertion_point(field_set:brpc.policy.RpcRequestMeta.span_id)
}

// optional int64 parent_span_id = 6;
inline bool RpcRequestMeta::_internal_has_parent_span_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RpcRequestMeta::has_parent_span_id() const {
  return _internal_has_parent_span_id();
}
inline void RpcRequestMeta::clear_parent_span_id() {
  _impl_.parent_span_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int64_t RpcRequestMeta::_internal_parent_span_id() const {
  return _impl_.parent_span_id_;
}
inline int64_t RpcRequestMeta::parent_span_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcRequestMeta.parent_span_id)
  return _internal_parent_span_id();
}
inline void RpcRequestMeta::_internal_set_parent_span_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.parent_span_id_ = value;
}
inline void RpcRequestMeta::set_parent_span_id(int64_t value) {
  _internal_set_parent_span_id(value);
  // @@protoc_insertion_point(field_set:brpc.policy.RpcRequestMeta.parent_span_id)
}

// optional string request_id = 7;
inline bool RpcRequestMeta::_internal_has_request_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RpcRequestMeta::has_request_id() const {
  return _internal_has_request_id();
}
inline void RpcRequestMeta::clear_request_id() {
  _impl_.request_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RpcRequestMeta::request_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcRequestMeta.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcRequestMeta::set_request_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:brpc.policy.RpcRequestMeta.request_id)
}
inline std::string* RpcRequestMeta::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:brpc.policy.RpcRequestMeta.request_id)
  return _s;
}
inline const std::string& RpcRequestMeta::_internal_request_id() const {
  return _impl_.request_id_.Get();
}
inline void RpcRequestMeta::_internal_set_request_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcRequestMeta::_internal_mutable_request_id() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcRequestMeta::release_request_id() {
  // @@protoc_insertion_point(field_release:brpc.policy.RpcRequestMeta.request_id)
  if (!_internal_has_request_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.request_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RpcRequestMeta::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RpcRequestMeta.request_id)
}

// optional int32 timeout_ms = 8;
inline bool RpcRequestMeta::_internal_has_timeout_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RpcRequestMeta::has_timeout_ms() const {
  return _internal_has_timeout_ms();
}
inline void RpcRequestMeta::clear_timeout_ms() {
  _impl_.timeout_ms_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t RpcRequestMeta::_internal_timeout_ms() const {
  return _impl_.timeout_ms_;
}
inline int32_t RpcRequestMeta::timeout_ms() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcRequestMeta.timeout_ms)
  return _internal_timeout_ms();
}
inline void RpcRequestMeta::_internal_set_timeout_ms(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.timeout_ms_ = value;
}
inline void RpcRequestMeta::set_timeout_ms(int32_t value) {
  _internal_set_timeout_ms(value);
  // @@protoc_insertion_point(field_set:brpc.policy.RpcRequestMeta.timeout_ms)
}

// -------------------------------------------------------------------

// RpcResponseMeta

// optional int32 error_code = 1;
inline bool RpcResponseMeta::_internal_has_error_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RpcResponseMeta::has_error_code() const {
  return _internal_has_error_code();
}
inline void RpcResponseMeta::clear_error_code() {
  _impl_.error_code_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t RpcResponseMeta::_internal_error_code() const {
  return _impl_.error_code_;
}
inline int32_t RpcResponseMeta::error_code() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcResponseMeta.error_code)
  return _internal_error_code();
}
inline void RpcResponseMeta::_internal_set_error_code(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.error_code_ = value;
}
inline void RpcResponseMeta::set_error_code(int32_t value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:brpc.policy.RpcResponseMeta.error_code)
}

// optional string error_text = 2;
inline bool RpcResponseMeta::_internal_has_error_text() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RpcResponseMeta::has_error_text() const {
  return _internal_has_error_text();
}
inline void RpcResponseMeta::clear_error_text() {
  _impl_.error_text_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RpcResponseMeta::error_text() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RpcResponseMeta.error_text)
  return _internal_error_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcResponseMeta::set_error_text(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.error_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:brpc.policy.RpcResponseMeta.error_text)
}
inline std::string* RpcResponseMeta::mutable_error_text() {
  std::string* _s = _internal_mutable_error_text();
  // @@protoc_insertion_point(field_mutable:brpc.policy.RpcResponseMeta.error_text)
  return _s;
}
inline const std::string& RpcResponseMeta::_internal_error_text() const {
  return _impl_.error_text_.Get();
}
inline void RpcResponseMeta::_internal_set_error_text(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_text_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcResponseMeta::_internal_mutable_error_text() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_text_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcResponseMeta::release_error_text() {
  // @@protoc_insertion_point(field_release:brpc.policy.RpcResponseMeta.error_text)
  if (!_internal_has_error_text()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.error_text_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_text_.IsDefault()) {
    _impl_.error_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RpcResponseMeta::set_allocated_error_text(std::string* error_text) {
  if (error_text != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_text_.SetAllocated(error_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_text_.IsDefault()) {
    _impl_.error_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RpcResponseMeta.error_text)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace policy
}  // namespace brpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto
