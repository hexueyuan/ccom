// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/policy/mongo.proto

#include "brpc/policy/mongo.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace brpc {
namespace policy {
PROTOBUF_CONSTEXPR MongoHeader::MongoHeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_length_)*/0
  , /*decltype(_impl_.request_id_)*/0
  , /*decltype(_impl_.response_to_)*/0
  , /*decltype(_impl_.op_code_)*/1} {}
struct MongoHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MongoHeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MongoHeaderDefaultTypeInternal() {}
  union {
    MongoHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MongoHeaderDefaultTypeInternal _MongoHeader_default_instance_;
PROTOBUF_CONSTEXPR MongoRequest::MongoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.header_)*/nullptr} {}
struct MongoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MongoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MongoRequestDefaultTypeInternal() {}
  union {
    MongoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MongoRequestDefaultTypeInternal _MongoRequest_default_instance_;
PROTOBUF_CONSTEXPR MongoResponse::MongoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.cursor_id_)*/int64_t{0}
  , /*decltype(_impl_.response_flags_)*/0
  , /*decltype(_impl_.starting_from_)*/0
  , /*decltype(_impl_.number_returned_)*/0} {}
struct MongoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MongoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MongoResponseDefaultTypeInternal() {}
  union {
    MongoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MongoResponseDefaultTypeInternal _MongoResponse_default_instance_;
}  // namespace policy
}  // namespace brpc
static ::_pb::Metadata file_level_metadata_brpc_2fpolicy_2fmongo_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_brpc_2fpolicy_2fmongo_2eproto[1];
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_brpc_2fpolicy_2fmongo_2eproto[1];

const uint32_t TableStruct_brpc_2fpolicy_2fmongo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::brpc::policy::MongoHeader, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::MongoHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::brpc::policy::MongoHeader, _impl_.message_length_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::MongoHeader, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::MongoHeader, _impl_.response_to_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::MongoHeader, _impl_.op_code_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::brpc::policy::MongoRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::MongoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::brpc::policy::MongoRequest, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::MongoRequest, _impl_.message_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::brpc::policy::MongoResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::MongoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::brpc::policy::MongoResponse, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::MongoResponse, _impl_.response_flags_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::MongoResponse, _impl_.cursor_id_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::MongoResponse, _impl_.starting_from_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::MongoResponse, _impl_.number_returned_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::MongoResponse, _impl_.message_),
  1,
  3,
  2,
  4,
  5,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::brpc::policy::MongoHeader)},
  { 14, 22, -1, sizeof(::brpc::policy::MongoRequest)},
  { 24, 36, -1, sizeof(::brpc::policy::MongoResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::brpc::policy::_MongoHeader_default_instance_._instance,
  &::brpc::policy::_MongoRequest_default_instance_._instance,
  &::brpc::policy::_MongoResponse_default_instance_._instance,
};

const char descriptor_table_protodef_brpc_2fpolicy_2fmongo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027brpc/policy/mongo.proto\022\013brpc.policy\"u"
  "\n\013MongoHeader\022\026\n\016message_length\030\001 \002(\005\022\022\n"
  "\nrequest_id\030\002 \002(\005\022\023\n\013response_to\030\003 \002(\005\022%"
  "\n\007op_code\030\004 \002(\0162\024.brpc.policy.MongoOp\"I\n"
  "\014MongoRequest\022(\n\006header\030\001 \002(\0132\030.brpc.pol"
  "icy.MongoHeader\022\017\n\007message\030\002 \002(\t\"\245\001\n\rMon"
  "goResponse\022(\n\006header\030\001 \002(\0132\030.brpc.policy"
  ".MongoHeader\022\026\n\016response_flags\030\002 \002(\005\022\021\n\t"
  "cursor_id\030\003 \002(\003\022\025\n\rstarting_from\030\004 \002(\005\022\027"
  "\n\017number_returned\030\005 \002(\005\022\017\n\007message\030\006 \002(\t"
  "*\256\001\n\007MongoOp\022\013\n\007OPREPLY\020\001\022\n\n\005DBMSG\020\350\007\022\016\n"
  "\tDB_UPDATE\020\321\017\022\016\n\tDB_INSERT\020\322\017\022\r\n\010DB_QUER"
  "Y\020\324\017\022\017\n\nDB_GETMORE\020\325\017\022\016\n\tDB_DELETE\020\326\017\022\023\n"
  "\016DB_KILLCURSORS\020\327\017\022\017\n\nDB_COMMAND\020\330\017\022\024\n\017D"
  "B_COMMANDREPLY\020\331\0172W\n\014MongoService\022G\n\016def"
  "ault_method\022\031.brpc.policy.MongoRequest\032\032"
  ".brpc.policy.MongoResponseB#\n\017com.brpc.p"
  "olicyB\nMongoProto\200\001\001\210\001\001"
  ;
static ::_pbi::once_flag descriptor_table_brpc_2fpolicy_2fmongo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_brpc_2fpolicy_2fmongo_2eproto = {
    false, false, 703, descriptor_table_protodef_brpc_2fpolicy_2fmongo_2eproto,
    "brpc/policy/mongo.proto",
    &descriptor_table_brpc_2fpolicy_2fmongo_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_brpc_2fpolicy_2fmongo_2eproto::offsets,
    file_level_metadata_brpc_2fpolicy_2fmongo_2eproto, file_level_enum_descriptors_brpc_2fpolicy_2fmongo_2eproto,
    file_level_service_descriptors_brpc_2fpolicy_2fmongo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_brpc_2fpolicy_2fmongo_2eproto_getter() {
  return &descriptor_table_brpc_2fpolicy_2fmongo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_brpc_2fpolicy_2fmongo_2eproto(&descriptor_table_brpc_2fpolicy_2fmongo_2eproto);
namespace brpc {
namespace policy {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MongoOp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_brpc_2fpolicy_2fmongo_2eproto);
  return file_level_enum_descriptors_brpc_2fpolicy_2fmongo_2eproto[0];
}
bool MongoOp_IsValid(int value) {
  switch (value) {
    case 1:
    case 1000:
    case 2001:
    case 2002:
    case 2004:
    case 2005:
    case 2006:
    case 2007:
    case 2008:
    case 2009:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MongoHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<MongoHeader>()._impl_._has_bits_);
  static void set_has_message_length(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_response_to(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_op_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

MongoHeader::MongoHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:brpc.policy.MongoHeader)
}
MongoHeader::MongoHeader(const MongoHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_length_){}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.response_to_){}
    , decltype(_impl_.op_code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.message_length_, &from._impl_.message_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.op_code_) -
    reinterpret_cast<char*>(&_impl_.message_length_)) + sizeof(_impl_.op_code_));
  // @@protoc_insertion_point(copy_constructor:brpc.policy.MongoHeader)
}

inline void MongoHeader::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_length_){0}
    , decltype(_impl_.request_id_){0}
    , decltype(_impl_.response_to_){0}
    , decltype(_impl_.op_code_){1}
  };
}

MongoHeader::~MongoHeader() {
  // @@protoc_insertion_point(destructor:brpc.policy.MongoHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MongoHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MongoHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MongoHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.policy.MongoHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.message_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.response_to_) -
        reinterpret_cast<char*>(&_impl_.message_length_)) + sizeof(_impl_.response_to_));
    _impl_.op_code_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MongoHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 message_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_message_length(&has_bits);
          _impl_.message_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 request_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_request_id(&has_bits);
          _impl_.request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 response_to = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_response_to(&has_bits);
          _impl_.response_to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .brpc.policy.MongoOp op_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::brpc::policy::MongoOp_IsValid(val))) {
            _internal_set_op_code(static_cast<::brpc::policy::MongoOp>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MongoHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.MongoHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 message_length = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_message_length(), target);
  }

  // required int32 request_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_request_id(), target);
  }

  // required int32 response_to = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_response_to(), target);
  }

  // required .brpc.policy.MongoOp op_code = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_op_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.MongoHeader)
  return target;
}

size_t MongoHeader::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:brpc.policy.MongoHeader)
  size_t total_size = 0;

  if (_internal_has_message_length()) {
    // required int32 message_length = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_message_length());
  }

  if (_internal_has_request_id()) {
    // required int32 request_id = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_request_id());
  }

  if (_internal_has_response_to()) {
    // required int32 response_to = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_response_to());
  }

  if (_internal_has_op_code()) {
    // required .brpc.policy.MongoOp op_code = 4;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_op_code());
  }

  return total_size;
}
size_t MongoHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.policy.MongoHeader)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 message_length = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_message_length());

    // required int32 request_id = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_request_id());

    // required int32 response_to = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_response_to());

    // required .brpc.policy.MongoOp op_code = 4;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_op_code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MongoHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MongoHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MongoHeader::GetClassData() const { return &_class_data_; }

void MongoHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MongoHeader *>(to)->MergeFrom(
      static_cast<const MongoHeader &>(from));
}


void MongoHeader::MergeFrom(const MongoHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.policy.MongoHeader)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.message_length_ = from._impl_.message_length_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.request_id_ = from._impl_.request_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.response_to_ = from._impl_.response_to_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.op_code_ = from._impl_.op_code_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MongoHeader::CopyFrom(const MongoHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.policy.MongoHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MongoHeader::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void MongoHeader::InternalSwap(MongoHeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MongoHeader, _impl_.response_to_)
      + sizeof(MongoHeader::_impl_.response_to_)
      - PROTOBUF_FIELD_OFFSET(MongoHeader, _impl_.message_length_)>(
          reinterpret_cast<char*>(&_impl_.message_length_),
          reinterpret_cast<char*>(&other->_impl_.message_length_));
  swap(_impl_.op_code_, other->_impl_.op_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MongoHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_brpc_2fpolicy_2fmongo_2eproto_getter, &descriptor_table_brpc_2fpolicy_2fmongo_2eproto_once,
      file_level_metadata_brpc_2fpolicy_2fmongo_2eproto[0]);
}

// ===================================================================

class MongoRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MongoRequest>()._impl_._has_bits_);
  static const ::brpc::policy::MongoHeader& header(const MongoRequest* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::brpc::policy::MongoHeader&
MongoRequest::_Internal::header(const MongoRequest* msg) {
  return *msg->_impl_.header_;
}
MongoRequest::MongoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:brpc.policy.MongoRequest)
}
MongoRequest::MongoRequest(const MongoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.header_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _impl_.message_.Set(from._internal_message(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    _impl_.header_ = new ::brpc::policy::MongoHeader(*from._impl_.header_);
  }
  // @@protoc_insertion_point(copy_constructor:brpc.policy.MongoRequest)
}

inline void MongoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.header_){nullptr}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MongoRequest::~MongoRequest() {
  // @@protoc_insertion_point(destructor:brpc.policy.MongoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MongoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void MongoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MongoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.policy.MongoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MongoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .brpc.policy.MongoHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "brpc.policy.MongoRequest.message");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MongoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.MongoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .brpc.policy.MongoHeader header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // required string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "brpc.policy.MongoRequest.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.MongoRequest)
  return target;
}

size_t MongoRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:brpc.policy.MongoRequest)
  size_t total_size = 0;

  if (_internal_has_message()) {
    // required string message = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (_internal_has_header()) {
    // required .brpc.policy.MongoHeader header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  return total_size;
}
size_t MongoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.policy.MongoRequest)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string message = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());

    // required .brpc.policy.MongoHeader header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MongoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MongoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MongoRequest::GetClassData() const { return &_class_data_; }

void MongoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MongoRequest *>(to)->MergeFrom(
      static_cast<const MongoRequest &>(from));
}


void MongoRequest::MergeFrom(const MongoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.policy.MongoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::brpc::policy::MongoHeader::MergeFrom(from._internal_header());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MongoRequest::CopyFrom(const MongoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.policy.MongoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MongoRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_header()) {
    if (!_impl_.header_->IsInitialized()) return false;
  }
  return true;
}

void MongoRequest::InternalSwap(MongoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.header_, other->_impl_.header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MongoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_brpc_2fpolicy_2fmongo_2eproto_getter, &descriptor_table_brpc_2fpolicy_2fmongo_2eproto_once,
      file_level_metadata_brpc_2fpolicy_2fmongo_2eproto[1]);
}

// ===================================================================

class MongoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<MongoResponse>()._impl_._has_bits_);
  static const ::brpc::policy::MongoHeader& header(const MongoResponse* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_response_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cursor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_starting_from(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_number_returned(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

const ::brpc::policy::MongoHeader&
MongoResponse::_Internal::header(const MongoResponse* msg) {
  return *msg->_impl_.header_;
}
MongoResponse::MongoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:brpc.policy.MongoResponse)
}
MongoResponse::MongoResponse(const MongoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.cursor_id_){}
    , decltype(_impl_.response_flags_){}
    , decltype(_impl_.starting_from_){}
    , decltype(_impl_.number_returned_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _impl_.message_.Set(from._internal_message(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    _impl_.header_ = new ::brpc::policy::MongoHeader(*from._impl_.header_);
  }
  ::memcpy(&_impl_.cursor_id_, &from._impl_.cursor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.number_returned_) -
    reinterpret_cast<char*>(&_impl_.cursor_id_)) + sizeof(_impl_.number_returned_));
  // @@protoc_insertion_point(copy_constructor:brpc.policy.MongoResponse)
}

inline void MongoResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.cursor_id_){int64_t{0}}
    , decltype(_impl_.response_flags_){0}
    , decltype(_impl_.starting_from_){0}
    , decltype(_impl_.number_returned_){0}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MongoResponse::~MongoResponse() {
  // @@protoc_insertion_point(destructor:brpc.policy.MongoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MongoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void MongoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MongoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.policy.MongoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.cursor_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.number_returned_) -
        reinterpret_cast<char*>(&_impl_.cursor_id_)) + sizeof(_impl_.number_returned_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MongoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .brpc.policy.MongoHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 response_flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_response_flags(&has_bits);
          _impl_.response_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 cursor_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_cursor_id(&has_bits);
          _impl_.cursor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 starting_from = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_starting_from(&has_bits);
          _impl_.starting_from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 number_returned = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_number_returned(&has_bits);
          _impl_.number_returned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string message = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "brpc.policy.MongoResponse.message");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MongoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.MongoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .brpc.policy.MongoHeader header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // required int32 response_flags = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_response_flags(), target);
  }

  // required int64 cursor_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_cursor_id(), target);
  }

  // required int32 starting_from = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_starting_from(), target);
  }

  // required int32 number_returned = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_number_returned(), target);
  }

  // required string message = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "brpc.policy.MongoResponse.message");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.MongoResponse)
  return target;
}

size_t MongoResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:brpc.policy.MongoResponse)
  size_t total_size = 0;

  if (_internal_has_message()) {
    // required string message = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (_internal_has_header()) {
    // required .brpc.policy.MongoHeader header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  if (_internal_has_cursor_id()) {
    // required int64 cursor_id = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_cursor_id());
  }

  if (_internal_has_response_flags()) {
    // required int32 response_flags = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_response_flags());
  }

  if (_internal_has_starting_from()) {
    // required int32 starting_from = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_starting_from());
  }

  if (_internal_has_number_returned()) {
    // required int32 number_returned = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_number_returned());
  }

  return total_size;
}
size_t MongoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.policy.MongoResponse)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string message = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());

    // required .brpc.policy.MongoHeader header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);

    // required int64 cursor_id = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_cursor_id());

    // required int32 response_flags = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_response_flags());

    // required int32 starting_from = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_starting_from());

    // required int32 number_returned = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_number_returned());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MongoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MongoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MongoResponse::GetClassData() const { return &_class_data_; }

void MongoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MongoResponse *>(to)->MergeFrom(
      static_cast<const MongoResponse &>(from));
}


void MongoResponse::MergeFrom(const MongoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.policy.MongoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::brpc::policy::MongoHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.cursor_id_ = from._impl_.cursor_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.response_flags_ = from._impl_.response_flags_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.starting_from_ = from._impl_.starting_from_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.number_returned_ = from._impl_.number_returned_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MongoResponse::CopyFrom(const MongoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.policy.MongoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MongoResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_header()) {
    if (!_impl_.header_->IsInitialized()) return false;
  }
  return true;
}

void MongoResponse::InternalSwap(MongoResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MongoResponse, _impl_.number_returned_)
      + sizeof(MongoResponse::_impl_.number_returned_)
      - PROTOBUF_FIELD_OFFSET(MongoResponse, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MongoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_brpc_2fpolicy_2fmongo_2eproto_getter, &descriptor_table_brpc_2fpolicy_2fmongo_2eproto_once,
      file_level_metadata_brpc_2fpolicy_2fmongo_2eproto[2]);
}

// ===================================================================

MongoService::~MongoService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* MongoService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_brpc_2fpolicy_2fmongo_2eproto);
  return file_level_service_descriptors_brpc_2fpolicy_2fmongo_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* MongoService::GetDescriptor() {
  return descriptor();
}

void MongoService::default_method(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::brpc::policy::MongoRequest*,
                         ::brpc::policy::MongoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method default_method() not implemented.");
  done->Run();
}

void MongoService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_brpc_2fpolicy_2fmongo_2eproto[0]);
  switch(method->index()) {
    case 0:
      default_method(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::brpc::policy::MongoRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::brpc::policy::MongoResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& MongoService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::policy::MongoRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& MongoService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::policy::MongoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

MongoService_Stub::MongoService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
MongoService_Stub::MongoService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
MongoService_Stub::~MongoService_Stub() {
  if (owns_channel_) delete channel_;
}

void MongoService_Stub::default_method(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::brpc::policy::MongoRequest* request,
                              ::brpc::policy::MongoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace policy
}  // namespace brpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::brpc::policy::MongoHeader*
Arena::CreateMaybeMessage< ::brpc::policy::MongoHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::brpc::policy::MongoHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::brpc::policy::MongoRequest*
Arena::CreateMaybeMessage< ::brpc::policy::MongoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::brpc::policy::MongoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::brpc::policy::MongoResponse*
Arena::CreateMaybeMessage< ::brpc::policy::MongoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::brpc::policy::MongoResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
