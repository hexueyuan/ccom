// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/policy/hulu_pbrpc_meta.proto

#include "brpc/policy/hulu_pbrpc_meta.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace brpc {
namespace policy {
PROTOBUF_CONSTEXPR HuluRpcRequestMeta::HuluRpcRequestMeta(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.service_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.method_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.credential_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chuck_info_)*/nullptr
  , /*decltype(_impl_.method_index_)*/0
  , /*decltype(_impl_.compress_type_)*/0
  , /*decltype(_impl_.correlation_id_)*/int64_t{0}
  , /*decltype(_impl_.log_id_)*/int64_t{0}
  , /*decltype(_impl_.trace_id_)*/int64_t{0}
  , /*decltype(_impl_.parent_span_id_)*/int64_t{0}
  , /*decltype(_impl_.span_id_)*/int64_t{0}
  , /*decltype(_impl_.request_talk_type_)*/0
  , /*decltype(_impl_.user_message_size_)*/0
  , /*decltype(_impl_.user_defined_source_addr_)*/int64_t{0}} {}
struct HuluRpcRequestMetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HuluRpcRequestMetaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HuluRpcRequestMetaDefaultTypeInternal() {}
  union {
    HuluRpcRequestMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HuluRpcRequestMetaDefaultTypeInternal _HuluRpcRequestMeta_default_instance_;
PROTOBUF_CONSTEXPR HuluRpcResponseMeta::HuluRpcResponseMeta(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.error_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chuck_info_)*/nullptr
  , /*decltype(_impl_.error_code_)*/0
  , /*decltype(_impl_.compress_type_)*/0
  , /*decltype(_impl_.correlation_id_)*/int64_t{0}
  , /*decltype(_impl_.response_talk_type_)*/0
  , /*decltype(_impl_.user_message_size_)*/0
  , /*decltype(_impl_.user_defined_source_addr_)*/int64_t{0}} {}
struct HuluRpcResponseMetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HuluRpcResponseMetaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HuluRpcResponseMetaDefaultTypeInternal() {}
  union {
    HuluRpcResponseMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HuluRpcResponseMetaDefaultTypeInternal _HuluRpcResponseMeta_default_instance_;
}  // namespace policy
}  // namespace brpc
static ::_pb::Metadata file_level_metadata_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto = nullptr;

const uint32_t TableStruct_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::brpc::policy::HuluRpcRequestMeta, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::HuluRpcRequestMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::brpc::policy::HuluRpcRequestMeta, _impl_.service_name_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::HuluRpcRequestMeta, _impl_.method_index_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::HuluRpcRequestMeta, _impl_.compress_type_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::HuluRpcRequestMeta, _impl_.correlation_id_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::HuluRpcRequestMeta, _impl_.log_id_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::HuluRpcRequestMeta, _impl_.chuck_info_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::HuluRpcRequestMeta, _impl_.trace_id_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::HuluRpcRequestMeta, _impl_.parent_span_id_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::HuluRpcRequestMeta, _impl_.span_id_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::HuluRpcRequestMeta, _impl_.request_talk_type_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::HuluRpcRequestMeta, _impl_.user_data_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::HuluRpcRequestMeta, _impl_.user_message_size_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::HuluRpcRequestMeta, _impl_.user_defined_source_addr_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::HuluRpcRequestMeta, _impl_.method_name_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::HuluRpcRequestMeta, _impl_.credential_data_),
  0,
  5,
  6,
  7,
  8,
  4,
  9,
  10,
  11,
  12,
  1,
  13,
  14,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::brpc::policy::HuluRpcResponseMeta, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::HuluRpcResponseMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::brpc::policy::HuluRpcResponseMeta, _impl_.error_code_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::HuluRpcResponseMeta, _impl_.error_text_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::HuluRpcResponseMeta, _impl_.correlation_id_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::HuluRpcResponseMeta, _impl_.compress_type_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::HuluRpcResponseMeta, _impl_.chuck_info_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::HuluRpcResponseMeta, _impl_.response_talk_type_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::HuluRpcResponseMeta, _impl_.user_data_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::HuluRpcResponseMeta, _impl_.user_message_size_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::HuluRpcResponseMeta, _impl_.user_defined_source_addr_),
  3,
  0,
  5,
  4,
  2,
  6,
  1,
  7,
  8,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 21, -1, sizeof(::brpc::policy::HuluRpcRequestMeta)},
  { 36, 51, -1, sizeof(::brpc::policy::HuluRpcResponseMeta)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::brpc::policy::_HuluRpcRequestMeta_default_instance_._instance,
  &::brpc::policy::_HuluRpcResponseMeta_default_instance_._instance,
};

const char descriptor_table_protodef_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!brpc/policy/hulu_pbrpc_meta.proto\022\013brp"
  "c.policy\032\022brpc/options.proto\"\210\003\n\022HuluRpc"
  "RequestMeta\022\024\n\014service_name\030\001 \002(\t\022\024\n\014met"
  "hod_index\030\002 \002(\005\022\025\n\rcompress_type\030\003 \001(\005\022\026"
  "\n\016correlation_id\030\004 \001(\003\022\016\n\006log_id\030\005 \001(\003\022#"
  "\n\nchuck_info\030\006 \001(\0132\017.brpc.ChunkInfo\022\020\n\010t"
  "race_id\030\007 \001(\003\022\026\n\016parent_span_id\030\010 \001(\003\022\017\n"
  "\007span_id\030\t \001(\003\022)\n\021request_talk_type\030\n \001("
  "\0162\016.brpc.TalkType\022\021\n\tuser_data\030\013 \001(\014\022\031\n\021"
  "user_message_size\030\014 \001(\005\022 \n\030user_defined_"
  "source_addr\030\r \001(\003\022\023\n\013method_name\030\016 \001(\t\022\027"
  "\n\017credential_data\030\017 \001(\014\"\215\002\n\023HuluRpcRespo"
  "nseMeta\022\022\n\nerror_code\030\001 \001(\005\022\022\n\nerror_tex"
  "t\030\002 \001(\t\022\026\n\016correlation_id\030\003 \001(\022\022\025\n\rcompr"
  "ess_type\030\004 \001(\005\022#\n\nchuck_info\030\005 \001(\0132\017.brp"
  "c.ChunkInfo\022*\n\022response_talk_type\030\006 \001(\0162"
  "\016.brpc.TalkType\022\021\n\tuser_data\030\007 \001(\014\022\031\n\021us"
  "er_message_size\030\010 \001(\005\022 \n\030user_defined_so"
  "urce_addr\030\t \001(\003B\037\n\017com.brpc.policyB\014Hulu"
  "RpcProto"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto_deps[1] = {
  &::descriptor_table_brpc_2foptions_2eproto,
};
static ::_pbi::once_flag descriptor_table_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto = {
    false, false, 768, descriptor_table_protodef_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto,
    "brpc/policy/hulu_pbrpc_meta.proto",
    &descriptor_table_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto_once, descriptor_table_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto::offsets,
    file_level_metadata_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto, file_level_enum_descriptors_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto,
    file_level_service_descriptors_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto_getter() {
  return &descriptor_table_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto(&descriptor_table_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto);
namespace brpc {
namespace policy {

// ===================================================================

class HuluRpcRequestMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<HuluRpcRequestMeta>()._impl_._has_bits_);
  static void set_has_service_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_method_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_compress_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_correlation_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_log_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::brpc::ChunkInfo& chuck_info(const HuluRpcRequestMeta* msg);
  static void set_has_chuck_info(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_trace_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_parent_span_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_span_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_request_talk_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_user_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_message_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_user_defined_source_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_method_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_credential_data(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000021) ^ 0x00000021) != 0;
  }
};

const ::brpc::ChunkInfo&
HuluRpcRequestMeta::_Internal::chuck_info(const HuluRpcRequestMeta* msg) {
  return *msg->_impl_.chuck_info_;
}
void HuluRpcRequestMeta::clear_chuck_info() {
  if (_impl_.chuck_info_ != nullptr) _impl_.chuck_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
HuluRpcRequestMeta::HuluRpcRequestMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:brpc.policy.HuluRpcRequestMeta)
}
HuluRpcRequestMeta::HuluRpcRequestMeta(const HuluRpcRequestMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.service_name_){}
    , decltype(_impl_.user_data_){}
    , decltype(_impl_.method_name_){}
    , decltype(_impl_.credential_data_){}
    , decltype(_impl_.chuck_info_){nullptr}
    , decltype(_impl_.method_index_){}
    , decltype(_impl_.compress_type_){}
    , decltype(_impl_.correlation_id_){}
    , decltype(_impl_.log_id_){}
    , decltype(_impl_.trace_id_){}
    , decltype(_impl_.parent_span_id_){}
    , decltype(_impl_.span_id_){}
    , decltype(_impl_.request_talk_type_){}
    , decltype(_impl_.user_message_size_){}
    , decltype(_impl_.user_defined_source_addr_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_service_name()) {
    _impl_.service_name_.Set(from._internal_service_name(), 
      GetArenaForAllocation());
  }
  _impl_.user_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_data()) {
    _impl_.user_data_.Set(from._internal_user_data(), 
      GetArenaForAllocation());
  }
  _impl_.method_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_method_name()) {
    _impl_.method_name_.Set(from._internal_method_name(), 
      GetArenaForAllocation());
  }
  _impl_.credential_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.credential_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_credential_data()) {
    _impl_.credential_data_.Set(from._internal_credential_data(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_chuck_info()) {
    _impl_.chuck_info_ = new ::brpc::ChunkInfo(*from._impl_.chuck_info_);
  }
  ::memcpy(&_impl_.method_index_, &from._impl_.method_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.user_defined_source_addr_) -
    reinterpret_cast<char*>(&_impl_.method_index_)) + sizeof(_impl_.user_defined_source_addr_));
  // @@protoc_insertion_point(copy_constructor:brpc.policy.HuluRpcRequestMeta)
}

inline void HuluRpcRequestMeta::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.service_name_){}
    , decltype(_impl_.user_data_){}
    , decltype(_impl_.method_name_){}
    , decltype(_impl_.credential_data_){}
    , decltype(_impl_.chuck_info_){nullptr}
    , decltype(_impl_.method_index_){0}
    , decltype(_impl_.compress_type_){0}
    , decltype(_impl_.correlation_id_){int64_t{0}}
    , decltype(_impl_.log_id_){int64_t{0}}
    , decltype(_impl_.trace_id_){int64_t{0}}
    , decltype(_impl_.parent_span_id_){int64_t{0}}
    , decltype(_impl_.span_id_){int64_t{0}}
    , decltype(_impl_.request_talk_type_){0}
    , decltype(_impl_.user_message_size_){0}
    , decltype(_impl_.user_defined_source_addr_){int64_t{0}}
  };
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.method_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.credential_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.credential_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HuluRpcRequestMeta::~HuluRpcRequestMeta() {
  // @@protoc_insertion_point(destructor:brpc.policy.HuluRpcRequestMeta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HuluRpcRequestMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.service_name_.Destroy();
  _impl_.user_data_.Destroy();
  _impl_.method_name_.Destroy();
  _impl_.credential_data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.chuck_info_;
}

void HuluRpcRequestMeta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HuluRpcRequestMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.policy.HuluRpcRequestMeta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.service_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.user_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.method_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.credential_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.chuck_info_ != nullptr);
      _impl_.chuck_info_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.method_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.correlation_id_) -
        reinterpret_cast<char*>(&_impl_.method_index_)) + sizeof(_impl_.correlation_id_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&_impl_.log_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.user_defined_source_addr_) -
        reinterpret_cast<char*>(&_impl_.log_id_)) + sizeof(_impl_.user_defined_source_addr_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HuluRpcRequestMeta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "brpc.policy.HuluRpcRequestMeta.service_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int32 method_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_method_index(&has_bits);
          _impl_.method_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 compress_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_compress_type(&has_bits);
          _impl_.compress_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 correlation_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_correlation_id(&has_bits);
          _impl_.correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 log_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_log_id(&has_bits);
          _impl_.log_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .brpc.ChunkInfo chuck_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_chuck_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 trace_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_trace_id(&has_bits);
          _impl_.trace_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 parent_span_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_parent_span_id(&has_bits);
          _impl_.parent_span_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 span_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_span_id(&has_bits);
          _impl_.span_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .brpc.TalkType request_talk_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::brpc::TalkType_IsValid(val))) {
            _internal_set_request_talk_type(static_cast<::brpc::TalkType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bytes user_data = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_user_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 user_message_size = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_user_message_size(&has_bits);
          _impl_.user_message_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 user_defined_source_addr = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_user_defined_source_addr(&has_bits);
          _impl_.user_defined_source_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string method_name = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_method_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "brpc.policy.HuluRpcRequestMeta.method_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes credential_data = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_credential_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HuluRpcRequestMeta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.HuluRpcRequestMeta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string service_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "brpc.policy.HuluRpcRequestMeta.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // required int32 method_index = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_method_index(), target);
  }

  // optional int32 compress_type = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_compress_type(), target);
  }

  // optional int64 correlation_id = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_correlation_id(), target);
  }

  // optional int64 log_id = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_log_id(), target);
  }

  // optional .brpc.ChunkInfo chuck_info = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::chuck_info(this),
        _Internal::chuck_info(this).GetCachedSize(), target, stream);
  }

  // optional int64 trace_id = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_trace_id(), target);
  }

  // optional int64 parent_span_id = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_parent_span_id(), target);
  }

  // optional int64 span_id = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_span_id(), target);
  }

  // optional .brpc.TalkType request_talk_type = 10;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_request_talk_type(), target);
  }

  // optional bytes user_data = 11;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_user_data(), target);
  }

  // optional int32 user_message_size = 12;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_user_message_size(), target);
  }

  // optional int64 user_defined_source_addr = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_user_defined_source_addr(), target);
  }

  // optional string method_name = 14;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_method_name().data(), static_cast<int>(this->_internal_method_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "brpc.policy.HuluRpcRequestMeta.method_name");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_method_name(), target);
  }

  // optional bytes credential_data = 15;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_credential_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.HuluRpcRequestMeta)
  return target;
}

size_t HuluRpcRequestMeta::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:brpc.policy.HuluRpcRequestMeta)
  size_t total_size = 0;

  if (_internal_has_service_name()) {
    // required string service_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  if (_internal_has_method_index()) {
    // required int32 method_index = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_method_index());
  }

  return total_size;
}
size_t HuluRpcRequestMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.policy.HuluRpcRequestMeta)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000021) ^ 0x00000021) == 0) {  // All required fields are present.
    // required string service_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());

    // required int32 method_index = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_method_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional bytes user_data = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_user_data());
    }

    // optional string method_name = 14;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_method_name());
    }

    // optional bytes credential_data = 15;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_credential_data());
    }

    // optional .brpc.ChunkInfo chuck_info = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chuck_info_);
    }

  }
  if (cached_has_bits & 0x000000c0u) {
    // optional int32 compress_type = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_compress_type());
    }

    // optional int64 correlation_id = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_correlation_id());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional int64 log_id = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_log_id());
    }

    // optional int64 trace_id = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_trace_id());
    }

    // optional int64 parent_span_id = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_parent_span_id());
    }

    // optional int64 span_id = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_span_id());
    }

    // optional .brpc.TalkType request_talk_type = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_request_talk_type());
    }

    // optional int32 user_message_size = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_user_message_size());
    }

    // optional int64 user_defined_source_addr = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_user_defined_source_addr());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HuluRpcRequestMeta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HuluRpcRequestMeta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HuluRpcRequestMeta::GetClassData() const { return &_class_data_; }

void HuluRpcRequestMeta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HuluRpcRequestMeta *>(to)->MergeFrom(
      static_cast<const HuluRpcRequestMeta &>(from));
}


void HuluRpcRequestMeta::MergeFrom(const HuluRpcRequestMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.policy.HuluRpcRequestMeta)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_service_name(from._internal_service_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_data(from._internal_user_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_method_name(from._internal_method_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_credential_data(from._internal_credential_data());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_chuck_info()->::brpc::ChunkInfo::MergeFrom(from._internal_chuck_info());
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.method_index_ = from._impl_.method_index_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.compress_type_ = from._impl_.compress_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.correlation_id_ = from._impl_.correlation_id_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.log_id_ = from._impl_.log_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.trace_id_ = from._impl_.trace_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.parent_span_id_ = from._impl_.parent_span_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.span_id_ = from._impl_.span_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.request_talk_type_ = from._impl_.request_talk_type_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.user_message_size_ = from._impl_.user_message_size_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.user_defined_source_addr_ = from._impl_.user_defined_source_addr_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HuluRpcRequestMeta::CopyFrom(const HuluRpcRequestMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.policy.HuluRpcRequestMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HuluRpcRequestMeta::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_chuck_info()) {
    if (!_impl_.chuck_info_->IsInitialized()) return false;
  }
  return true;
}

void HuluRpcRequestMeta::InternalSwap(HuluRpcRequestMeta* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_name_, lhs_arena,
      &other->_impl_.service_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_data_, lhs_arena,
      &other->_impl_.user_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.method_name_, lhs_arena,
      &other->_impl_.method_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.credential_data_, lhs_arena,
      &other->_impl_.credential_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HuluRpcRequestMeta, _impl_.user_defined_source_addr_)
      + sizeof(HuluRpcRequestMeta::_impl_.user_defined_source_addr_)
      - PROTOBUF_FIELD_OFFSET(HuluRpcRequestMeta, _impl_.chuck_info_)>(
          reinterpret_cast<char*>(&_impl_.chuck_info_),
          reinterpret_cast<char*>(&other->_impl_.chuck_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HuluRpcRequestMeta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto_getter, &descriptor_table_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto_once,
      file_level_metadata_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto[0]);
}

// ===================================================================

class HuluRpcResponseMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<HuluRpcResponseMeta>()._impl_._has_bits_);
  static void set_has_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_error_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_correlation_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_compress_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::brpc::ChunkInfo& chuck_info(const HuluRpcResponseMeta* msg);
  static void set_has_chuck_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_response_talk_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_user_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_message_size(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_user_defined_source_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::brpc::ChunkInfo&
HuluRpcResponseMeta::_Internal::chuck_info(const HuluRpcResponseMeta* msg) {
  return *msg->_impl_.chuck_info_;
}
void HuluRpcResponseMeta::clear_chuck_info() {
  if (_impl_.chuck_info_ != nullptr) _impl_.chuck_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
HuluRpcResponseMeta::HuluRpcResponseMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:brpc.policy.HuluRpcResponseMeta)
}
HuluRpcResponseMeta::HuluRpcResponseMeta(const HuluRpcResponseMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_text_){}
    , decltype(_impl_.user_data_){}
    , decltype(_impl_.chuck_info_){nullptr}
    , decltype(_impl_.error_code_){}
    , decltype(_impl_.compress_type_){}
    , decltype(_impl_.correlation_id_){}
    , decltype(_impl_.response_talk_type_){}
    , decltype(_impl_.user_message_size_){}
    , decltype(_impl_.user_defined_source_addr_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error_text()) {
    _impl_.error_text_.Set(from._internal_error_text(), 
      GetArenaForAllocation());
  }
  _impl_.user_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_data()) {
    _impl_.user_data_.Set(from._internal_user_data(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_chuck_info()) {
    _impl_.chuck_info_ = new ::brpc::ChunkInfo(*from._impl_.chuck_info_);
  }
  ::memcpy(&_impl_.error_code_, &from._impl_.error_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.user_defined_source_addr_) -
    reinterpret_cast<char*>(&_impl_.error_code_)) + sizeof(_impl_.user_defined_source_addr_));
  // @@protoc_insertion_point(copy_constructor:brpc.policy.HuluRpcResponseMeta)
}

inline void HuluRpcResponseMeta::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_text_){}
    , decltype(_impl_.user_data_){}
    , decltype(_impl_.chuck_info_){nullptr}
    , decltype(_impl_.error_code_){0}
    , decltype(_impl_.compress_type_){0}
    , decltype(_impl_.correlation_id_){int64_t{0}}
    , decltype(_impl_.response_talk_type_){0}
    , decltype(_impl_.user_message_size_){0}
    , decltype(_impl_.user_defined_source_addr_){int64_t{0}}
  };
  _impl_.error_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HuluRpcResponseMeta::~HuluRpcResponseMeta() {
  // @@protoc_insertion_point(destructor:brpc.policy.HuluRpcResponseMeta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HuluRpcResponseMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_text_.Destroy();
  _impl_.user_data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.chuck_info_;
}

void HuluRpcResponseMeta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HuluRpcResponseMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.policy.HuluRpcResponseMeta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.error_text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.user_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.chuck_info_ != nullptr);
      _impl_.chuck_info_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.error_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.user_message_size_) -
        reinterpret_cast<char*>(&_impl_.error_code_)) + sizeof(_impl_.user_message_size_));
  }
  _impl_.user_defined_source_addr_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HuluRpcResponseMeta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_error_code(&has_bits);
          _impl_.error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string error_text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "brpc.policy.HuluRpcResponseMeta.error_text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional sint64 correlation_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_correlation_id(&has_bits);
          _impl_.correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 compress_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_compress_type(&has_bits);
          _impl_.compress_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .brpc.ChunkInfo chuck_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_chuck_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .brpc.TalkType response_talk_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::brpc::TalkType_IsValid(val))) {
            _internal_set_response_talk_type(static_cast<::brpc::TalkType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bytes user_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_user_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 user_message_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_user_message_size(&has_bits);
          _impl_.user_message_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 user_defined_source_addr = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_user_defined_source_addr(&has_bits);
          _impl_.user_defined_source_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HuluRpcResponseMeta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.HuluRpcResponseMeta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 error_code = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_error_code(), target);
  }

  // optional string error_text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error_text().data(), static_cast<int>(this->_internal_error_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "brpc.policy.HuluRpcResponseMeta.error_text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_text(), target);
  }

  // optional sint64 correlation_id = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(3, this->_internal_correlation_id(), target);
  }

  // optional int32 compress_type = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_compress_type(), target);
  }

  // optional .brpc.ChunkInfo chuck_info = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::chuck_info(this),
        _Internal::chuck_info(this).GetCachedSize(), target, stream);
  }

  // optional .brpc.TalkType response_talk_type = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_response_talk_type(), target);
  }

  // optional bytes user_data = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_user_data(), target);
  }

  // optional int32 user_message_size = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_user_message_size(), target);
  }

  // optional int64 user_defined_source_addr = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_user_defined_source_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.HuluRpcResponseMeta)
  return target;
}

size_t HuluRpcResponseMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.policy.HuluRpcResponseMeta)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string error_text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error_text());
    }

    // optional bytes user_data = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_user_data());
    }

    // optional .brpc.ChunkInfo chuck_info = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chuck_info_);
    }

    // optional int32 error_code = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_error_code());
    }

    // optional int32 compress_type = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_compress_type());
    }

    // optional sint64 correlation_id = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_correlation_id());
    }

    // optional .brpc.TalkType response_talk_type = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_response_talk_type());
    }

    // optional int32 user_message_size = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_user_message_size());
    }

  }
  // optional int64 user_defined_source_addr = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_user_defined_source_addr());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HuluRpcResponseMeta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HuluRpcResponseMeta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HuluRpcResponseMeta::GetClassData() const { return &_class_data_; }

void HuluRpcResponseMeta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HuluRpcResponseMeta *>(to)->MergeFrom(
      static_cast<const HuluRpcResponseMeta &>(from));
}


void HuluRpcResponseMeta::MergeFrom(const HuluRpcResponseMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.policy.HuluRpcResponseMeta)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_error_text(from._internal_error_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_data(from._internal_user_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_chuck_info()->::brpc::ChunkInfo::MergeFrom(from._internal_chuck_info());
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.error_code_ = from._impl_.error_code_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.compress_type_ = from._impl_.compress_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.correlation_id_ = from._impl_.correlation_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.response_talk_type_ = from._impl_.response_talk_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.user_message_size_ = from._impl_.user_message_size_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_user_defined_source_addr(from._internal_user_defined_source_addr());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HuluRpcResponseMeta::CopyFrom(const HuluRpcResponseMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.policy.HuluRpcResponseMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HuluRpcResponseMeta::IsInitialized() const {
  if (_internal_has_chuck_info()) {
    if (!_impl_.chuck_info_->IsInitialized()) return false;
  }
  return true;
}

void HuluRpcResponseMeta::InternalSwap(HuluRpcResponseMeta* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_text_, lhs_arena,
      &other->_impl_.error_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_data_, lhs_arena,
      &other->_impl_.user_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HuluRpcResponseMeta, _impl_.user_defined_source_addr_)
      + sizeof(HuluRpcResponseMeta::_impl_.user_defined_source_addr_)
      - PROTOBUF_FIELD_OFFSET(HuluRpcResponseMeta, _impl_.chuck_info_)>(
          reinterpret_cast<char*>(&_impl_.chuck_info_),
          reinterpret_cast<char*>(&other->_impl_.chuck_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HuluRpcResponseMeta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto_getter, &descriptor_table_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto_once,
      file_level_metadata_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace policy
}  // namespace brpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::brpc::policy::HuluRpcRequestMeta*
Arena::CreateMaybeMessage< ::brpc::policy::HuluRpcRequestMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::brpc::policy::HuluRpcRequestMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::brpc::policy::HuluRpcResponseMeta*
Arena::CreateMaybeMessage< ::brpc::policy::HuluRpcResponseMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::brpc::policy::HuluRpcResponseMeta >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
