// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/policy/baidu_rpc_meta.proto

#include "brpc/policy/baidu_rpc_meta.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace brpc {
namespace policy {
PROTOBUF_CONSTEXPR RpcMeta::RpcMeta(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.authentication_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_.chunk_info_)*/nullptr
  , /*decltype(_impl_.stream_settings_)*/nullptr
  , /*decltype(_impl_.correlation_id_)*/int64_t{0}
  , /*decltype(_impl_.compress_type_)*/0
  , /*decltype(_impl_.attachment_size_)*/0} {}
struct RpcMetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcMetaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcMetaDefaultTypeInternal() {}
  union {
    RpcMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcMetaDefaultTypeInternal _RpcMeta_default_instance_;
PROTOBUF_CONSTEXPR RpcRequestMeta::RpcRequestMeta(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.service_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.method_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.log_id_)*/int64_t{0}
  , /*decltype(_impl_.trace_id_)*/int64_t{0}
  , /*decltype(_impl_.span_id_)*/int64_t{0}
  , /*decltype(_impl_.parent_span_id_)*/int64_t{0}
  , /*decltype(_impl_.timeout_ms_)*/0} {}
struct RpcRequestMetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcRequestMetaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcRequestMetaDefaultTypeInternal() {}
  union {
    RpcRequestMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcRequestMetaDefaultTypeInternal _RpcRequestMeta_default_instance_;
PROTOBUF_CONSTEXPR RpcResponseMeta::RpcResponseMeta(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.error_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_code_)*/0} {}
struct RpcResponseMetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcResponseMetaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcResponseMetaDefaultTypeInternal() {}
  union {
    RpcResponseMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcResponseMetaDefaultTypeInternal _RpcResponseMeta_default_instance_;
}  // namespace policy
}  // namespace brpc
static ::_pb::Metadata file_level_metadata_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto = nullptr;

const uint32_t TableStruct_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RpcMeta, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RpcMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RpcMeta, _impl_.request_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RpcMeta, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RpcMeta, _impl_.compress_type_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RpcMeta, _impl_.correlation_id_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RpcMeta, _impl_.attachment_size_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RpcMeta, _impl_.chunk_info_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RpcMeta, _impl_.authentication_data_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RpcMeta, _impl_.stream_settings_),
  1,
  2,
  6,
  5,
  7,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RpcRequestMeta, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RpcRequestMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RpcRequestMeta, _impl_.service_name_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RpcRequestMeta, _impl_.method_name_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RpcRequestMeta, _impl_.log_id_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RpcRequestMeta, _impl_.trace_id_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RpcRequestMeta, _impl_.span_id_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RpcRequestMeta, _impl_.parent_span_id_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RpcRequestMeta, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RpcRequestMeta, _impl_.timeout_ms_),
  0,
  1,
  3,
  4,
  5,
  6,
  2,
  7,
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RpcResponseMeta, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RpcResponseMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RpcResponseMeta, _impl_.error_code_),
  PROTOBUF_FIELD_OFFSET(::brpc::policy::RpcResponseMeta, _impl_.error_text_),
  1,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, -1, sizeof(::brpc::policy::RpcMeta)},
  { 22, 36, -1, sizeof(::brpc::policy::RpcRequestMeta)},
  { 44, 52, -1, sizeof(::brpc::policy::RpcResponseMeta)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::brpc::policy::_RpcMeta_default_instance_._instance,
  &::brpc::policy::_RpcRequestMeta_default_instance_._instance,
  &::brpc::policy::_RpcResponseMeta_default_instance_._instance,
};

const char descriptor_table_protodef_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n brpc/policy/baidu_rpc_meta.proto\022\013brpc"
  ".policy\032\022brpc/options.proto\032\035brpc/stream"
  "ing_rpc_meta.proto\"\240\002\n\007RpcMeta\022,\n\007reques"
  "t\030\001 \001(\0132\033.brpc.policy.RpcRequestMeta\022.\n\010"
  "response\030\002 \001(\0132\034.brpc.policy.RpcResponse"
  "Meta\022\025\n\rcompress_type\030\003 \001(\005\022\026\n\016correlati"
  "on_id\030\004 \001(\003\022\027\n\017attachment_size\030\005 \001(\005\022#\n\n"
  "chunk_info\030\006 \001(\0132\017.brpc.ChunkInfo\022\033\n\023aut"
  "hentication_data\030\007 \001(\014\022-\n\017stream_setting"
  "s\030\010 \001(\0132\024.brpc.StreamSettings\"\256\001\n\016RpcReq"
  "uestMeta\022\024\n\014service_name\030\001 \002(\t\022\023\n\013method"
  "_name\030\002 \002(\t\022\016\n\006log_id\030\003 \001(\003\022\020\n\010trace_id\030"
  "\004 \001(\003\022\017\n\007span_id\030\005 \001(\003\022\026\n\016parent_span_id"
  "\030\006 \001(\003\022\022\n\nrequest_id\030\007 \001(\t\022\022\n\ntimeout_ms"
  "\030\010 \001(\005\"9\n\017RpcResponseMeta\022\022\n\nerror_code\030"
  "\001 \001(\005\022\022\n\nerror_text\030\002 \001(\tB \n\017com.brpc.po"
  "licyB\rBaiduRpcProto"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto_deps[2] = {
  &::descriptor_table_brpc_2foptions_2eproto,
  &::descriptor_table_brpc_2fstreaming_5frpc_5fmeta_2eproto,
};
static ::_pbi::once_flag descriptor_table_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto = {
    false, false, 659, descriptor_table_protodef_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto,
    "brpc/policy/baidu_rpc_meta.proto",
    &descriptor_table_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto_once, descriptor_table_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto_deps, 2, 3,
    schemas, file_default_instances, TableStruct_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto::offsets,
    file_level_metadata_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto, file_level_enum_descriptors_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto,
    file_level_service_descriptors_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto_getter() {
  return &descriptor_table_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto(&descriptor_table_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto);
namespace brpc {
namespace policy {

// ===================================================================

class RpcMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<RpcMeta>()._impl_._has_bits_);
  static const ::brpc::policy::RpcRequestMeta& request(const RpcMeta* msg);
  static void set_has_request(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::brpc::policy::RpcResponseMeta& response(const RpcMeta* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_compress_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_correlation_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_attachment_size(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::brpc::ChunkInfo& chunk_info(const RpcMeta* msg);
  static void set_has_chunk_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_authentication_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::brpc::StreamSettings& stream_settings(const RpcMeta* msg);
  static void set_has_stream_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::brpc::policy::RpcRequestMeta&
RpcMeta::_Internal::request(const RpcMeta* msg) {
  return *msg->_impl_.request_;
}
const ::brpc::policy::RpcResponseMeta&
RpcMeta::_Internal::response(const RpcMeta* msg) {
  return *msg->_impl_.response_;
}
const ::brpc::ChunkInfo&
RpcMeta::_Internal::chunk_info(const RpcMeta* msg) {
  return *msg->_impl_.chunk_info_;
}
const ::brpc::StreamSettings&
RpcMeta::_Internal::stream_settings(const RpcMeta* msg) {
  return *msg->_impl_.stream_settings_;
}
void RpcMeta::clear_chunk_info() {
  if (_impl_.chunk_info_ != nullptr) _impl_.chunk_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void RpcMeta::clear_stream_settings() {
  if (_impl_.stream_settings_ != nullptr) _impl_.stream_settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
RpcMeta::RpcMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:brpc.policy.RpcMeta)
}
RpcMeta::RpcMeta(const RpcMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.authentication_data_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.response_){nullptr}
    , decltype(_impl_.chunk_info_){nullptr}
    , decltype(_impl_.stream_settings_){nullptr}
    , decltype(_impl_.correlation_id_){}
    , decltype(_impl_.compress_type_){}
    , decltype(_impl_.attachment_size_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.authentication_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.authentication_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_authentication_data()) {
    _impl_.authentication_data_.Set(from._internal_authentication_data(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_request()) {
    _impl_.request_ = new ::brpc::policy::RpcRequestMeta(*from._impl_.request_);
  }
  if (from._internal_has_response()) {
    _impl_.response_ = new ::brpc::policy::RpcResponseMeta(*from._impl_.response_);
  }
  if (from._internal_has_chunk_info()) {
    _impl_.chunk_info_ = new ::brpc::ChunkInfo(*from._impl_.chunk_info_);
  }
  if (from._internal_has_stream_settings()) {
    _impl_.stream_settings_ = new ::brpc::StreamSettings(*from._impl_.stream_settings_);
  }
  ::memcpy(&_impl_.correlation_id_, &from._impl_.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.attachment_size_) -
    reinterpret_cast<char*>(&_impl_.correlation_id_)) + sizeof(_impl_.attachment_size_));
  // @@protoc_insertion_point(copy_constructor:brpc.policy.RpcMeta)
}

inline void RpcMeta::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.authentication_data_){}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.response_){nullptr}
    , decltype(_impl_.chunk_info_){nullptr}
    , decltype(_impl_.stream_settings_){nullptr}
    , decltype(_impl_.correlation_id_){int64_t{0}}
    , decltype(_impl_.compress_type_){0}
    , decltype(_impl_.attachment_size_){0}
  };
  _impl_.authentication_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.authentication_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RpcMeta::~RpcMeta() {
  // @@protoc_insertion_point(destructor:brpc.policy.RpcMeta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RpcMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.authentication_data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
  if (this != internal_default_instance()) delete _impl_.response_;
  if (this != internal_default_instance()) delete _impl_.chunk_info_;
  if (this != internal_default_instance()) delete _impl_.stream_settings_;
}

void RpcMeta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RpcMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.policy.RpcMeta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.authentication_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.request_ != nullptr);
      _impl_.request_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.response_ != nullptr);
      _impl_.response_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.chunk_info_ != nullptr);
      _impl_.chunk_info_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.stream_settings_ != nullptr);
      _impl_.stream_settings_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.correlation_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.attachment_size_) -
        reinterpret_cast<char*>(&_impl_.correlation_id_)) + sizeof(_impl_.attachment_size_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RpcMeta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .brpc.policy.RpcRequestMeta request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .brpc.policy.RpcResponseMeta response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 compress_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_compress_type(&has_bits);
          _impl_.compress_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 correlation_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_correlation_id(&has_bits);
          _impl_.correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 attachment_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_attachment_size(&has_bits);
          _impl_.attachment_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .brpc.ChunkInfo chunk_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_chunk_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes authentication_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_authentication_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .brpc.StreamSettings stream_settings = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RpcMeta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.RpcMeta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .brpc.policy.RpcRequestMeta request = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  // optional .brpc.policy.RpcResponseMeta response = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  // optional int32 compress_type = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_compress_type(), target);
  }

  // optional int64 correlation_id = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_correlation_id(), target);
  }

  // optional int32 attachment_size = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_attachment_size(), target);
  }

  // optional .brpc.ChunkInfo chunk_info = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::chunk_info(this),
        _Internal::chunk_info(this).GetCachedSize(), target, stream);
  }

  // optional bytes authentication_data = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_authentication_data(), target);
  }

  // optional .brpc.StreamSettings stream_settings = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::stream_settings(this),
        _Internal::stream_settings(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.RpcMeta)
  return target;
}

size_t RpcMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.policy.RpcMeta)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes authentication_data = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_authentication_data());
    }

    // optional .brpc.policy.RpcRequestMeta request = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_);
    }

    // optional .brpc.policy.RpcResponseMeta response = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_);
    }

    // optional .brpc.ChunkInfo chunk_info = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chunk_info_);
    }

    // optional .brpc.StreamSettings stream_settings = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stream_settings_);
    }

    // optional int64 correlation_id = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_correlation_id());
    }

    // optional int32 compress_type = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_compress_type());
    }

    // optional int32 attachment_size = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_attachment_size());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RpcMeta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RpcMeta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RpcMeta::GetClassData() const { return &_class_data_; }

void RpcMeta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RpcMeta *>(to)->MergeFrom(
      static_cast<const RpcMeta &>(from));
}


void RpcMeta::MergeFrom(const RpcMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.policy.RpcMeta)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_authentication_data(from._internal_authentication_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_request()->::brpc::policy::RpcRequestMeta::MergeFrom(from._internal_request());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_response()->::brpc::policy::RpcResponseMeta::MergeFrom(from._internal_response());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_chunk_info()->::brpc::ChunkInfo::MergeFrom(from._internal_chunk_info());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_stream_settings()->::brpc::StreamSettings::MergeFrom(from._internal_stream_settings());
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.correlation_id_ = from._impl_.correlation_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.compress_type_ = from._impl_.compress_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.attachment_size_ = from._impl_.attachment_size_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RpcMeta::CopyFrom(const RpcMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.policy.RpcMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcMeta::IsInitialized() const {
  if (_internal_has_request()) {
    if (!_impl_.request_->IsInitialized()) return false;
  }
  if (_internal_has_chunk_info()) {
    if (!_impl_.chunk_info_->IsInitialized()) return false;
  }
  if (_internal_has_stream_settings()) {
    if (!_impl_.stream_settings_->IsInitialized()) return false;
  }
  return true;
}

void RpcMeta::InternalSwap(RpcMeta* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.authentication_data_, lhs_arena,
      &other->_impl_.authentication_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RpcMeta, _impl_.attachment_size_)
      + sizeof(RpcMeta::_impl_.attachment_size_)
      - PROTOBUF_FIELD_OFFSET(RpcMeta, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcMeta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto_getter, &descriptor_table_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto_once,
      file_level_metadata_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto[0]);
}

// ===================================================================

class RpcRequestMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<RpcRequestMeta>()._impl_._has_bits_);
  static void set_has_service_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_method_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_log_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_trace_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_span_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_parent_span_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_timeout_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

RpcRequestMeta::RpcRequestMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:brpc.policy.RpcRequestMeta)
}
RpcRequestMeta::RpcRequestMeta(const RpcRequestMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.service_name_){}
    , decltype(_impl_.method_name_){}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.log_id_){}
    , decltype(_impl_.trace_id_){}
    , decltype(_impl_.span_id_){}
    , decltype(_impl_.parent_span_id_){}
    , decltype(_impl_.timeout_ms_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_service_name()) {
    _impl_.service_name_.Set(from._internal_service_name(), 
      GetArenaForAllocation());
  }
  _impl_.method_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_method_name()) {
    _impl_.method_name_.Set(from._internal_method_name(), 
      GetArenaForAllocation());
  }
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_request_id()) {
    _impl_.request_id_.Set(from._internal_request_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.log_id_, &from._impl_.log_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timeout_ms_) -
    reinterpret_cast<char*>(&_impl_.log_id_)) + sizeof(_impl_.timeout_ms_));
  // @@protoc_insertion_point(copy_constructor:brpc.policy.RpcRequestMeta)
}

inline void RpcRequestMeta::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.service_name_){}
    , decltype(_impl_.method_name_){}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.log_id_){int64_t{0}}
    , decltype(_impl_.trace_id_){int64_t{0}}
    , decltype(_impl_.span_id_){int64_t{0}}
    , decltype(_impl_.parent_span_id_){int64_t{0}}
    , decltype(_impl_.timeout_ms_){0}
  };
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.method_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RpcRequestMeta::~RpcRequestMeta() {
  // @@protoc_insertion_point(destructor:brpc.policy.RpcRequestMeta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RpcRequestMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.service_name_.Destroy();
  _impl_.method_name_.Destroy();
  _impl_.request_id_.Destroy();
}

void RpcRequestMeta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RpcRequestMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.policy.RpcRequestMeta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.service_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.method_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.request_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.log_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.timeout_ms_) -
        reinterpret_cast<char*>(&_impl_.log_id_)) + sizeof(_impl_.timeout_ms_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RpcRequestMeta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "brpc.policy.RpcRequestMeta.service_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string method_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_method_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "brpc.policy.RpcRequestMeta.method_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 log_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_log_id(&has_bits);
          _impl_.log_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 trace_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_trace_id(&has_bits);
          _impl_.trace_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 span_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_span_id(&has_bits);
          _impl_.span_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 parent_span_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_parent_span_id(&has_bits);
          _impl_.parent_span_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string request_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "brpc.policy.RpcRequestMeta.request_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 timeout_ms = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_timeout_ms(&has_bits);
          _impl_.timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RpcRequestMeta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.RpcRequestMeta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string service_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "brpc.policy.RpcRequestMeta.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // required string method_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_method_name().data(), static_cast<int>(this->_internal_method_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "brpc.policy.RpcRequestMeta.method_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_method_name(), target);
  }

  // optional int64 log_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_log_id(), target);
  }

  // optional int64 trace_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_trace_id(), target);
  }

  // optional int64 span_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_span_id(), target);
  }

  // optional int64 parent_span_id = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_parent_span_id(), target);
  }

  // optional string request_id = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "brpc.policy.RpcRequestMeta.request_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_request_id(), target);
  }

  // optional int32 timeout_ms = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_timeout_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.RpcRequestMeta)
  return target;
}

size_t RpcRequestMeta::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:brpc.policy.RpcRequestMeta)
  size_t total_size = 0;

  if (_internal_has_service_name()) {
    // required string service_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  if (_internal_has_method_name()) {
    // required string method_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method_name());
  }

  return total_size;
}
size_t RpcRequestMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.policy.RpcRequestMeta)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string service_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());

    // required string method_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000fcu) {
    // optional string request_id = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_request_id());
    }

    // optional int64 log_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_log_id());
    }

    // optional int64 trace_id = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_trace_id());
    }

    // optional int64 span_id = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_span_id());
    }

    // optional int64 parent_span_id = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_parent_span_id());
    }

    // optional int32 timeout_ms = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_timeout_ms());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RpcRequestMeta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RpcRequestMeta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RpcRequestMeta::GetClassData() const { return &_class_data_; }

void RpcRequestMeta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RpcRequestMeta *>(to)->MergeFrom(
      static_cast<const RpcRequestMeta &>(from));
}


void RpcRequestMeta::MergeFrom(const RpcRequestMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.policy.RpcRequestMeta)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_service_name(from._internal_service_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_method_name(from._internal_method_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_request_id(from._internal_request_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.log_id_ = from._impl_.log_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.trace_id_ = from._impl_.trace_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.span_id_ = from._impl_.span_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.parent_span_id_ = from._impl_.parent_span_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.timeout_ms_ = from._impl_.timeout_ms_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RpcRequestMeta::CopyFrom(const RpcRequestMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.policy.RpcRequestMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcRequestMeta::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RpcRequestMeta::InternalSwap(RpcRequestMeta* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_name_, lhs_arena,
      &other->_impl_.service_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.method_name_, lhs_arena,
      &other->_impl_.method_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RpcRequestMeta, _impl_.timeout_ms_)
      + sizeof(RpcRequestMeta::_impl_.timeout_ms_)
      - PROTOBUF_FIELD_OFFSET(RpcRequestMeta, _impl_.log_id_)>(
          reinterpret_cast<char*>(&_impl_.log_id_),
          reinterpret_cast<char*>(&other->_impl_.log_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcRequestMeta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto_getter, &descriptor_table_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto_once,
      file_level_metadata_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto[1]);
}

// ===================================================================

class RpcResponseMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<RpcResponseMeta>()._impl_._has_bits_);
  static void set_has_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RpcResponseMeta::RpcResponseMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:brpc.policy.RpcResponseMeta)
}
RpcResponseMeta::RpcResponseMeta(const RpcResponseMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_text_){}
    , decltype(_impl_.error_code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error_text()) {
    _impl_.error_text_.Set(from._internal_error_text(), 
      GetArenaForAllocation());
  }
  _impl_.error_code_ = from._impl_.error_code_;
  // @@protoc_insertion_point(copy_constructor:brpc.policy.RpcResponseMeta)
}

inline void RpcResponseMeta::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_text_){}
    , decltype(_impl_.error_code_){0}
  };
  _impl_.error_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RpcResponseMeta::~RpcResponseMeta() {
  // @@protoc_insertion_point(destructor:brpc.policy.RpcResponseMeta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RpcResponseMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_text_.Destroy();
}

void RpcResponseMeta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RpcResponseMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.policy.RpcResponseMeta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.error_text_.ClearNonDefaultToEmpty();
  }
  _impl_.error_code_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RpcResponseMeta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_error_code(&has_bits);
          _impl_.error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string error_text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "brpc.policy.RpcResponseMeta.error_text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RpcResponseMeta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.RpcResponseMeta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 error_code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_error_code(), target);
  }

  // optional string error_text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error_text().data(), static_cast<int>(this->_internal_error_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "brpc.policy.RpcResponseMeta.error_text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.RpcResponseMeta)
  return target;
}

size_t RpcResponseMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.policy.RpcResponseMeta)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string error_text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error_text());
    }

    // optional int32 error_code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_error_code());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RpcResponseMeta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RpcResponseMeta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RpcResponseMeta::GetClassData() const { return &_class_data_; }

void RpcResponseMeta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RpcResponseMeta *>(to)->MergeFrom(
      static_cast<const RpcResponseMeta &>(from));
}


void RpcResponseMeta::MergeFrom(const RpcResponseMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.policy.RpcResponseMeta)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_error_text(from._internal_error_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.error_code_ = from._impl_.error_code_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RpcResponseMeta::CopyFrom(const RpcResponseMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.policy.RpcResponseMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcResponseMeta::IsInitialized() const {
  return true;
}

void RpcResponseMeta::InternalSwap(RpcResponseMeta* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_text_, lhs_arena,
      &other->_impl_.error_text_, rhs_arena
  );
  swap(_impl_.error_code_, other->_impl_.error_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcResponseMeta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto_getter, &descriptor_table_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto_once,
      file_level_metadata_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace policy
}  // namespace brpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::brpc::policy::RpcMeta*
Arena::CreateMaybeMessage< ::brpc::policy::RpcMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::brpc::policy::RpcMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::brpc::policy::RpcRequestMeta*
Arena::CreateMaybeMessage< ::brpc::policy::RpcRequestMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::brpc::policy::RpcRequestMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::brpc::policy::RpcResponseMeta*
Arena::CreateMaybeMessage< ::brpc::policy::RpcResponseMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::brpc::policy::RpcResponseMeta >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
