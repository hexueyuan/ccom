// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/policy/mongo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_brpc_2fpolicy_2fmongo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_brpc_2fpolicy_2fmongo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_brpc_2fpolicy_2fmongo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_brpc_2fpolicy_2fmongo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_brpc_2fpolicy_2fmongo_2eproto;
namespace brpc {
namespace policy {
class MongoHeader;
struct MongoHeaderDefaultTypeInternal;
extern MongoHeaderDefaultTypeInternal _MongoHeader_default_instance_;
class MongoRequest;
struct MongoRequestDefaultTypeInternal;
extern MongoRequestDefaultTypeInternal _MongoRequest_default_instance_;
class MongoResponse;
struct MongoResponseDefaultTypeInternal;
extern MongoResponseDefaultTypeInternal _MongoResponse_default_instance_;
}  // namespace policy
}  // namespace brpc
PROTOBUF_NAMESPACE_OPEN
template<> ::brpc::policy::MongoHeader* Arena::CreateMaybeMessage<::brpc::policy::MongoHeader>(Arena*);
template<> ::brpc::policy::MongoRequest* Arena::CreateMaybeMessage<::brpc::policy::MongoRequest>(Arena*);
template<> ::brpc::policy::MongoResponse* Arena::CreateMaybeMessage<::brpc::policy::MongoResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace brpc {
namespace policy {

enum MongoOp : int {
  OPREPLY = 1,
  DBMSG = 1000,
  DB_UPDATE = 2001,
  DB_INSERT = 2002,
  DB_QUERY = 2004,
  DB_GETMORE = 2005,
  DB_DELETE = 2006,
  DB_KILLCURSORS = 2007,
  DB_COMMAND = 2008,
  DB_COMMANDREPLY = 2009
};
bool MongoOp_IsValid(int value);
constexpr MongoOp MongoOp_MIN = OPREPLY;
constexpr MongoOp MongoOp_MAX = DB_COMMANDREPLY;
constexpr int MongoOp_ARRAYSIZE = MongoOp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MongoOp_descriptor();
template<typename T>
inline const std::string& MongoOp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MongoOp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MongoOp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MongoOp_descriptor(), enum_t_value);
}
inline bool MongoOp_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MongoOp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MongoOp>(
    MongoOp_descriptor(), name, value);
}
// ===================================================================

class MongoHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:brpc.policy.MongoHeader) */ {
 public:
  inline MongoHeader() : MongoHeader(nullptr) {}
  ~MongoHeader() override;
  explicit PROTOBUF_CONSTEXPR MongoHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MongoHeader(const MongoHeader& from);
  MongoHeader(MongoHeader&& from) noexcept
    : MongoHeader() {
    *this = ::std::move(from);
  }

  inline MongoHeader& operator=(const MongoHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline MongoHeader& operator=(MongoHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MongoHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const MongoHeader* internal_default_instance() {
    return reinterpret_cast<const MongoHeader*>(
               &_MongoHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MongoHeader& a, MongoHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(MongoHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MongoHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MongoHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MongoHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MongoHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MongoHeader& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MongoHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "brpc.policy.MongoHeader";
  }
  protected:
  explicit MongoHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageLengthFieldNumber = 1,
    kRequestIdFieldNumber = 2,
    kResponseToFieldNumber = 3,
    kOpCodeFieldNumber = 4,
  };
  // required int32 message_length = 1;
  bool has_message_length() const;
  private:
  bool _internal_has_message_length() const;
  public:
  void clear_message_length();
  int32_t message_length() const;
  void set_message_length(int32_t value);
  private:
  int32_t _internal_message_length() const;
  void _internal_set_message_length(int32_t value);
  public:

  // required int32 request_id = 2;
  bool has_request_id() const;
  private:
  bool _internal_has_request_id() const;
  public:
  void clear_request_id();
  int32_t request_id() const;
  void set_request_id(int32_t value);
  private:
  int32_t _internal_request_id() const;
  void _internal_set_request_id(int32_t value);
  public:

  // required int32 response_to = 3;
  bool has_response_to() const;
  private:
  bool _internal_has_response_to() const;
  public:
  void clear_response_to();
  int32_t response_to() const;
  void set_response_to(int32_t value);
  private:
  int32_t _internal_response_to() const;
  void _internal_set_response_to(int32_t value);
  public:

  // required .brpc.policy.MongoOp op_code = 4;
  bool has_op_code() const;
  private:
  bool _internal_has_op_code() const;
  public:
  void clear_op_code();
  ::brpc::policy::MongoOp op_code() const;
  void set_op_code(::brpc::policy::MongoOp value);
  private:
  ::brpc::policy::MongoOp _internal_op_code() const;
  void _internal_set_op_code(::brpc::policy::MongoOp value);
  public:

  // @@protoc_insertion_point(class_scope:brpc.policy.MongoHeader)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t message_length_;
    int32_t request_id_;
    int32_t response_to_;
    int op_code_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brpc_2fpolicy_2fmongo_2eproto;
};
// -------------------------------------------------------------------

class MongoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:brpc.policy.MongoRequest) */ {
 public:
  inline MongoRequest() : MongoRequest(nullptr) {}
  ~MongoRequest() override;
  explicit PROTOBUF_CONSTEXPR MongoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MongoRequest(const MongoRequest& from);
  MongoRequest(MongoRequest&& from) noexcept
    : MongoRequest() {
    *this = ::std::move(from);
  }

  inline MongoRequest& operator=(const MongoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MongoRequest& operator=(MongoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MongoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MongoRequest* internal_default_instance() {
    return reinterpret_cast<const MongoRequest*>(
               &_MongoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MongoRequest& a, MongoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MongoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MongoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MongoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MongoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MongoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MongoRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MongoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "brpc.policy.MongoRequest";
  }
  protected:
  explicit MongoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // required string message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // required .brpc.policy.MongoHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::brpc::policy::MongoHeader& header() const;
  PROTOBUF_NODISCARD ::brpc::policy::MongoHeader* release_header();
  ::brpc::policy::MongoHeader* mutable_header();
  void set_allocated_header(::brpc::policy::MongoHeader* header);
  private:
  const ::brpc::policy::MongoHeader& _internal_header() const;
  ::brpc::policy::MongoHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::brpc::policy::MongoHeader* header);
  ::brpc::policy::MongoHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:brpc.policy.MongoRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::brpc::policy::MongoHeader* header_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brpc_2fpolicy_2fmongo_2eproto;
};
// -------------------------------------------------------------------

class MongoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:brpc.policy.MongoResponse) */ {
 public:
  inline MongoResponse() : MongoResponse(nullptr) {}
  ~MongoResponse() override;
  explicit PROTOBUF_CONSTEXPR MongoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MongoResponse(const MongoResponse& from);
  MongoResponse(MongoResponse&& from) noexcept
    : MongoResponse() {
    *this = ::std::move(from);
  }

  inline MongoResponse& operator=(const MongoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MongoResponse& operator=(MongoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MongoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MongoResponse* internal_default_instance() {
    return reinterpret_cast<const MongoResponse*>(
               &_MongoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MongoResponse& a, MongoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MongoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MongoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MongoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MongoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MongoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MongoResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MongoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "brpc.policy.MongoResponse";
  }
  protected:
  explicit MongoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 6,
    kHeaderFieldNumber = 1,
    kCursorIdFieldNumber = 3,
    kResponseFlagsFieldNumber = 2,
    kStartingFromFieldNumber = 4,
    kNumberReturnedFieldNumber = 5,
  };
  // required string message = 6;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // required .brpc.policy.MongoHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::brpc::policy::MongoHeader& header() const;
  PROTOBUF_NODISCARD ::brpc::policy::MongoHeader* release_header();
  ::brpc::policy::MongoHeader* mutable_header();
  void set_allocated_header(::brpc::policy::MongoHeader* header);
  private:
  const ::brpc::policy::MongoHeader& _internal_header() const;
  ::brpc::policy::MongoHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::brpc::policy::MongoHeader* header);
  ::brpc::policy::MongoHeader* unsafe_arena_release_header();

  // required int64 cursor_id = 3;
  bool has_cursor_id() const;
  private:
  bool _internal_has_cursor_id() const;
  public:
  void clear_cursor_id();
  int64_t cursor_id() const;
  void set_cursor_id(int64_t value);
  private:
  int64_t _internal_cursor_id() const;
  void _internal_set_cursor_id(int64_t value);
  public:

  // required int32 response_flags = 2;
  bool has_response_flags() const;
  private:
  bool _internal_has_response_flags() const;
  public:
  void clear_response_flags();
  int32_t response_flags() const;
  void set_response_flags(int32_t value);
  private:
  int32_t _internal_response_flags() const;
  void _internal_set_response_flags(int32_t value);
  public:

  // required int32 starting_from = 4;
  bool has_starting_from() const;
  private:
  bool _internal_has_starting_from() const;
  public:
  void clear_starting_from();
  int32_t starting_from() const;
  void set_starting_from(int32_t value);
  private:
  int32_t _internal_starting_from() const;
  void _internal_set_starting_from(int32_t value);
  public:

  // required int32 number_returned = 5;
  bool has_number_returned() const;
  private:
  bool _internal_has_number_returned() const;
  public:
  void clear_number_returned();
  int32_t number_returned() const;
  void set_number_returned(int32_t value);
  private:
  int32_t _internal_number_returned() const;
  void _internal_set_number_returned(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:brpc.policy.MongoResponse)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::brpc::policy::MongoHeader* header_;
    int64_t cursor_id_;
    int32_t response_flags_;
    int32_t starting_from_;
    int32_t number_returned_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brpc_2fpolicy_2fmongo_2eproto;
};
// ===================================================================

class MongoService_Stub;

class MongoService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline MongoService() {};
 public:
  virtual ~MongoService();

  typedef MongoService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void default_method(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::brpc::policy::MongoRequest* request,
                       ::brpc::policy::MongoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MongoService);
};

class MongoService_Stub : public MongoService {
 public:
  MongoService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  MongoService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~MongoService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements MongoService ------------------------------------------

  void default_method(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::brpc::policy::MongoRequest* request,
                       ::brpc::policy::MongoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MongoService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MongoHeader

// required int32 message_length = 1;
inline bool MongoHeader::_internal_has_message_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MongoHeader::has_message_length() const {
  return _internal_has_message_length();
}
inline void MongoHeader::clear_message_length() {
  _impl_.message_length_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t MongoHeader::_internal_message_length() const {
  return _impl_.message_length_;
}
inline int32_t MongoHeader::message_length() const {
  // @@protoc_insertion_point(field_get:brpc.policy.MongoHeader.message_length)
  return _internal_message_length();
}
inline void MongoHeader::_internal_set_message_length(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_length_ = value;
}
inline void MongoHeader::set_message_length(int32_t value) {
  _internal_set_message_length(value);
  // @@protoc_insertion_point(field_set:brpc.policy.MongoHeader.message_length)
}

// required int32 request_id = 2;
inline bool MongoHeader::_internal_has_request_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MongoHeader::has_request_id() const {
  return _internal_has_request_id();
}
inline void MongoHeader::clear_request_id() {
  _impl_.request_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t MongoHeader::_internal_request_id() const {
  return _impl_.request_id_;
}
inline int32_t MongoHeader::request_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.MongoHeader.request_id)
  return _internal_request_id();
}
inline void MongoHeader::_internal_set_request_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.request_id_ = value;
}
inline void MongoHeader::set_request_id(int32_t value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:brpc.policy.MongoHeader.request_id)
}

// required int32 response_to = 3;
inline bool MongoHeader::_internal_has_response_to() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MongoHeader::has_response_to() const {
  return _internal_has_response_to();
}
inline void MongoHeader::clear_response_to() {
  _impl_.response_to_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t MongoHeader::_internal_response_to() const {
  return _impl_.response_to_;
}
inline int32_t MongoHeader::response_to() const {
  // @@protoc_insertion_point(field_get:brpc.policy.MongoHeader.response_to)
  return _internal_response_to();
}
inline void MongoHeader::_internal_set_response_to(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.response_to_ = value;
}
inline void MongoHeader::set_response_to(int32_t value) {
  _internal_set_response_to(value);
  // @@protoc_insertion_point(field_set:brpc.policy.MongoHeader.response_to)
}

// required .brpc.policy.MongoOp op_code = 4;
inline bool MongoHeader::_internal_has_op_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MongoHeader::has_op_code() const {
  return _internal_has_op_code();
}
inline void MongoHeader::clear_op_code() {
  _impl_.op_code_ = 1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::brpc::policy::MongoOp MongoHeader::_internal_op_code() const {
  return static_cast< ::brpc::policy::MongoOp >(_impl_.op_code_);
}
inline ::brpc::policy::MongoOp MongoHeader::op_code() const {
  // @@protoc_insertion_point(field_get:brpc.policy.MongoHeader.op_code)
  return _internal_op_code();
}
inline void MongoHeader::_internal_set_op_code(::brpc::policy::MongoOp value) {
  assert(::brpc::policy::MongoOp_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.op_code_ = value;
}
inline void MongoHeader::set_op_code(::brpc::policy::MongoOp value) {
  _internal_set_op_code(value);
  // @@protoc_insertion_point(field_set:brpc.policy.MongoHeader.op_code)
}

// -------------------------------------------------------------------

// MongoRequest

// required .brpc.policy.MongoHeader header = 1;
inline bool MongoRequest::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool MongoRequest::has_header() const {
  return _internal_has_header();
}
inline void MongoRequest::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::brpc::policy::MongoHeader& MongoRequest::_internal_header() const {
  const ::brpc::policy::MongoHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::brpc::policy::MongoHeader&>(
      ::brpc::policy::_MongoHeader_default_instance_);
}
inline const ::brpc::policy::MongoHeader& MongoRequest::header() const {
  // @@protoc_insertion_point(field_get:brpc.policy.MongoRequest.header)
  return _internal_header();
}
inline void MongoRequest::unsafe_arena_set_allocated_header(
    ::brpc::policy::MongoHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:brpc.policy.MongoRequest.header)
}
inline ::brpc::policy::MongoHeader* MongoRequest::release_header() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::brpc::policy::MongoHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::brpc::policy::MongoHeader* MongoRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:brpc.policy.MongoRequest.header)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::brpc::policy::MongoHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::brpc::policy::MongoHeader* MongoRequest::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::brpc::policy::MongoHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::brpc::policy::MongoHeader* MongoRequest::mutable_header() {
  ::brpc::policy::MongoHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:brpc.policy.MongoRequest.header)
  return _msg;
}
inline void MongoRequest::set_allocated_header(::brpc::policy::MongoHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.MongoRequest.header)
}

// required string message = 2;
inline bool MongoRequest::_internal_has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MongoRequest::has_message() const {
  return _internal_has_message();
}
inline void MongoRequest::clear_message() {
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MongoRequest::message() const {
  // @@protoc_insertion_point(field_get:brpc.policy.MongoRequest.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MongoRequest::set_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:brpc.policy.MongoRequest.message)
}
inline std::string* MongoRequest::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:brpc.policy.MongoRequest.message)
  return _s;
}
inline const std::string& MongoRequest::_internal_message() const {
  return _impl_.message_.Get();
}
inline void MongoRequest::_internal_set_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* MongoRequest::_internal_mutable_message() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* MongoRequest::release_message() {
  // @@protoc_insertion_point(field_release:brpc.policy.MongoRequest.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MongoRequest::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.MongoRequest.message)
}

// -------------------------------------------------------------------

// MongoResponse

// required .brpc.policy.MongoHeader header = 1;
inline bool MongoResponse::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool MongoResponse::has_header() const {
  return _internal_has_header();
}
inline void MongoResponse::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::brpc::policy::MongoHeader& MongoResponse::_internal_header() const {
  const ::brpc::policy::MongoHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::brpc::policy::MongoHeader&>(
      ::brpc::policy::_MongoHeader_default_instance_);
}
inline const ::brpc::policy::MongoHeader& MongoResponse::header() const {
  // @@protoc_insertion_point(field_get:brpc.policy.MongoResponse.header)
  return _internal_header();
}
inline void MongoResponse::unsafe_arena_set_allocated_header(
    ::brpc::policy::MongoHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:brpc.policy.MongoResponse.header)
}
inline ::brpc::policy::MongoHeader* MongoResponse::release_header() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::brpc::policy::MongoHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::brpc::policy::MongoHeader* MongoResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:brpc.policy.MongoResponse.header)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::brpc::policy::MongoHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::brpc::policy::MongoHeader* MongoResponse::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::brpc::policy::MongoHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::brpc::policy::MongoHeader* MongoResponse::mutable_header() {
  ::brpc::policy::MongoHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:brpc.policy.MongoResponse.header)
  return _msg;
}
inline void MongoResponse::set_allocated_header(::brpc::policy::MongoHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.MongoResponse.header)
}

// required int32 response_flags = 2;
inline bool MongoResponse::_internal_has_response_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MongoResponse::has_response_flags() const {
  return _internal_has_response_flags();
}
inline void MongoResponse::clear_response_flags() {
  _impl_.response_flags_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t MongoResponse::_internal_response_flags() const {
  return _impl_.response_flags_;
}
inline int32_t MongoResponse::response_flags() const {
  // @@protoc_insertion_point(field_get:brpc.policy.MongoResponse.response_flags)
  return _internal_response_flags();
}
inline void MongoResponse::_internal_set_response_flags(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.response_flags_ = value;
}
inline void MongoResponse::set_response_flags(int32_t value) {
  _internal_set_response_flags(value);
  // @@protoc_insertion_point(field_set:brpc.policy.MongoResponse.response_flags)
}

// required int64 cursor_id = 3;
inline bool MongoResponse::_internal_has_cursor_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MongoResponse::has_cursor_id() const {
  return _internal_has_cursor_id();
}
inline void MongoResponse::clear_cursor_id() {
  _impl_.cursor_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t MongoResponse::_internal_cursor_id() const {
  return _impl_.cursor_id_;
}
inline int64_t MongoResponse::cursor_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.MongoResponse.cursor_id)
  return _internal_cursor_id();
}
inline void MongoResponse::_internal_set_cursor_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.cursor_id_ = value;
}
inline void MongoResponse::set_cursor_id(int64_t value) {
  _internal_set_cursor_id(value);
  // @@protoc_insertion_point(field_set:brpc.policy.MongoResponse.cursor_id)
}

// required int32 starting_from = 4;
inline bool MongoResponse::_internal_has_starting_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MongoResponse::has_starting_from() const {
  return _internal_has_starting_from();
}
inline void MongoResponse::clear_starting_from() {
  _impl_.starting_from_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t MongoResponse::_internal_starting_from() const {
  return _impl_.starting_from_;
}
inline int32_t MongoResponse::starting_from() const {
  // @@protoc_insertion_point(field_get:brpc.policy.MongoResponse.starting_from)
  return _internal_starting_from();
}
inline void MongoResponse::_internal_set_starting_from(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.starting_from_ = value;
}
inline void MongoResponse::set_starting_from(int32_t value) {
  _internal_set_starting_from(value);
  // @@protoc_insertion_point(field_set:brpc.policy.MongoResponse.starting_from)
}

// required int32 number_returned = 5;
inline bool MongoResponse::_internal_has_number_returned() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MongoResponse::has_number_returned() const {
  return _internal_has_number_returned();
}
inline void MongoResponse::clear_number_returned() {
  _impl_.number_returned_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t MongoResponse::_internal_number_returned() const {
  return _impl_.number_returned_;
}
inline int32_t MongoResponse::number_returned() const {
  // @@protoc_insertion_point(field_get:brpc.policy.MongoResponse.number_returned)
  return _internal_number_returned();
}
inline void MongoResponse::_internal_set_number_returned(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.number_returned_ = value;
}
inline void MongoResponse::set_number_returned(int32_t value) {
  _internal_set_number_returned(value);
  // @@protoc_insertion_point(field_set:brpc.policy.MongoResponse.number_returned)
}

// required string message = 6;
inline bool MongoResponse::_internal_has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MongoResponse::has_message() const {
  return _internal_has_message();
}
inline void MongoResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MongoResponse::message() const {
  // @@protoc_insertion_point(field_get:brpc.policy.MongoResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MongoResponse::set_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:brpc.policy.MongoResponse.message)
}
inline std::string* MongoResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:brpc.policy.MongoResponse.message)
  return _s;
}
inline const std::string& MongoResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void MongoResponse::_internal_set_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* MongoResponse::_internal_mutable_message() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* MongoResponse::release_message() {
  // @@protoc_insertion_point(field_release:brpc.policy.MongoResponse.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MongoResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.MongoResponse.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace policy
}  // namespace brpc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::brpc::policy::MongoOp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::brpc::policy::MongoOp>() {
  return ::brpc::policy::MongoOp_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_brpc_2fpolicy_2fmongo_2eproto
