// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/nshead_meta.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_brpc_2fnshead_5fmeta_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_brpc_2fnshead_5fmeta_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "brpc/options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_brpc_2fnshead_5fmeta_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_brpc_2fnshead_5fmeta_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_brpc_2fnshead_5fmeta_2eproto;
namespace brpc {
class NsheadMeta;
struct NsheadMetaDefaultTypeInternal;
extern NsheadMetaDefaultTypeInternal _NsheadMeta_default_instance_;
}  // namespace brpc
PROTOBUF_NAMESPACE_OPEN
template<> ::brpc::NsheadMeta* Arena::CreateMaybeMessage<::brpc::NsheadMeta>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace brpc {

// ===================================================================

class NsheadMeta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:brpc.NsheadMeta) */ {
 public:
  inline NsheadMeta() : NsheadMeta(nullptr) {}
  ~NsheadMeta() override;
  explicit PROTOBUF_CONSTEXPR NsheadMeta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NsheadMeta(const NsheadMeta& from);
  NsheadMeta(NsheadMeta&& from) noexcept
    : NsheadMeta() {
    *this = ::std::move(from);
  }

  inline NsheadMeta& operator=(const NsheadMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline NsheadMeta& operator=(NsheadMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NsheadMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const NsheadMeta* internal_default_instance() {
    return reinterpret_cast<const NsheadMeta*>(
               &_NsheadMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NsheadMeta& a, NsheadMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(NsheadMeta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NsheadMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NsheadMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NsheadMeta>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NsheadMeta& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NsheadMeta& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NsheadMeta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "brpc.NsheadMeta";
  }
  protected:
  explicit NsheadMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFullMethodNameFieldNumber = 1,
    kUserStringFieldNumber = 9,
    kCorrelationIdFieldNumber = 2,
    kLogIdFieldNumber = 3,
    kAttachmentSizeFieldNumber = 4,
    kCompressTypeFieldNumber = 5,
    kTraceIdFieldNumber = 6,
    kSpanIdFieldNumber = 7,
    kParentSpanIdFieldNumber = 8,
  };
  // required string full_method_name = 1;
  bool has_full_method_name() const;
  private:
  bool _internal_has_full_method_name() const;
  public:
  void clear_full_method_name();
  const std::string& full_method_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_full_method_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_full_method_name();
  PROTOBUF_NODISCARD std::string* release_full_method_name();
  void set_allocated_full_method_name(std::string* full_method_name);
  private:
  const std::string& _internal_full_method_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_full_method_name(const std::string& value);
  std::string* _internal_mutable_full_method_name();
  public:

  // optional bytes user_string = 9;
  bool has_user_string() const;
  private:
  bool _internal_has_user_string() const;
  public:
  void clear_user_string();
  const std::string& user_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_string();
  PROTOBUF_NODISCARD std::string* release_user_string();
  void set_allocated_user_string(std::string* user_string);
  private:
  const std::string& _internal_user_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_string(const std::string& value);
  std::string* _internal_mutable_user_string();
  public:

  // optional int64 correlation_id = 2;
  bool has_correlation_id() const;
  private:
  bool _internal_has_correlation_id() const;
  public:
  void clear_correlation_id();
  int64_t correlation_id() const;
  void set_correlation_id(int64_t value);
  private:
  int64_t _internal_correlation_id() const;
  void _internal_set_correlation_id(int64_t value);
  public:

  // optional int64 log_id = 3;
  bool has_log_id() const;
  private:
  bool _internal_has_log_id() const;
  public:
  void clear_log_id();
  int64_t log_id() const;
  void set_log_id(int64_t value);
  private:
  int64_t _internal_log_id() const;
  void _internal_set_log_id(int64_t value);
  public:

  // optional int32 attachment_size = 4;
  bool has_attachment_size() const;
  private:
  bool _internal_has_attachment_size() const;
  public:
  void clear_attachment_size();
  int32_t attachment_size() const;
  void set_attachment_size(int32_t value);
  private:
  int32_t _internal_attachment_size() const;
  void _internal_set_attachment_size(int32_t value);
  public:

  // optional .brpc.CompressType compress_type = 5;
  bool has_compress_type() const;
  private:
  bool _internal_has_compress_type() const;
  public:
  void clear_compress_type();
  ::brpc::CompressType compress_type() const;
  void set_compress_type(::brpc::CompressType value);
  private:
  ::brpc::CompressType _internal_compress_type() const;
  void _internal_set_compress_type(::brpc::CompressType value);
  public:

  // optional int64 trace_id = 6;
  bool has_trace_id() const;
  private:
  bool _internal_has_trace_id() const;
  public:
  void clear_trace_id();
  int64_t trace_id() const;
  void set_trace_id(int64_t value);
  private:
  int64_t _internal_trace_id() const;
  void _internal_set_trace_id(int64_t value);
  public:

  // optional int64 span_id = 7;
  bool has_span_id() const;
  private:
  bool _internal_has_span_id() const;
  public:
  void clear_span_id();
  int64_t span_id() const;
  void set_span_id(int64_t value);
  private:
  int64_t _internal_span_id() const;
  void _internal_set_span_id(int64_t value);
  public:

  // optional int64 parent_span_id = 8;
  bool has_parent_span_id() const;
  private:
  bool _internal_has_parent_span_id() const;
  public:
  void clear_parent_span_id();
  int64_t parent_span_id() const;
  void set_parent_span_id(int64_t value);
  private:
  int64_t _internal_parent_span_id() const;
  void _internal_set_parent_span_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:brpc.NsheadMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr full_method_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_string_;
    int64_t correlation_id_;
    int64_t log_id_;
    int32_t attachment_size_;
    int compress_type_;
    int64_t trace_id_;
    int64_t span_id_;
    int64_t parent_span_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_brpc_2fnshead_5fmeta_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NsheadMeta

// required string full_method_name = 1;
inline bool NsheadMeta::_internal_has_full_method_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NsheadMeta::has_full_method_name() const {
  return _internal_has_full_method_name();
}
inline void NsheadMeta::clear_full_method_name() {
  _impl_.full_method_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NsheadMeta::full_method_name() const {
  // @@protoc_insertion_point(field_get:brpc.NsheadMeta.full_method_name)
  return _internal_full_method_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NsheadMeta::set_full_method_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.full_method_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:brpc.NsheadMeta.full_method_name)
}
inline std::string* NsheadMeta::mutable_full_method_name() {
  std::string* _s = _internal_mutable_full_method_name();
  // @@protoc_insertion_point(field_mutable:brpc.NsheadMeta.full_method_name)
  return _s;
}
inline const std::string& NsheadMeta::_internal_full_method_name() const {
  return _impl_.full_method_name_.Get();
}
inline void NsheadMeta::_internal_set_full_method_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.full_method_name_.Set(value, GetArenaForAllocation());
}
inline std::string* NsheadMeta::_internal_mutable_full_method_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.full_method_name_.Mutable(GetArenaForAllocation());
}
inline std::string* NsheadMeta::release_full_method_name() {
  // @@protoc_insertion_point(field_release:brpc.NsheadMeta.full_method_name)
  if (!_internal_has_full_method_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.full_method_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.full_method_name_.IsDefault()) {
    _impl_.full_method_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NsheadMeta::set_allocated_full_method_name(std::string* full_method_name) {
  if (full_method_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.full_method_name_.SetAllocated(full_method_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.full_method_name_.IsDefault()) {
    _impl_.full_method_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brpc.NsheadMeta.full_method_name)
}

// optional int64 correlation_id = 2;
inline bool NsheadMeta::_internal_has_correlation_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NsheadMeta::has_correlation_id() const {
  return _internal_has_correlation_id();
}
inline void NsheadMeta::clear_correlation_id() {
  _impl_.correlation_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t NsheadMeta::_internal_correlation_id() const {
  return _impl_.correlation_id_;
}
inline int64_t NsheadMeta::correlation_id() const {
  // @@protoc_insertion_point(field_get:brpc.NsheadMeta.correlation_id)
  return _internal_correlation_id();
}
inline void NsheadMeta::_internal_set_correlation_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.correlation_id_ = value;
}
inline void NsheadMeta::set_correlation_id(int64_t value) {
  _internal_set_correlation_id(value);
  // @@protoc_insertion_point(field_set:brpc.NsheadMeta.correlation_id)
}

// optional int64 log_id = 3;
inline bool NsheadMeta::_internal_has_log_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NsheadMeta::has_log_id() const {
  return _internal_has_log_id();
}
inline void NsheadMeta::clear_log_id() {
  _impl_.log_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t NsheadMeta::_internal_log_id() const {
  return _impl_.log_id_;
}
inline int64_t NsheadMeta::log_id() const {
  // @@protoc_insertion_point(field_get:brpc.NsheadMeta.log_id)
  return _internal_log_id();
}
inline void NsheadMeta::_internal_set_log_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.log_id_ = value;
}
inline void NsheadMeta::set_log_id(int64_t value) {
  _internal_set_log_id(value);
  // @@protoc_insertion_point(field_set:brpc.NsheadMeta.log_id)
}

// optional int32 attachment_size = 4;
inline bool NsheadMeta::_internal_has_attachment_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NsheadMeta::has_attachment_size() const {
  return _internal_has_attachment_size();
}
inline void NsheadMeta::clear_attachment_size() {
  _impl_.attachment_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t NsheadMeta::_internal_attachment_size() const {
  return _impl_.attachment_size_;
}
inline int32_t NsheadMeta::attachment_size() const {
  // @@protoc_insertion_point(field_get:brpc.NsheadMeta.attachment_size)
  return _internal_attachment_size();
}
inline void NsheadMeta::_internal_set_attachment_size(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.attachment_size_ = value;
}
inline void NsheadMeta::set_attachment_size(int32_t value) {
  _internal_set_attachment_size(value);
  // @@protoc_insertion_point(field_set:brpc.NsheadMeta.attachment_size)
}

// optional .brpc.CompressType compress_type = 5;
inline bool NsheadMeta::_internal_has_compress_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool NsheadMeta::has_compress_type() const {
  return _internal_has_compress_type();
}
inline void NsheadMeta::clear_compress_type() {
  _impl_.compress_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::brpc::CompressType NsheadMeta::_internal_compress_type() const {
  return static_cast< ::brpc::CompressType >(_impl_.compress_type_);
}
inline ::brpc::CompressType NsheadMeta::compress_type() const {
  // @@protoc_insertion_point(field_get:brpc.NsheadMeta.compress_type)
  return _internal_compress_type();
}
inline void NsheadMeta::_internal_set_compress_type(::brpc::CompressType value) {
  assert(::brpc::CompressType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.compress_type_ = value;
}
inline void NsheadMeta::set_compress_type(::brpc::CompressType value) {
  _internal_set_compress_type(value);
  // @@protoc_insertion_point(field_set:brpc.NsheadMeta.compress_type)
}

// optional int64 trace_id = 6;
inline bool NsheadMeta::_internal_has_trace_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool NsheadMeta::has_trace_id() const {
  return _internal_has_trace_id();
}
inline void NsheadMeta::clear_trace_id() {
  _impl_.trace_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int64_t NsheadMeta::_internal_trace_id() const {
  return _impl_.trace_id_;
}
inline int64_t NsheadMeta::trace_id() const {
  // @@protoc_insertion_point(field_get:brpc.NsheadMeta.trace_id)
  return _internal_trace_id();
}
inline void NsheadMeta::_internal_set_trace_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.trace_id_ = value;
}
inline void NsheadMeta::set_trace_id(int64_t value) {
  _internal_set_trace_id(value);
  // @@protoc_insertion_point(field_set:brpc.NsheadMeta.trace_id)
}

// optional int64 span_id = 7;
inline bool NsheadMeta::_internal_has_span_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool NsheadMeta::has_span_id() const {
  return _internal_has_span_id();
}
inline void NsheadMeta::clear_span_id() {
  _impl_.span_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int64_t NsheadMeta::_internal_span_id() const {
  return _impl_.span_id_;
}
inline int64_t NsheadMeta::span_id() const {
  // @@protoc_insertion_point(field_get:brpc.NsheadMeta.span_id)
  return _internal_span_id();
}
inline void NsheadMeta::_internal_set_span_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.span_id_ = value;
}
inline void NsheadMeta::set_span_id(int64_t value) {
  _internal_set_span_id(value);
  // @@protoc_insertion_point(field_set:brpc.NsheadMeta.span_id)
}

// optional int64 parent_span_id = 8;
inline bool NsheadMeta::_internal_has_parent_span_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool NsheadMeta::has_parent_span_id() const {
  return _internal_has_parent_span_id();
}
inline void NsheadMeta::clear_parent_span_id() {
  _impl_.parent_span_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int64_t NsheadMeta::_internal_parent_span_id() const {
  return _impl_.parent_span_id_;
}
inline int64_t NsheadMeta::parent_span_id() const {
  // @@protoc_insertion_point(field_get:brpc.NsheadMeta.parent_span_id)
  return _internal_parent_span_id();
}
inline void NsheadMeta::_internal_set_parent_span_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.parent_span_id_ = value;
}
inline void NsheadMeta::set_parent_span_id(int64_t value) {
  _internal_set_parent_span_id(value);
  // @@protoc_insertion_point(field_set:brpc.NsheadMeta.parent_span_id)
}

// optional bytes user_string = 9;
inline bool NsheadMeta::_internal_has_user_string() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NsheadMeta::has_user_string() const {
  return _internal_has_user_string();
}
inline void NsheadMeta::clear_user_string() {
  _impl_.user_string_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NsheadMeta::user_string() const {
  // @@protoc_insertion_point(field_get:brpc.NsheadMeta.user_string)
  return _internal_user_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NsheadMeta::set_user_string(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.user_string_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:brpc.NsheadMeta.user_string)
}
inline std::string* NsheadMeta::mutable_user_string() {
  std::string* _s = _internal_mutable_user_string();
  // @@protoc_insertion_point(field_mutable:brpc.NsheadMeta.user_string)
  return _s;
}
inline const std::string& NsheadMeta::_internal_user_string() const {
  return _impl_.user_string_.Get();
}
inline void NsheadMeta::_internal_set_user_string(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.user_string_.Set(value, GetArenaForAllocation());
}
inline std::string* NsheadMeta::_internal_mutable_user_string() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.user_string_.Mutable(GetArenaForAllocation());
}
inline std::string* NsheadMeta::release_user_string() {
  // @@protoc_insertion_point(field_release:brpc.NsheadMeta.user_string)
  if (!_internal_has_user_string()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.user_string_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_string_.IsDefault()) {
    _impl_.user_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NsheadMeta::set_allocated_user_string(std::string* user_string) {
  if (user_string != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.user_string_.SetAllocated(user_string, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_string_.IsDefault()) {
    _impl_.user_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:brpc.NsheadMeta.user_string)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace brpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_brpc_2fnshead_5fmeta_2eproto
