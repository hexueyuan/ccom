// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/options.proto

#include "brpc/options.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace brpc {
PROTOBUF_CONSTEXPR ChunkInfo::ChunkInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stream_id_)*/int64_t{0}
  , /*decltype(_impl_.chunk_id_)*/int64_t{0}} {}
struct ChunkInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChunkInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChunkInfoDefaultTypeInternal() {}
  union {
    ChunkInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChunkInfoDefaultTypeInternal _ChunkInfo_default_instance_;
}  // namespace brpc
static ::_pb::Metadata file_level_metadata_brpc_2foptions_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_brpc_2foptions_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_brpc_2foptions_2eproto = nullptr;

const uint32_t TableStruct_brpc_2foptions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::brpc::ChunkInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::brpc::ChunkInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::brpc::ChunkInfo, _impl_.stream_id_),
  PROTOBUF_FIELD_OFFSET(::brpc::ChunkInfo, _impl_.chunk_id_),
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::brpc::ChunkInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::brpc::_ChunkInfo_default_instance_._instance,
};

const char descriptor_table_protodef_brpc_2foptions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022brpc/options.proto\022\004brpc\032 google/proto"
  "buf/descriptor.proto\"0\n\tChunkInfo\022\021\n\tstr"
  "eam_id\030\001 \002(\003\022\020\n\010chunk_id\030\002 \002(\003*6\n\010TalkTy"
  "pe\022\024\n\020TALK_TYPE_NORMAL\020\000\022\024\n\020TALK_TYPE_ON"
  "EWAY\020\001*\200\001\n\016ConnectionType\022\033\n\027CONNECTION_"
  "TYPE_UNKNOWN\020\000\022\032\n\026CONNECTION_TYPE_SINGLE"
  "\020\001\022\032\n\026CONNECTION_TYPE_POOLED\020\002\022\031\n\025CONNEC"
  "TION_TYPE_SHORT\020\004*\217\005\n\014ProtocolType\022\024\n\020PR"
  "OTOCOL_UNKNOWN\020\000\022\026\n\022PROTOCOL_BAIDU_STD\020\001"
  "\022\032\n\026PROTOCOL_STREAMING_RPC\020\002\022\027\n\023PROTOCOL"
  "_HULU_PBRPC\020\003\022\027\n\023PROTOCOL_SOFA_PBRPC\020\004\022\021"
  "\n\rPROTOCOL_RTMP\020\005\022\023\n\017PROTOCOL_THRIFT\020\006\022\021"
  "\n\rPROTOCOL_HTTP\020\007\022\031\n\025PROTOCOL_PUBLIC_PBR"
  "PC\020\010\022\027\n\023PROTOCOL_NOVA_PBRPC\020\t\022\022\n\016PROTOCO"
  "L_REDIS\020\n\022\032\n\026PROTOCOL_NSHEAD_CLIENT\020\013\022\023\n"
  "\017PROTOCOL_NSHEAD\020\014\022\027\n\023PROTOCOL_HADOOP_RP"
  "C\020\r\022\036\n\032PROTOCOL_HADOOP_SERVER_RPC\020\016\022\022\n\016P"
  "ROTOCOL_MONGO\020\017\022\032\n\026PROTOCOL_UBRPC_COMPAC"
  "K\020\020\022\030\n\024PROTOCOL_DIDX_CLIENT\020\021\022\025\n\021PROTOCO"
  "L_MEMCACHE\020\022\022\020\n\014PROTOCOL_ITP\020\023\022\032\n\026PROTOC"
  "OL_NSHEAD_MCPACK\020\024\022\025\n\021PROTOCOL_DISP_IDL\020"
  "\025\022\031\n\025PROTOCOL_ERSDA_CLIENT\020\026\022\032\n\026PROTOCOL"
  "_UBRPC_MCPACK2\020\027\022\026\n\022PROTOCOL_CDS_AGENT\020\030"
  "\022\020\n\014PROTOCOL_ESP\020\031\022\017\n\013PROTOCOL_H2\020\032*\207\001\n\014"
  "CompressType\022\026\n\022COMPRESS_TYPE_NONE\020\000\022\030\n\024"
  "COMPRESS_TYPE_SNAPPY\020\001\022\026\n\022COMPRESS_TYPE_"
  "GZIP\020\002\022\026\n\022COMPRESS_TYPE_ZLIB\020\003\022\025\n\021COMPRE"
  "SS_TYPE_LZ4\020\004:A\n\017service_timeout\022\037.googl"
  "e.protobuf.ServiceOptions\030\220\277\005 \001(\003:\00510000"
  ":]\n\021request_talk_type\022\036.google.protobuf."
  "MethodOptions\030\221\277\005 \001(\0162\016.brpc.TalkType:\020T"
  "ALK_TYPE_NORMAL:^\n\022response_talk_type\022\036."
  "google.protobuf.MethodOptions\030\222\277\005 \001(\0162\016."
  "brpc.TalkType:\020TALK_TYPE_NORMAL:8\n\016metho"
  "d_timeout\022\036.google.protobuf.MethodOption"
  "s\030\223\277\005 \001(\003:e\n\023request_compression\022\036.googl"
  "e.protobuf.MethodOptions\030\224\277\005 \001(\0162\022.brpc."
  "CompressType:\022COMPRESS_TYPE_NONE:f\n\024resp"
  "onse_compression\022\036.google.protobuf.Metho"
  "dOptions\030\225\277\005 \001(\0162\022.brpc.CompressType:\022CO"
  "MPRESS_TYPE_NONEB\023\n\010com.brpcB\007Options"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_brpc_2foptions_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::_pbi::once_flag descriptor_table_brpc_2foptions_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_brpc_2foptions_2eproto = {
    false, false, 1637, descriptor_table_protodef_brpc_2foptions_2eproto,
    "brpc/options.proto",
    &descriptor_table_brpc_2foptions_2eproto_once, descriptor_table_brpc_2foptions_2eproto_deps, 1, 1,
    schemas, file_default_instances, TableStruct_brpc_2foptions_2eproto::offsets,
    file_level_metadata_brpc_2foptions_2eproto, file_level_enum_descriptors_brpc_2foptions_2eproto,
    file_level_service_descriptors_brpc_2foptions_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_brpc_2foptions_2eproto_getter() {
  return &descriptor_table_brpc_2foptions_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_brpc_2foptions_2eproto(&descriptor_table_brpc_2foptions_2eproto);
namespace brpc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TalkType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_brpc_2foptions_2eproto);
  return file_level_enum_descriptors_brpc_2foptions_2eproto[0];
}
bool TalkType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_brpc_2foptions_2eproto);
  return file_level_enum_descriptors_brpc_2foptions_2eproto[1];
}
bool ConnectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtocolType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_brpc_2foptions_2eproto);
  return file_level_enum_descriptors_brpc_2foptions_2eproto[2];
}
bool ProtocolType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompressType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_brpc_2foptions_2eproto);
  return file_level_enum_descriptors_brpc_2foptions_2eproto[3];
}
bool CompressType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ChunkInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ChunkInfo>()._impl_._has_bits_);
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chunk_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ChunkInfo::ChunkInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:brpc.ChunkInfo)
}
ChunkInfo::ChunkInfo(const ChunkInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stream_id_){}
    , decltype(_impl_.chunk_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.stream_id_, &from._impl_.stream_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.chunk_id_) -
    reinterpret_cast<char*>(&_impl_.stream_id_)) + sizeof(_impl_.chunk_id_));
  // @@protoc_insertion_point(copy_constructor:brpc.ChunkInfo)
}

inline void ChunkInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stream_id_){int64_t{0}}
    , decltype(_impl_.chunk_id_){int64_t{0}}
  };
}

ChunkInfo::~ChunkInfo() {
  // @@protoc_insertion_point(destructor:brpc.ChunkInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChunkInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChunkInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChunkInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.ChunkInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.stream_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.chunk_id_) -
        reinterpret_cast<char*>(&_impl_.stream_id_)) + sizeof(_impl_.chunk_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChunkInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 stream_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_stream_id(&has_bits);
          _impl_.stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 chunk_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chunk_id(&has_bits);
          _impl_.chunk_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChunkInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.ChunkInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 stream_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_stream_id(), target);
  }

  // required int64 chunk_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_chunk_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.ChunkInfo)
  return target;
}

size_t ChunkInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:brpc.ChunkInfo)
  size_t total_size = 0;

  if (_internal_has_stream_id()) {
    // required int64 stream_id = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_stream_id());
  }

  if (_internal_has_chunk_id()) {
    // required int64 chunk_id = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_chunk_id());
  }

  return total_size;
}
size_t ChunkInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.ChunkInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 stream_id = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_stream_id());

    // required int64 chunk_id = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_chunk_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChunkInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChunkInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChunkInfo::GetClassData() const { return &_class_data_; }

void ChunkInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChunkInfo *>(to)->MergeFrom(
      static_cast<const ChunkInfo &>(from));
}


void ChunkInfo::MergeFrom(const ChunkInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.ChunkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.stream_id_ = from._impl_.stream_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.chunk_id_ = from._impl_.chunk_id_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChunkInfo::CopyFrom(const ChunkInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.ChunkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ChunkInfo::InternalSwap(ChunkInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChunkInfo, _impl_.chunk_id_)
      + sizeof(ChunkInfo::_impl_.chunk_id_)
      - PROTOBUF_FIELD_OFFSET(ChunkInfo, _impl_.stream_id_)>(
          reinterpret_cast<char*>(&_impl_.stream_id_),
          reinterpret_cast<char*>(&other->_impl_.stream_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChunkInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_brpc_2foptions_2eproto_getter, &descriptor_table_brpc_2foptions_2eproto_once,
      file_level_metadata_brpc_2foptions_2eproto[0]);
}
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::ServiceOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int64_t >, 3, false>
  service_timeout(kServiceTimeoutFieldNumber, int64_t{10000}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MethodOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::brpc::TalkType, ::brpc::TalkType_IsValid>, 14, false>
  request_talk_type(kRequestTalkTypeFieldNumber, static_cast< ::brpc::TalkType >(0), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MethodOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::brpc::TalkType, ::brpc::TalkType_IsValid>, 14, false>
  response_talk_type(kResponseTalkTypeFieldNumber, static_cast< ::brpc::TalkType >(0), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MethodOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int64_t >, 3, false>
  method_timeout(kMethodTimeoutFieldNumber, int64_t{0}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MethodOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::brpc::CompressType, ::brpc::CompressType_IsValid>, 14, false>
  request_compression(kRequestCompressionFieldNumber, static_cast< ::brpc::CompressType >(0), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MethodOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::brpc::CompressType, ::brpc::CompressType_IsValid>, 14, false>
  response_compression(kResponseCompressionFieldNumber, static_cast< ::brpc::CompressType >(0), nullptr);

// @@protoc_insertion_point(namespace_scope)
}  // namespace brpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::brpc::ChunkInfo*
Arena::CreateMaybeMessage< ::brpc::ChunkInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::brpc::ChunkInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
