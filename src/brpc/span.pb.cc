// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/span.proto

#include "brpc/span.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace brpc {
PROTOBUF_CONSTEXPR RpczSpan::RpczSpan(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.client_spans_)*/{}
  , /*decltype(_impl_.info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.full_method_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.trace_id_)*/uint64_t{0u}
  , /*decltype(_impl_.span_id_)*/uint64_t{0u}
  , /*decltype(_impl_.parent_span_id_)*/uint64_t{0u}
  , /*decltype(_impl_.log_id_)*/uint64_t{0u}
  , /*decltype(_impl_.base_cid_)*/uint64_t{0u}
  , /*decltype(_impl_.ending_cid_)*/uint64_t{0u}
  , /*decltype(_impl_.remote_ip_)*/0u
  , /*decltype(_impl_.remote_port_)*/0u
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.async_)*/false
  , /*decltype(_impl_.protocol_)*/0
  , /*decltype(_impl_.error_code_)*/0
  , /*decltype(_impl_.request_size_)*/0
  , /*decltype(_impl_.response_size_)*/0
  , /*decltype(_impl_.received_real_us_)*/int64_t{0}
  , /*decltype(_impl_.start_parse_real_us_)*/int64_t{0}
  , /*decltype(_impl_.start_callback_real_us_)*/int64_t{0}
  , /*decltype(_impl_.start_send_real_us_)*/int64_t{0}
  , /*decltype(_impl_.sent_real_us_)*/int64_t{0}} {}
struct RpczSpanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpczSpanDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpczSpanDefaultTypeInternal() {}
  union {
    RpczSpan _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpczSpanDefaultTypeInternal _RpczSpan_default_instance_;
PROTOBUF_CONSTEXPR BriefSpan::BriefSpan(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.full_method_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.trace_id_)*/uint64_t{0u}
  , /*decltype(_impl_.span_id_)*/uint64_t{0u}
  , /*decltype(_impl_.log_id_)*/uint64_t{0u}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.error_code_)*/0
  , /*decltype(_impl_.request_size_)*/0
  , /*decltype(_impl_.response_size_)*/0
  , /*decltype(_impl_.start_real_us_)*/int64_t{0}
  , /*decltype(_impl_.latency_us_)*/int64_t{0}} {}
struct BriefSpanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BriefSpanDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BriefSpanDefaultTypeInternal() {}
  union {
    BriefSpan _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BriefSpanDefaultTypeInternal _BriefSpan_default_instance_;
PROTOBUF_CONSTEXPR SpanAnnotation::SpanAnnotation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.realtime_us_)*/int64_t{0}} {}
struct SpanAnnotationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpanAnnotationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpanAnnotationDefaultTypeInternal() {}
  union {
    SpanAnnotation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpanAnnotationDefaultTypeInternal _SpanAnnotation_default_instance_;
PROTOBUF_CONSTEXPR TracingSpan::TracingSpan(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.annotations_)*/{}
  , /*decltype(_impl_.client_spans_)*/{}
  , /*decltype(_impl_.span_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.trace_id_)*/uint64_t{0u}
  , /*decltype(_impl_.span_id_)*/uint64_t{0u}
  , /*decltype(_impl_.parent_span_id_)*/uint64_t{0u}
  , /*decltype(_impl_.log_id_)*/uint64_t{0u}
  , /*decltype(_impl_.remote_ip_)*/0u
  , /*decltype(_impl_.remote_port_)*/0u
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.protocol_)*/0
  , /*decltype(_impl_.error_code_)*/0
  , /*decltype(_impl_.request_size_)*/0
  , /*decltype(_impl_.received_real_us_)*/int64_t{0}
  , /*decltype(_impl_.start_parse_real_us_)*/int64_t{0}
  , /*decltype(_impl_.start_callback_real_us_)*/int64_t{0}
  , /*decltype(_impl_.start_send_real_us_)*/int64_t{0}
  , /*decltype(_impl_.sent_real_us_)*/int64_t{0}
  , /*decltype(_impl_.response_size_)*/0} {}
struct TracingSpanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TracingSpanDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TracingSpanDefaultTypeInternal() {}
  union {
    TracingSpan _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TracingSpanDefaultTypeInternal _TracingSpan_default_instance_;
}  // namespace brpc
static ::_pb::Metadata file_level_metadata_brpc_2fspan_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_brpc_2fspan_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_brpc_2fspan_2eproto = nullptr;

const uint32_t TableStruct_brpc_2fspan_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::brpc::RpczSpan, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::brpc::RpczSpan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::brpc::RpczSpan, _impl_.trace_id_),
  PROTOBUF_FIELD_OFFSET(::brpc::RpczSpan, _impl_.span_id_),
  PROTOBUF_FIELD_OFFSET(::brpc::RpczSpan, _impl_.parent_span_id_),
  PROTOBUF_FIELD_OFFSET(::brpc::RpczSpan, _impl_.log_id_),
  PROTOBUF_FIELD_OFFSET(::brpc::RpczSpan, _impl_.base_cid_),
  PROTOBUF_FIELD_OFFSET(::brpc::RpczSpan, _impl_.ending_cid_),
  PROTOBUF_FIELD_OFFSET(::brpc::RpczSpan, _impl_.remote_ip_),
  PROTOBUF_FIELD_OFFSET(::brpc::RpczSpan, _impl_.remote_port_),
  PROTOBUF_FIELD_OFFSET(::brpc::RpczSpan, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::brpc::RpczSpan, _impl_.async_),
  PROTOBUF_FIELD_OFFSET(::brpc::RpczSpan, _impl_.protocol_),
  PROTOBUF_FIELD_OFFSET(::brpc::RpczSpan, _impl_.error_code_),
  PROTOBUF_FIELD_OFFSET(::brpc::RpczSpan, _impl_.request_size_),
  PROTOBUF_FIELD_OFFSET(::brpc::RpczSpan, _impl_.response_size_),
  PROTOBUF_FIELD_OFFSET(::brpc::RpczSpan, _impl_.received_real_us_),
  PROTOBUF_FIELD_OFFSET(::brpc::RpczSpan, _impl_.start_parse_real_us_),
  PROTOBUF_FIELD_OFFSET(::brpc::RpczSpan, _impl_.start_callback_real_us_),
  PROTOBUF_FIELD_OFFSET(::brpc::RpczSpan, _impl_.start_send_real_us_),
  PROTOBUF_FIELD_OFFSET(::brpc::RpczSpan, _impl_.sent_real_us_),
  PROTOBUF_FIELD_OFFSET(::brpc::RpczSpan, _impl_.info_),
  PROTOBUF_FIELD_OFFSET(::brpc::RpczSpan, _impl_.client_spans_),
  PROTOBUF_FIELD_OFFSET(::brpc::RpczSpan, _impl_.full_method_name_),
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::brpc::BriefSpan, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::brpc::BriefSpan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::brpc::BriefSpan, _impl_.trace_id_),
  PROTOBUF_FIELD_OFFSET(::brpc::BriefSpan, _impl_.span_id_),
  PROTOBUF_FIELD_OFFSET(::brpc::BriefSpan, _impl_.log_id_),
  PROTOBUF_FIELD_OFFSET(::brpc::BriefSpan, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::brpc::BriefSpan, _impl_.error_code_),
  PROTOBUF_FIELD_OFFSET(::brpc::BriefSpan, _impl_.request_size_),
  PROTOBUF_FIELD_OFFSET(::brpc::BriefSpan, _impl_.response_size_),
  PROTOBUF_FIELD_OFFSET(::brpc::BriefSpan, _impl_.start_real_us_),
  PROTOBUF_FIELD_OFFSET(::brpc::BriefSpan, _impl_.latency_us_),
  PROTOBUF_FIELD_OFFSET(::brpc::BriefSpan, _impl_.full_method_name_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  0,
  PROTOBUF_FIELD_OFFSET(::brpc::SpanAnnotation, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::brpc::SpanAnnotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::brpc::SpanAnnotation, _impl_.realtime_us_),
  PROTOBUF_FIELD_OFFSET(::brpc::SpanAnnotation, _impl_.content_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::brpc::TracingSpan, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::brpc::TracingSpan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::brpc::TracingSpan, _impl_.trace_id_),
  PROTOBUF_FIELD_OFFSET(::brpc::TracingSpan, _impl_.span_id_),
  PROTOBUF_FIELD_OFFSET(::brpc::TracingSpan, _impl_.parent_span_id_),
  PROTOBUF_FIELD_OFFSET(::brpc::TracingSpan, _impl_.log_id_),
  PROTOBUF_FIELD_OFFSET(::brpc::TracingSpan, _impl_.remote_ip_),
  PROTOBUF_FIELD_OFFSET(::brpc::TracingSpan, _impl_.remote_port_),
  PROTOBUF_FIELD_OFFSET(::brpc::TracingSpan, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::brpc::TracingSpan, _impl_.protocol_),
  PROTOBUF_FIELD_OFFSET(::brpc::TracingSpan, _impl_.error_code_),
  PROTOBUF_FIELD_OFFSET(::brpc::TracingSpan, _impl_.request_size_),
  PROTOBUF_FIELD_OFFSET(::brpc::TracingSpan, _impl_.response_size_),
  PROTOBUF_FIELD_OFFSET(::brpc::TracingSpan, _impl_.received_real_us_),
  PROTOBUF_FIELD_OFFSET(::brpc::TracingSpan, _impl_.start_parse_real_us_),
  PROTOBUF_FIELD_OFFSET(::brpc::TracingSpan, _impl_.start_callback_real_us_),
  PROTOBUF_FIELD_OFFSET(::brpc::TracingSpan, _impl_.start_send_real_us_),
  PROTOBUF_FIELD_OFFSET(::brpc::TracingSpan, _impl_.sent_real_us_),
  PROTOBUF_FIELD_OFFSET(::brpc::TracingSpan, _impl_.span_name_),
  PROTOBUF_FIELD_OFFSET(::brpc::TracingSpan, _impl_.annotations_),
  PROTOBUF_FIELD_OFFSET(::brpc::TracingSpan, _impl_.client_spans_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  16,
  11,
  12,
  13,
  14,
  15,
  0,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 28, -1, sizeof(::brpc::RpczSpan)},
  { 50, 66, -1, sizeof(::brpc::BriefSpan)},
  { 76, 84, -1, sizeof(::brpc::SpanAnnotation)},
  { 86, 111, -1, sizeof(::brpc::TracingSpan)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::brpc::_RpczSpan_default_instance_._instance,
  &::brpc::_BriefSpan_default_instance_._instance,
  &::brpc::_SpanAnnotation_default_instance_._instance,
  &::brpc::_TracingSpan_default_instance_._instance,
};

const char descriptor_table_protodef_brpc_2fspan_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017brpc/span.proto\022\004brpc\032\022brpc/options.pr"
  "oto\"\216\004\n\010RpczSpan\022\020\n\010trace_id\030\001 \002(\004\022\017\n\007sp"
  "an_id\030\002 \002(\004\022\026\n\016parent_span_id\030\003 \002(\004\022\016\n\006l"
  "og_id\030\004 \001(\004\022\020\n\010base_cid\030\005 \001(\004\022\022\n\nending_"
  "cid\030\006 \001(\004\022\021\n\tremote_ip\030\007 \001(\r\022\023\n\013remote_p"
  "ort\030\010 \001(\r\022\034\n\004type\030\t \001(\0162\016.brpc.SpanType\022"
  "\r\n\005async\030\n \001(\010\022$\n\010protocol\030\013 \001(\0162\022.brpc."
  "ProtocolType\022\022\n\nerror_code\030\014 \001(\005\022\024\n\014requ"
  "est_size\030\r \001(\005\022\025\n\rresponse_size\030\016 \001(\005\022\030\n"
  "\020received_real_us\030\017 \001(\003\022\033\n\023start_parse_r"
  "eal_us\030\020 \001(\003\022\036\n\026start_callback_real_us\030\021"
  " \001(\003\022\032\n\022start_send_real_us\030\022 \001(\003\022\024\n\014sent"
  "_real_us\030\023 \001(\003\022\014\n\004info\030\024 \001(\014\022$\n\014client_s"
  "pans\030\025 \003(\0132\016.brpc.RpczSpan\022\030\n\020full_metho"
  "d_name\030\026 \001(\014\"\342\001\n\tBriefSpan\022\020\n\010trace_id\030\001"
  " \002(\004\022\017\n\007span_id\030\002 \002(\004\022\016\n\006log_id\030\003 \001(\004\022\034\n"
  "\004type\030\004 \001(\0162\016.brpc.SpanType\022\022\n\nerror_cod"
  "e\030\005 \001(\005\022\024\n\014request_size\030\006 \001(\005\022\025\n\rrespons"
  "e_size\030\007 \001(\005\022\025\n\rstart_real_us\030\010 \001(\003\022\022\n\nl"
  "atency_us\030\t \001(\003\022\030\n\020full_method_name\030\n \001("
  "\014\"6\n\016SpanAnnotation\022\023\n\013realtime_us\030\001 \002(\003"
  "\022\017\n\007content\030\002 \002(\t\"\365\003\n\013TracingSpan\022\020\n\010tra"
  "ce_id\030\001 \002(\004\022\017\n\007span_id\030\002 \002(\004\022\026\n\016parent_s"
  "pan_id\030\003 \002(\004\022\016\n\006log_id\030\004 \001(\004\022\021\n\tremote_i"
  "p\030\005 \001(\r\022\023\n\013remote_port\030\006 \001(\r\022\034\n\004type\030\007 \001"
  "(\0162\016.brpc.SpanType\022$\n\010protocol\030\010 \001(\0162\022.b"
  "rpc.ProtocolType\022\022\n\nerror_code\030\t \001(\005\022\024\n\014"
  "request_size\030\n \001(\005\022\025\n\rresponse_size\030\013 \001("
  "\005\022\030\n\020received_real_us\030\014 \001(\003\022\033\n\023start_par"
  "se_real_us\030\r \001(\003\022\036\n\026start_callback_real_"
  "us\030\016 \001(\003\022\032\n\022start_send_real_us\030\017 \001(\003\022\024\n\014"
  "sent_real_us\030\020 \001(\003\022\021\n\tspan_name\030\021 \001(\t\022)\n"
  "\013annotations\030\022 \003(\0132\024.brpc.SpanAnnotation"
  "\022\'\n\014client_spans\030\023 \003(\0132\021.brpc.TracingSpa"
  "n*6\n\010SpanType\022\024\n\020SPAN_TYPE_SERVER\020\000\022\024\n\020S"
  "PAN_TYPE_CLIENT\020\001B\020\n\010com.brpcB\004Span"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_brpc_2fspan_2eproto_deps[1] = {
  &::descriptor_table_brpc_2foptions_2eproto,
};
static ::_pbi::once_flag descriptor_table_brpc_2fspan_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_brpc_2fspan_2eproto = {
    false, false, 1435, descriptor_table_protodef_brpc_2fspan_2eproto,
    "brpc/span.proto",
    &descriptor_table_brpc_2fspan_2eproto_once, descriptor_table_brpc_2fspan_2eproto_deps, 1, 4,
    schemas, file_default_instances, TableStruct_brpc_2fspan_2eproto::offsets,
    file_level_metadata_brpc_2fspan_2eproto, file_level_enum_descriptors_brpc_2fspan_2eproto,
    file_level_service_descriptors_brpc_2fspan_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_brpc_2fspan_2eproto_getter() {
  return &descriptor_table_brpc_2fspan_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_brpc_2fspan_2eproto(&descriptor_table_brpc_2fspan_2eproto);
namespace brpc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpanType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_brpc_2fspan_2eproto);
  return file_level_enum_descriptors_brpc_2fspan_2eproto[0];
}
bool SpanType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RpczSpan::_Internal {
 public:
  using HasBits = decltype(std::declval<RpczSpan>()._impl_._has_bits_);
  static void set_has_trace_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_span_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_parent_span_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_log_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_base_cid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ending_cid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_remote_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_remote_port(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_async(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_protocol(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_request_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_response_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_received_real_us(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_start_parse_real_us(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_start_callback_real_us(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_start_send_real_us(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_sent_real_us(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_full_method_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001c) ^ 0x0000001c) != 0;
  }
};

RpczSpan::RpczSpan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:brpc.RpczSpan)
}
RpczSpan::RpczSpan(const RpczSpan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.client_spans_){from._impl_.client_spans_}
    , decltype(_impl_.info_){}
    , decltype(_impl_.full_method_name_){}
    , decltype(_impl_.trace_id_){}
    , decltype(_impl_.span_id_){}
    , decltype(_impl_.parent_span_id_){}
    , decltype(_impl_.log_id_){}
    , decltype(_impl_.base_cid_){}
    , decltype(_impl_.ending_cid_){}
    , decltype(_impl_.remote_ip_){}
    , decltype(_impl_.remote_port_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.async_){}
    , decltype(_impl_.protocol_){}
    , decltype(_impl_.error_code_){}
    , decltype(_impl_.request_size_){}
    , decltype(_impl_.response_size_){}
    , decltype(_impl_.received_real_us_){}
    , decltype(_impl_.start_parse_real_us_){}
    , decltype(_impl_.start_callback_real_us_){}
    , decltype(_impl_.start_send_real_us_){}
    , decltype(_impl_.sent_real_us_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_info()) {
    _impl_.info_.Set(from._internal_info(), 
      GetArenaForAllocation());
  }
  _impl_.full_method_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.full_method_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_full_method_name()) {
    _impl_.full_method_name_.Set(from._internal_full_method_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.trace_id_, &from._impl_.trace_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sent_real_us_) -
    reinterpret_cast<char*>(&_impl_.trace_id_)) + sizeof(_impl_.sent_real_us_));
  // @@protoc_insertion_point(copy_constructor:brpc.RpczSpan)
}

inline void RpczSpan::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.client_spans_){arena}
    , decltype(_impl_.info_){}
    , decltype(_impl_.full_method_name_){}
    , decltype(_impl_.trace_id_){uint64_t{0u}}
    , decltype(_impl_.span_id_){uint64_t{0u}}
    , decltype(_impl_.parent_span_id_){uint64_t{0u}}
    , decltype(_impl_.log_id_){uint64_t{0u}}
    , decltype(_impl_.base_cid_){uint64_t{0u}}
    , decltype(_impl_.ending_cid_){uint64_t{0u}}
    , decltype(_impl_.remote_ip_){0u}
    , decltype(_impl_.remote_port_){0u}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.async_){false}
    , decltype(_impl_.protocol_){0}
    , decltype(_impl_.error_code_){0}
    , decltype(_impl_.request_size_){0}
    , decltype(_impl_.response_size_){0}
    , decltype(_impl_.received_real_us_){int64_t{0}}
    , decltype(_impl_.start_parse_real_us_){int64_t{0}}
    , decltype(_impl_.start_callback_real_us_){int64_t{0}}
    , decltype(_impl_.start_send_real_us_){int64_t{0}}
    , decltype(_impl_.sent_real_us_){int64_t{0}}
  };
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.full_method_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.full_method_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RpczSpan::~RpczSpan() {
  // @@protoc_insertion_point(destructor:brpc.RpczSpan)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RpczSpan::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.client_spans_.~RepeatedPtrField();
  _impl_.info_.Destroy();
  _impl_.full_method_name_.Destroy();
}

void RpczSpan::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RpczSpan::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.RpczSpan)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_spans_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.info_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.full_method_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.trace_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ending_cid_) -
        reinterpret_cast<char*>(&_impl_.trace_id_)) + sizeof(_impl_.ending_cid_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.remote_ip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.response_size_) -
        reinterpret_cast<char*>(&_impl_.remote_ip_)) + sizeof(_impl_.response_size_));
  }
  if (cached_has_bits & 0x001f0000u) {
    ::memset(&_impl_.received_real_us_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.sent_real_us_) -
        reinterpret_cast<char*>(&_impl_.received_real_us_)) + sizeof(_impl_.sent_real_us_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RpczSpan::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 trace_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_trace_id(&has_bits);
          _impl_.trace_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 span_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_span_id(&has_bits);
          _impl_.span_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 parent_span_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_parent_span_id(&has_bits);
          _impl_.parent_span_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 log_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_log_id(&has_bits);
          _impl_.log_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 base_cid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_base_cid(&has_bits);
          _impl_.base_cid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 ending_cid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_ending_cid(&has_bits);
          _impl_.ending_cid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 remote_ip = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_remote_ip(&has_bits);
          _impl_.remote_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 remote_port = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_remote_port(&has_bits);
          _impl_.remote_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .brpc.SpanType type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::brpc::SpanType_IsValid(val))) {
            _internal_set_type(static_cast<::brpc::SpanType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool async = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_async(&has_bits);
          _impl_.async_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .brpc.ProtocolType protocol = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::brpc::ProtocolType_IsValid(val))) {
            _internal_set_protocol(static_cast<::brpc::ProtocolType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 error_code = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_error_code(&has_bits);
          _impl_.error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 request_size = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_request_size(&has_bits);
          _impl_.request_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 response_size = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_response_size(&has_bits);
          _impl_.response_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 received_real_us = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_received_real_us(&has_bits);
          _impl_.received_real_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 start_parse_real_us = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_start_parse_real_us(&has_bits);
          _impl_.start_parse_real_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 start_callback_real_us = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_start_callback_real_us(&has_bits);
          _impl_.start_callback_real_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 start_send_real_us = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_start_send_real_us(&has_bits);
          _impl_.start_send_real_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 sent_real_us = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_sent_real_us(&has_bits);
          _impl_.sent_real_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes info = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .brpc.RpczSpan client_spans = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_client_spans(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes full_method_name = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_full_method_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RpczSpan::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.RpczSpan)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 trace_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_trace_id(), target);
  }

  // required uint64 span_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_span_id(), target);
  }

  // required uint64 parent_span_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_parent_span_id(), target);
  }

  // optional uint64 log_id = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_log_id(), target);
  }

  // optional uint64 base_cid = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_base_cid(), target);
  }

  // optional uint64 ending_cid = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_ending_cid(), target);
  }

  // optional uint32 remote_ip = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_remote_ip(), target);
  }

  // optional uint32 remote_port = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_remote_port(), target);
  }

  // optional .brpc.SpanType type = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_type(), target);
  }

  // optional bool async = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_async(), target);
  }

  // optional .brpc.ProtocolType protocol = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_protocol(), target);
  }

  // optional int32 error_code = 12;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_error_code(), target);
  }

  // optional int32 request_size = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_request_size(), target);
  }

  // optional int32 response_size = 14;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_response_size(), target);
  }

  // optional int64 received_real_us = 15;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_received_real_us(), target);
  }

  // optional int64 start_parse_real_us = 16;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(16, this->_internal_start_parse_real_us(), target);
  }

  // optional int64 start_callback_real_us = 17;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(17, this->_internal_start_callback_real_us(), target);
  }

  // optional int64 start_send_real_us = 18;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(18, this->_internal_start_send_real_us(), target);
  }

  // optional int64 sent_real_us = 19;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(19, this->_internal_sent_real_us(), target);
  }

  // optional bytes info = 20;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_info(), target);
  }

  // repeated .brpc.RpczSpan client_spans = 21;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_client_spans_size()); i < n; i++) {
    const auto& repfield = this->_internal_client_spans(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(21, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bytes full_method_name = 22;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        22, this->_internal_full_method_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.RpczSpan)
  return target;
}

size_t RpczSpan::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:brpc.RpczSpan)
  size_t total_size = 0;

  if (_internal_has_trace_id()) {
    // required uint64 trace_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_trace_id());
  }

  if (_internal_has_span_id()) {
    // required uint64 span_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_span_id());
  }

  if (_internal_has_parent_span_id()) {
    // required uint64 parent_span_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_parent_span_id());
  }

  return total_size;
}
size_t RpczSpan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.RpczSpan)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001c) ^ 0x0000001c) == 0) {  // All required fields are present.
    // required uint64 trace_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_trace_id());

    // required uint64 span_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_span_id());

    // required uint64 parent_span_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_parent_span_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .brpc.RpczSpan client_spans = 21;
  total_size += 2UL * this->_internal_client_spans_size();
  for (const auto& msg : this->_impl_.client_spans_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes info = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_info());
    }

    // optional bytes full_method_name = 22;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_full_method_name());
    }

  }
  if (cached_has_bits & 0x000000e0u) {
    // optional uint64 log_id = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_log_id());
    }

    // optional uint64 base_cid = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_base_cid());
    }

    // optional uint64 ending_cid = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ending_cid());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 remote_ip = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_remote_ip());
    }

    // optional uint32 remote_port = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_remote_port());
    }

    // optional .brpc.SpanType type = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional bool async = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional .brpc.ProtocolType protocol = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_protocol());
    }

    // optional int32 error_code = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_error_code());
    }

    // optional int32 request_size = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_request_size());
    }

    // optional int32 response_size = 14;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_response_size());
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional int64 received_real_us = 15;
    if (cached_has_bits & 0x00010000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_received_real_us());
    }

    // optional int64 start_parse_real_us = 16;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_start_parse_real_us());
    }

    // optional int64 start_callback_real_us = 17;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_start_callback_real_us());
    }

    // optional int64 start_send_real_us = 18;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_start_send_real_us());
    }

    // optional int64 sent_real_us = 19;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_sent_real_us());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RpczSpan::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RpczSpan::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RpczSpan::GetClassData() const { return &_class_data_; }

void RpczSpan::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RpczSpan *>(to)->MergeFrom(
      static_cast<const RpczSpan &>(from));
}


void RpczSpan::MergeFrom(const RpczSpan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.RpczSpan)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.client_spans_.MergeFrom(from._impl_.client_spans_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_info(from._internal_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_full_method_name(from._internal_full_method_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.trace_id_ = from._impl_.trace_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.span_id_ = from._impl_.span_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.parent_span_id_ = from._impl_.parent_span_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.log_id_ = from._impl_.log_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.base_cid_ = from._impl_.base_cid_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.ending_cid_ = from._impl_.ending_cid_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.remote_ip_ = from._impl_.remote_ip_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.remote_port_ = from._impl_.remote_port_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.async_ = from._impl_.async_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.protocol_ = from._impl_.protocol_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.error_code_ = from._impl_.error_code_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.request_size_ = from._impl_.request_size_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.response_size_ = from._impl_.response_size_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.received_real_us_ = from._impl_.received_real_us_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.start_parse_real_us_ = from._impl_.start_parse_real_us_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.start_callback_real_us_ = from._impl_.start_callback_real_us_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.start_send_real_us_ = from._impl_.start_send_real_us_;
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.sent_real_us_ = from._impl_.sent_real_us_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RpczSpan::CopyFrom(const RpczSpan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.RpczSpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpczSpan::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.client_spans_))
    return false;
  return true;
}

void RpczSpan::InternalSwap(RpczSpan* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.client_spans_.InternalSwap(&other->_impl_.client_spans_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.info_, lhs_arena,
      &other->_impl_.info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.full_method_name_, lhs_arena,
      &other->_impl_.full_method_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RpczSpan, _impl_.sent_real_us_)
      + sizeof(RpczSpan::_impl_.sent_real_us_)
      - PROTOBUF_FIELD_OFFSET(RpczSpan, _impl_.trace_id_)>(
          reinterpret_cast<char*>(&_impl_.trace_id_),
          reinterpret_cast<char*>(&other->_impl_.trace_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RpczSpan::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_brpc_2fspan_2eproto_getter, &descriptor_table_brpc_2fspan_2eproto_once,
      file_level_metadata_brpc_2fspan_2eproto[0]);
}

// ===================================================================

class BriefSpan::_Internal {
 public:
  using HasBits = decltype(std::declval<BriefSpan>()._impl_._has_bits_);
  static void set_has_trace_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_span_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_log_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_request_size(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_response_size(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_start_real_us(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_latency_us(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_full_method_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

BriefSpan::BriefSpan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:brpc.BriefSpan)
}
BriefSpan::BriefSpan(const BriefSpan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.full_method_name_){}
    , decltype(_impl_.trace_id_){}
    , decltype(_impl_.span_id_){}
    , decltype(_impl_.log_id_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.error_code_){}
    , decltype(_impl_.request_size_){}
    , decltype(_impl_.response_size_){}
    , decltype(_impl_.start_real_us_){}
    , decltype(_impl_.latency_us_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.full_method_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.full_method_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_full_method_name()) {
    _impl_.full_method_name_.Set(from._internal_full_method_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.trace_id_, &from._impl_.trace_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.latency_us_) -
    reinterpret_cast<char*>(&_impl_.trace_id_)) + sizeof(_impl_.latency_us_));
  // @@protoc_insertion_point(copy_constructor:brpc.BriefSpan)
}

inline void BriefSpan::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.full_method_name_){}
    , decltype(_impl_.trace_id_){uint64_t{0u}}
    , decltype(_impl_.span_id_){uint64_t{0u}}
    , decltype(_impl_.log_id_){uint64_t{0u}}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.error_code_){0}
    , decltype(_impl_.request_size_){0}
    , decltype(_impl_.response_size_){0}
    , decltype(_impl_.start_real_us_){int64_t{0}}
    , decltype(_impl_.latency_us_){int64_t{0}}
  };
  _impl_.full_method_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.full_method_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BriefSpan::~BriefSpan() {
  // @@protoc_insertion_point(destructor:brpc.BriefSpan)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BriefSpan::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.full_method_name_.Destroy();
}

void BriefSpan::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BriefSpan::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.BriefSpan)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.full_method_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.trace_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.response_size_) -
        reinterpret_cast<char*>(&_impl_.trace_id_)) + sizeof(_impl_.response_size_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.start_real_us_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.latency_us_) -
        reinterpret_cast<char*>(&_impl_.start_real_us_)) + sizeof(_impl_.latency_us_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BriefSpan::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 trace_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_trace_id(&has_bits);
          _impl_.trace_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 span_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_span_id(&has_bits);
          _impl_.span_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 log_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_log_id(&has_bits);
          _impl_.log_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .brpc.SpanType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::brpc::SpanType_IsValid(val))) {
            _internal_set_type(static_cast<::brpc::SpanType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 error_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_error_code(&has_bits);
          _impl_.error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 request_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_request_size(&has_bits);
          _impl_.request_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 response_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_response_size(&has_bits);
          _impl_.response_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 start_real_us = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_start_real_us(&has_bits);
          _impl_.start_real_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 latency_us = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_latency_us(&has_bits);
          _impl_.latency_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes full_method_name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_full_method_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BriefSpan::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.BriefSpan)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 trace_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_trace_id(), target);
  }

  // required uint64 span_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_span_id(), target);
  }

  // optional uint64 log_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_log_id(), target);
  }

  // optional .brpc.SpanType type = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // optional int32 error_code = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_error_code(), target);
  }

  // optional int32 request_size = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_request_size(), target);
  }

  // optional int32 response_size = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_response_size(), target);
  }

  // optional int64 start_real_us = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_start_real_us(), target);
  }

  // optional int64 latency_us = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_latency_us(), target);
  }

  // optional bytes full_method_name = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_full_method_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.BriefSpan)
  return target;
}

size_t BriefSpan::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:brpc.BriefSpan)
  size_t total_size = 0;

  if (_internal_has_trace_id()) {
    // required uint64 trace_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_trace_id());
  }

  if (_internal_has_span_id()) {
    // required uint64 span_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_span_id());
  }

  return total_size;
}
size_t BriefSpan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.BriefSpan)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint64 trace_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_trace_id());

    // required uint64 span_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_span_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes full_method_name = 10;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_full_method_name());
  }

  if (cached_has_bits & 0x000000f8u) {
    // optional uint64 log_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_log_id());
    }

    // optional .brpc.SpanType type = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional int32 error_code = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_error_code());
    }

    // optional int32 request_size = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_request_size());
    }

    // optional int32 response_size = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_response_size());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int64 start_real_us = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_start_real_us());
    }

    // optional int64 latency_us = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_latency_us());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BriefSpan::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BriefSpan::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BriefSpan::GetClassData() const { return &_class_data_; }

void BriefSpan::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BriefSpan *>(to)->MergeFrom(
      static_cast<const BriefSpan &>(from));
}


void BriefSpan::MergeFrom(const BriefSpan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.BriefSpan)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_full_method_name(from._internal_full_method_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.trace_id_ = from._impl_.trace_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.span_id_ = from._impl_.span_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.log_id_ = from._impl_.log_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.error_code_ = from._impl_.error_code_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.request_size_ = from._impl_.request_size_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.response_size_ = from._impl_.response_size_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.start_real_us_ = from._impl_.start_real_us_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.latency_us_ = from._impl_.latency_us_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BriefSpan::CopyFrom(const BriefSpan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.BriefSpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BriefSpan::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void BriefSpan::InternalSwap(BriefSpan* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.full_method_name_, lhs_arena,
      &other->_impl_.full_method_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BriefSpan, _impl_.latency_us_)
      + sizeof(BriefSpan::_impl_.latency_us_)
      - PROTOBUF_FIELD_OFFSET(BriefSpan, _impl_.trace_id_)>(
          reinterpret_cast<char*>(&_impl_.trace_id_),
          reinterpret_cast<char*>(&other->_impl_.trace_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BriefSpan::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_brpc_2fspan_2eproto_getter, &descriptor_table_brpc_2fspan_2eproto_once,
      file_level_metadata_brpc_2fspan_2eproto[1]);
}

// ===================================================================

class SpanAnnotation::_Internal {
 public:
  using HasBits = decltype(std::declval<SpanAnnotation>()._impl_._has_bits_);
  static void set_has_realtime_us(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_content(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SpanAnnotation::SpanAnnotation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:brpc.SpanAnnotation)
}
SpanAnnotation::SpanAnnotation(const SpanAnnotation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.content_){}
    , decltype(_impl_.realtime_us_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_content()) {
    _impl_.content_.Set(from._internal_content(), 
      GetArenaForAllocation());
  }
  _impl_.realtime_us_ = from._impl_.realtime_us_;
  // @@protoc_insertion_point(copy_constructor:brpc.SpanAnnotation)
}

inline void SpanAnnotation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.content_){}
    , decltype(_impl_.realtime_us_){int64_t{0}}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SpanAnnotation::~SpanAnnotation() {
  // @@protoc_insertion_point(destructor:brpc.SpanAnnotation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpanAnnotation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
}

void SpanAnnotation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpanAnnotation::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.SpanAnnotation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.content_.ClearNonDefaultToEmpty();
  }
  _impl_.realtime_us_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpanAnnotation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 realtime_us = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_realtime_us(&has_bits);
          _impl_.realtime_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "brpc.SpanAnnotation.content");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpanAnnotation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.SpanAnnotation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 realtime_us = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_realtime_us(), target);
  }

  // required string content = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "brpc.SpanAnnotation.content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.SpanAnnotation)
  return target;
}

size_t SpanAnnotation::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:brpc.SpanAnnotation)
  size_t total_size = 0;

  if (_internal_has_content()) {
    // required string content = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  if (_internal_has_realtime_us()) {
    // required int64 realtime_us = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_realtime_us());
  }

  return total_size;
}
size_t SpanAnnotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.SpanAnnotation)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string content = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());

    // required int64 realtime_us = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_realtime_us());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpanAnnotation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpanAnnotation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpanAnnotation::GetClassData() const { return &_class_data_; }

void SpanAnnotation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SpanAnnotation *>(to)->MergeFrom(
      static_cast<const SpanAnnotation &>(from));
}


void SpanAnnotation::MergeFrom(const SpanAnnotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.SpanAnnotation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_content(from._internal_content());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.realtime_us_ = from._impl_.realtime_us_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpanAnnotation::CopyFrom(const SpanAnnotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.SpanAnnotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpanAnnotation::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SpanAnnotation::InternalSwap(SpanAnnotation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  swap(_impl_.realtime_us_, other->_impl_.realtime_us_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpanAnnotation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_brpc_2fspan_2eproto_getter, &descriptor_table_brpc_2fspan_2eproto_once,
      file_level_metadata_brpc_2fspan_2eproto[2]);
}

// ===================================================================

class TracingSpan::_Internal {
 public:
  using HasBits = decltype(std::declval<TracingSpan>()._impl_._has_bits_);
  static void set_has_trace_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_span_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_parent_span_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_log_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_remote_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_remote_port(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_protocol(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_request_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_response_size(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_received_real_us(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_start_parse_real_us(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_start_callback_real_us(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_start_send_real_us(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_sent_real_us(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_span_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000e) ^ 0x0000000e) != 0;
  }
};

TracingSpan::TracingSpan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:brpc.TracingSpan)
}
TracingSpan::TracingSpan(const TracingSpan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.annotations_){from._impl_.annotations_}
    , decltype(_impl_.client_spans_){from._impl_.client_spans_}
    , decltype(_impl_.span_name_){}
    , decltype(_impl_.trace_id_){}
    , decltype(_impl_.span_id_){}
    , decltype(_impl_.parent_span_id_){}
    , decltype(_impl_.log_id_){}
    , decltype(_impl_.remote_ip_){}
    , decltype(_impl_.remote_port_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.protocol_){}
    , decltype(_impl_.error_code_){}
    , decltype(_impl_.request_size_){}
    , decltype(_impl_.received_real_us_){}
    , decltype(_impl_.start_parse_real_us_){}
    , decltype(_impl_.start_callback_real_us_){}
    , decltype(_impl_.start_send_real_us_){}
    , decltype(_impl_.sent_real_us_){}
    , decltype(_impl_.response_size_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.span_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.span_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_span_name()) {
    _impl_.span_name_.Set(from._internal_span_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.trace_id_, &from._impl_.trace_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.response_size_) -
    reinterpret_cast<char*>(&_impl_.trace_id_)) + sizeof(_impl_.response_size_));
  // @@protoc_insertion_point(copy_constructor:brpc.TracingSpan)
}

inline void TracingSpan::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.annotations_){arena}
    , decltype(_impl_.client_spans_){arena}
    , decltype(_impl_.span_name_){}
    , decltype(_impl_.trace_id_){uint64_t{0u}}
    , decltype(_impl_.span_id_){uint64_t{0u}}
    , decltype(_impl_.parent_span_id_){uint64_t{0u}}
    , decltype(_impl_.log_id_){uint64_t{0u}}
    , decltype(_impl_.remote_ip_){0u}
    , decltype(_impl_.remote_port_){0u}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.protocol_){0}
    , decltype(_impl_.error_code_){0}
    , decltype(_impl_.request_size_){0}
    , decltype(_impl_.received_real_us_){int64_t{0}}
    , decltype(_impl_.start_parse_real_us_){int64_t{0}}
    , decltype(_impl_.start_callback_real_us_){int64_t{0}}
    , decltype(_impl_.start_send_real_us_){int64_t{0}}
    , decltype(_impl_.sent_real_us_){int64_t{0}}
    , decltype(_impl_.response_size_){0}
  };
  _impl_.span_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.span_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TracingSpan::~TracingSpan() {
  // @@protoc_insertion_point(destructor:brpc.TracingSpan)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TracingSpan::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.annotations_.~RepeatedPtrField();
  _impl_.client_spans_.~RepeatedPtrField();
  _impl_.span_name_.Destroy();
}

void TracingSpan::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TracingSpan::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.TracingSpan)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.annotations_.Clear();
  _impl_.client_spans_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.span_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.trace_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.trace_id_)) + sizeof(_impl_.type_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.protocol_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.sent_real_us_) -
        reinterpret_cast<char*>(&_impl_.protocol_)) + sizeof(_impl_.sent_real_us_));
  }
  _impl_.response_size_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TracingSpan::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 trace_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_trace_id(&has_bits);
          _impl_.trace_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 span_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_span_id(&has_bits);
          _impl_.span_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 parent_span_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_parent_span_id(&has_bits);
          _impl_.parent_span_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 log_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_log_id(&has_bits);
          _impl_.log_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 remote_ip = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_remote_ip(&has_bits);
          _impl_.remote_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 remote_port = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_remote_port(&has_bits);
          _impl_.remote_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .brpc.SpanType type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::brpc::SpanType_IsValid(val))) {
            _internal_set_type(static_cast<::brpc::SpanType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .brpc.ProtocolType protocol = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::brpc::ProtocolType_IsValid(val))) {
            _internal_set_protocol(static_cast<::brpc::ProtocolType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 error_code = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_error_code(&has_bits);
          _impl_.error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 request_size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_request_size(&has_bits);
          _impl_.request_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 response_size = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_response_size(&has_bits);
          _impl_.response_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 received_real_us = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_received_real_us(&has_bits);
          _impl_.received_real_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 start_parse_real_us = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_start_parse_real_us(&has_bits);
          _impl_.start_parse_real_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 start_callback_real_us = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_start_callback_real_us(&has_bits);
          _impl_.start_callback_real_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 start_send_real_us = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_start_send_real_us(&has_bits);
          _impl_.start_send_real_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 sent_real_us = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_sent_real_us(&has_bits);
          _impl_.sent_real_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string span_name = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_span_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "brpc.TracingSpan.span_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .brpc.SpanAnnotation annotations = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .brpc.TracingSpan client_spans = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_client_spans(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TracingSpan::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.TracingSpan)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 trace_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_trace_id(), target);
  }

  // required uint64 span_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_span_id(), target);
  }

  // required uint64 parent_span_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_parent_span_id(), target);
  }

  // optional uint64 log_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_log_id(), target);
  }

  // optional uint32 remote_ip = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_remote_ip(), target);
  }

  // optional uint32 remote_port = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_remote_port(), target);
  }

  // optional .brpc.SpanType type = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_type(), target);
  }

  // optional .brpc.ProtocolType protocol = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_protocol(), target);
  }

  // optional int32 error_code = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_error_code(), target);
  }

  // optional int32 request_size = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_request_size(), target);
  }

  // optional int32 response_size = 11;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_response_size(), target);
  }

  // optional int64 received_real_us = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_received_real_us(), target);
  }

  // optional int64 start_parse_real_us = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_start_parse_real_us(), target);
  }

  // optional int64 start_callback_real_us = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_start_callback_real_us(), target);
  }

  // optional int64 start_send_real_us = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_start_send_real_us(), target);
  }

  // optional int64 sent_real_us = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(16, this->_internal_sent_real_us(), target);
  }

  // optional string span_name = 17;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_span_name().data(), static_cast<int>(this->_internal_span_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "brpc.TracingSpan.span_name");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_span_name(), target);
  }

  // repeated .brpc.SpanAnnotation annotations = 18;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_annotations_size()); i < n; i++) {
    const auto& repfield = this->_internal_annotations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .brpc.TracingSpan client_spans = 19;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_client_spans_size()); i < n; i++) {
    const auto& repfield = this->_internal_client_spans(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.TracingSpan)
  return target;
}

size_t TracingSpan::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:brpc.TracingSpan)
  size_t total_size = 0;

  if (_internal_has_trace_id()) {
    // required uint64 trace_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_trace_id());
  }

  if (_internal_has_span_id()) {
    // required uint64 span_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_span_id());
  }

  if (_internal_has_parent_span_id()) {
    // required uint64 parent_span_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_parent_span_id());
  }

  return total_size;
}
size_t TracingSpan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.TracingSpan)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required uint64 trace_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_trace_id());

    // required uint64 span_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_span_id());

    // required uint64 parent_span_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_parent_span_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .brpc.SpanAnnotation annotations = 18;
  total_size += 2UL * this->_internal_annotations_size();
  for (const auto& msg : this->_impl_.annotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .brpc.TracingSpan client_spans = 19;
  total_size += 2UL * this->_internal_client_spans_size();
  for (const auto& msg : this->_impl_.client_spans_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string span_name = 17;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_span_name());
  }

  if (cached_has_bits & 0x000000f0u) {
    // optional uint64 log_id = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_log_id());
    }

    // optional uint32 remote_ip = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_remote_ip());
    }

    // optional uint32 remote_port = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_remote_port());
    }

    // optional .brpc.SpanType type = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .brpc.ProtocolType protocol = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_protocol());
    }

    // optional int32 error_code = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_error_code());
    }

    // optional int32 request_size = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_request_size());
    }

    // optional int64 received_real_us = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_received_real_us());
    }

    // optional int64 start_parse_real_us = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_start_parse_real_us());
    }

    // optional int64 start_callback_real_us = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_start_callback_real_us());
    }

    // optional int64 start_send_real_us = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_start_send_real_us());
    }

    // optional int64 sent_real_us = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_sent_real_us());
    }

  }
  // optional int32 response_size = 11;
  if (cached_has_bits & 0x00010000u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_response_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TracingSpan::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TracingSpan::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TracingSpan::GetClassData() const { return &_class_data_; }

void TracingSpan::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TracingSpan *>(to)->MergeFrom(
      static_cast<const TracingSpan &>(from));
}


void TracingSpan::MergeFrom(const TracingSpan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.TracingSpan)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.annotations_.MergeFrom(from._impl_.annotations_);
  _impl_.client_spans_.MergeFrom(from._impl_.client_spans_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_span_name(from._internal_span_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.trace_id_ = from._impl_.trace_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.span_id_ = from._impl_.span_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.parent_span_id_ = from._impl_.parent_span_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.log_id_ = from._impl_.log_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.remote_ip_ = from._impl_.remote_ip_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.remote_port_ = from._impl_.remote_port_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.type_ = from._impl_.type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.protocol_ = from._impl_.protocol_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.error_code_ = from._impl_.error_code_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.request_size_ = from._impl_.request_size_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.received_real_us_ = from._impl_.received_real_us_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.start_parse_real_us_ = from._impl_.start_parse_real_us_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.start_callback_real_us_ = from._impl_.start_callback_real_us_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.start_send_real_us_ = from._impl_.start_send_real_us_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.sent_real_us_ = from._impl_.sent_real_us_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_response_size(from._internal_response_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TracingSpan::CopyFrom(const TracingSpan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.TracingSpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TracingSpan::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.annotations_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.client_spans_))
    return false;
  return true;
}

void TracingSpan::InternalSwap(TracingSpan* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.annotations_.InternalSwap(&other->_impl_.annotations_);
  _impl_.client_spans_.InternalSwap(&other->_impl_.client_spans_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.span_name_, lhs_arena,
      &other->_impl_.span_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TracingSpan, _impl_.response_size_)
      + sizeof(TracingSpan::_impl_.response_size_)
      - PROTOBUF_FIELD_OFFSET(TracingSpan, _impl_.trace_id_)>(
          reinterpret_cast<char*>(&_impl_.trace_id_),
          reinterpret_cast<char*>(&other->_impl_.trace_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TracingSpan::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_brpc_2fspan_2eproto_getter, &descriptor_table_brpc_2fspan_2eproto_once,
      file_level_metadata_brpc_2fspan_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace brpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::brpc::RpczSpan*
Arena::CreateMaybeMessage< ::brpc::RpczSpan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::brpc::RpczSpan >(arena);
}
template<> PROTOBUF_NOINLINE ::brpc::BriefSpan*
Arena::CreateMaybeMessage< ::brpc::BriefSpan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::brpc::BriefSpan >(arena);
}
template<> PROTOBUF_NOINLINE ::brpc::SpanAnnotation*
Arena::CreateMaybeMessage< ::brpc::SpanAnnotation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::brpc::SpanAnnotation >(arena);
}
template<> PROTOBUF_NOINLINE ::brpc::TracingSpan*
Arena::CreateMaybeMessage< ::brpc::TracingSpan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::brpc::TracingSpan >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
