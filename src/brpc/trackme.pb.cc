// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/trackme.proto

#include "brpc/trackme.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace brpc {
PROTOBUF_CONSTEXPR TrackMeRequest::TrackMeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.server_addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rpc_version_)*/int64_t{0}} {}
struct TrackMeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackMeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackMeRequestDefaultTypeInternal() {}
  union {
    TrackMeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackMeRequestDefaultTypeInternal _TrackMeRequest_default_instance_;
PROTOBUF_CONSTEXPR TrackMeResponse::TrackMeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.error_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.severity_)*/0
  , /*decltype(_impl_.new_interval_)*/0} {}
struct TrackMeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackMeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackMeResponseDefaultTypeInternal() {}
  union {
    TrackMeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackMeResponseDefaultTypeInternal _TrackMeResponse_default_instance_;
}  // namespace brpc
static ::_pb::Metadata file_level_metadata_brpc_2ftrackme_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_brpc_2ftrackme_2eproto[1];
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_brpc_2ftrackme_2eproto[1];

const uint32_t TableStruct_brpc_2ftrackme_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::brpc::TrackMeRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::brpc::TrackMeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::brpc::TrackMeRequest, _impl_.rpc_version_),
  PROTOBUF_FIELD_OFFSET(::brpc::TrackMeRequest, _impl_.server_addr_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::brpc::TrackMeResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::brpc::TrackMeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::brpc::TrackMeResponse, _impl_.severity_),
  PROTOBUF_FIELD_OFFSET(::brpc::TrackMeResponse, _impl_.error_text_),
  PROTOBUF_FIELD_OFFSET(::brpc::TrackMeResponse, _impl_.new_interval_),
  1,
  0,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::brpc::TrackMeRequest)},
  { 10, 19, -1, sizeof(::brpc::TrackMeResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::brpc::_TrackMeRequest_default_instance_._instance,
  &::brpc::_TrackMeResponse_default_instance_._instance,
};

const char descriptor_table_protodef_brpc_2ftrackme_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022brpc/trackme.proto\022\004brpc\":\n\016TrackMeReq"
  "uest\022\023\n\013rpc_version\030\001 \001(\003\022\023\n\013server_addr"
  "\030\002 \001(\t\"d\n\017TrackMeResponse\022\'\n\010severity\030\001 "
  "\001(\0162\025.brpc.TrackMeSeverity\022\022\n\nerror_text"
  "\030\002 \001(\t\022\024\n\014new_interval\030\003 \001(\005*F\n\017TrackMeS"
  "everity\022\r\n\tTrackMeOK\020\000\022\022\n\016TrackMeWarning"
  "\020\001\022\020\n\014TrackMeFatal\020\0022H\n\016TrackMeService\0226"
  "\n\007TrackMe\022\024.brpc.TrackMeRequest\032\025.brpc.T"
  "rackMeResponseB\003\200\001\001"
  ;
static ::_pbi::once_flag descriptor_table_brpc_2ftrackme_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_brpc_2ftrackme_2eproto = {
    false, false, 339, descriptor_table_protodef_brpc_2ftrackme_2eproto,
    "brpc/trackme.proto",
    &descriptor_table_brpc_2ftrackme_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_brpc_2ftrackme_2eproto::offsets,
    file_level_metadata_brpc_2ftrackme_2eproto, file_level_enum_descriptors_brpc_2ftrackme_2eproto,
    file_level_service_descriptors_brpc_2ftrackme_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_brpc_2ftrackme_2eproto_getter() {
  return &descriptor_table_brpc_2ftrackme_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_brpc_2ftrackme_2eproto(&descriptor_table_brpc_2ftrackme_2eproto);
namespace brpc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackMeSeverity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_brpc_2ftrackme_2eproto);
  return file_level_enum_descriptors_brpc_2ftrackme_2eproto[0];
}
bool TrackMeSeverity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TrackMeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackMeRequest>()._impl_._has_bits_);
  static void set_has_rpc_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_server_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrackMeRequest::TrackMeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:brpc.TrackMeRequest)
}
TrackMeRequest::TrackMeRequest(const TrackMeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.server_addr_){}
    , decltype(_impl_.rpc_version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.server_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_server_addr()) {
    _impl_.server_addr_.Set(from._internal_server_addr(), 
      GetArenaForAllocation());
  }
  _impl_.rpc_version_ = from._impl_.rpc_version_;
  // @@protoc_insertion_point(copy_constructor:brpc.TrackMeRequest)
}

inline void TrackMeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.server_addr_){}
    , decltype(_impl_.rpc_version_){int64_t{0}}
  };
  _impl_.server_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrackMeRequest::~TrackMeRequest() {
  // @@protoc_insertion_point(destructor:brpc.TrackMeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackMeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.server_addr_.Destroy();
}

void TrackMeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackMeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.TrackMeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.server_addr_.ClearNonDefaultToEmpty();
  }
  _impl_.rpc_version_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackMeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 rpc_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_rpc_version(&has_bits);
          _impl_.rpc_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string server_addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_server_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "brpc.TrackMeRequest.server_addr");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackMeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.TrackMeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 rpc_version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_rpc_version(), target);
  }

  // optional string server_addr = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_server_addr().data(), static_cast<int>(this->_internal_server_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "brpc.TrackMeRequest.server_addr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_server_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.TrackMeRequest)
  return target;
}

size_t TrackMeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.TrackMeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string server_addr = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_server_addr());
    }

    // optional int64 rpc_version = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_rpc_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackMeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrackMeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackMeRequest::GetClassData() const { return &_class_data_; }

void TrackMeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrackMeRequest *>(to)->MergeFrom(
      static_cast<const TrackMeRequest &>(from));
}


void TrackMeRequest::MergeFrom(const TrackMeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.TrackMeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_server_addr(from._internal_server_addr());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.rpc_version_ = from._impl_.rpc_version_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackMeRequest::CopyFrom(const TrackMeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.TrackMeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackMeRequest::IsInitialized() const {
  return true;
}

void TrackMeRequest::InternalSwap(TrackMeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.server_addr_, lhs_arena,
      &other->_impl_.server_addr_, rhs_arena
  );
  swap(_impl_.rpc_version_, other->_impl_.rpc_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackMeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_brpc_2ftrackme_2eproto_getter, &descriptor_table_brpc_2ftrackme_2eproto_once,
      file_level_metadata_brpc_2ftrackme_2eproto[0]);
}

// ===================================================================

class TrackMeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackMeResponse>()._impl_._has_bits_);
  static void set_has_severity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TrackMeResponse::TrackMeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:brpc.TrackMeResponse)
}
TrackMeResponse::TrackMeResponse(const TrackMeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_text_){}
    , decltype(_impl_.severity_){}
    , decltype(_impl_.new_interval_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error_text()) {
    _impl_.error_text_.Set(from._internal_error_text(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.severity_, &from._impl_.severity_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.new_interval_) -
    reinterpret_cast<char*>(&_impl_.severity_)) + sizeof(_impl_.new_interval_));
  // @@protoc_insertion_point(copy_constructor:brpc.TrackMeResponse)
}

inline void TrackMeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_text_){}
    , decltype(_impl_.severity_){0}
    , decltype(_impl_.new_interval_){0}
  };
  _impl_.error_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrackMeResponse::~TrackMeResponse() {
  // @@protoc_insertion_point(destructor:brpc.TrackMeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackMeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_text_.Destroy();
}

void TrackMeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackMeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.TrackMeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.error_text_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.severity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.new_interval_) -
        reinterpret_cast<char*>(&_impl_.severity_)) + sizeof(_impl_.new_interval_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackMeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .brpc.TrackMeSeverity severity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::brpc::TrackMeSeverity_IsValid(val))) {
            _internal_set_severity(static_cast<::brpc::TrackMeSeverity>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string error_text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "brpc.TrackMeResponse.error_text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 new_interval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_new_interval(&has_bits);
          _impl_.new_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackMeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.TrackMeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .brpc.TrackMeSeverity severity = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_severity(), target);
  }

  // optional string error_text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error_text().data(), static_cast<int>(this->_internal_error_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "brpc.TrackMeResponse.error_text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_text(), target);
  }

  // optional int32 new_interval = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_new_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.TrackMeResponse)
  return target;
}

size_t TrackMeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.TrackMeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string error_text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error_text());
    }

    // optional .brpc.TrackMeSeverity severity = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_severity());
    }

    // optional int32 new_interval = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_new_interval());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackMeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrackMeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackMeResponse::GetClassData() const { return &_class_data_; }

void TrackMeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrackMeResponse *>(to)->MergeFrom(
      static_cast<const TrackMeResponse &>(from));
}


void TrackMeResponse::MergeFrom(const TrackMeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.TrackMeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_error_text(from._internal_error_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.severity_ = from._impl_.severity_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.new_interval_ = from._impl_.new_interval_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackMeResponse::CopyFrom(const TrackMeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.TrackMeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackMeResponse::IsInitialized() const {
  return true;
}

void TrackMeResponse::InternalSwap(TrackMeResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_text_, lhs_arena,
      &other->_impl_.error_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackMeResponse, _impl_.new_interval_)
      + sizeof(TrackMeResponse::_impl_.new_interval_)
      - PROTOBUF_FIELD_OFFSET(TrackMeResponse, _impl_.severity_)>(
          reinterpret_cast<char*>(&_impl_.severity_),
          reinterpret_cast<char*>(&other->_impl_.severity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackMeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_brpc_2ftrackme_2eproto_getter, &descriptor_table_brpc_2ftrackme_2eproto_once,
      file_level_metadata_brpc_2ftrackme_2eproto[1]);
}

// ===================================================================

TrackMeService::~TrackMeService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* TrackMeService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_brpc_2ftrackme_2eproto);
  return file_level_service_descriptors_brpc_2ftrackme_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* TrackMeService::GetDescriptor() {
  return descriptor();
}

void TrackMeService::TrackMe(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::brpc::TrackMeRequest*,
                         ::brpc::TrackMeResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TrackMe() not implemented.");
  done->Run();
}

void TrackMeService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_brpc_2ftrackme_2eproto[0]);
  switch(method->index()) {
    case 0:
      TrackMe(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::brpc::TrackMeRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::brpc::TrackMeResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& TrackMeService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::TrackMeRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& TrackMeService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::TrackMeResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

TrackMeService_Stub::TrackMeService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
TrackMeService_Stub::TrackMeService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
TrackMeService_Stub::~TrackMeService_Stub() {
  if (owns_channel_) delete channel_;
}

void TrackMeService_Stub::TrackMe(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::brpc::TrackMeRequest* request,
                              ::brpc::TrackMeResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace brpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::brpc::TrackMeRequest*
Arena::CreateMaybeMessage< ::brpc::TrackMeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::brpc::TrackMeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::brpc::TrackMeResponse*
Arena::CreateMaybeMessage< ::brpc::TrackMeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::brpc::TrackMeResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
