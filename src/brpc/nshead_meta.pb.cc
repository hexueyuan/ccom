// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/nshead_meta.proto

#include "brpc/nshead_meta.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace brpc {
PROTOBUF_CONSTEXPR NsheadMeta::NsheadMeta(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.full_method_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.correlation_id_)*/int64_t{0}
  , /*decltype(_impl_.log_id_)*/int64_t{0}
  , /*decltype(_impl_.attachment_size_)*/0
  , /*decltype(_impl_.compress_type_)*/0
  , /*decltype(_impl_.trace_id_)*/int64_t{0}
  , /*decltype(_impl_.span_id_)*/int64_t{0}
  , /*decltype(_impl_.parent_span_id_)*/int64_t{0}} {}
struct NsheadMetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NsheadMetaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NsheadMetaDefaultTypeInternal() {}
  union {
    NsheadMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NsheadMetaDefaultTypeInternal _NsheadMeta_default_instance_;
}  // namespace brpc
static ::_pb::Metadata file_level_metadata_brpc_2fnshead_5fmeta_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_brpc_2fnshead_5fmeta_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_brpc_2fnshead_5fmeta_2eproto = nullptr;

const uint32_t TableStruct_brpc_2fnshead_5fmeta_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::brpc::NsheadMeta, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::brpc::NsheadMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::brpc::NsheadMeta, _impl_.full_method_name_),
  PROTOBUF_FIELD_OFFSET(::brpc::NsheadMeta, _impl_.correlation_id_),
  PROTOBUF_FIELD_OFFSET(::brpc::NsheadMeta, _impl_.log_id_),
  PROTOBUF_FIELD_OFFSET(::brpc::NsheadMeta, _impl_.attachment_size_),
  PROTOBUF_FIELD_OFFSET(::brpc::NsheadMeta, _impl_.compress_type_),
  PROTOBUF_FIELD_OFFSET(::brpc::NsheadMeta, _impl_.trace_id_),
  PROTOBUF_FIELD_OFFSET(::brpc::NsheadMeta, _impl_.span_id_),
  PROTOBUF_FIELD_OFFSET(::brpc::NsheadMeta, _impl_.parent_span_id_),
  PROTOBUF_FIELD_OFFSET(::brpc::NsheadMeta, _impl_.user_string_),
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, -1, sizeof(::brpc::NsheadMeta)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::brpc::_NsheadMeta_default_instance_._instance,
};

const char descriptor_table_protodef_brpc_2fnshead_5fmeta_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026brpc/nshead_meta.proto\022\004brpc\032\022brpc/opt"
  "ions.proto\"\342\001\n\nNsheadMeta\022\030\n\020full_method"
  "_name\030\001 \002(\t\022\026\n\016correlation_id\030\002 \001(\003\022\016\n\006l"
  "og_id\030\003 \001(\003\022\027\n\017attachment_size\030\004 \001(\005\022)\n\r"
  "compress_type\030\005 \001(\0162\022.brpc.CompressType\022"
  "\020\n\010trace_id\030\006 \001(\003\022\017\n\007span_id\030\007 \001(\003\022\026\n\016pa"
  "rent_span_id\030\010 \001(\003\022\023\n\013user_string\030\t \001(\014B"
  "\027\n\010com.brpcB\013NsheadProto"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_brpc_2fnshead_5fmeta_2eproto_deps[1] = {
  &::descriptor_table_brpc_2foptions_2eproto,
};
static ::_pbi::once_flag descriptor_table_brpc_2fnshead_5fmeta_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_brpc_2fnshead_5fmeta_2eproto = {
    false, false, 304, descriptor_table_protodef_brpc_2fnshead_5fmeta_2eproto,
    "brpc/nshead_meta.proto",
    &descriptor_table_brpc_2fnshead_5fmeta_2eproto_once, descriptor_table_brpc_2fnshead_5fmeta_2eproto_deps, 1, 1,
    schemas, file_default_instances, TableStruct_brpc_2fnshead_5fmeta_2eproto::offsets,
    file_level_metadata_brpc_2fnshead_5fmeta_2eproto, file_level_enum_descriptors_brpc_2fnshead_5fmeta_2eproto,
    file_level_service_descriptors_brpc_2fnshead_5fmeta_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_brpc_2fnshead_5fmeta_2eproto_getter() {
  return &descriptor_table_brpc_2fnshead_5fmeta_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_brpc_2fnshead_5fmeta_2eproto(&descriptor_table_brpc_2fnshead_5fmeta_2eproto);
namespace brpc {

// ===================================================================

class NsheadMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<NsheadMeta>()._impl_._has_bits_);
  static void set_has_full_method_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_correlation_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_log_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_attachment_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_compress_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_trace_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_span_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_parent_span_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_user_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

NsheadMeta::NsheadMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:brpc.NsheadMeta)
}
NsheadMeta::NsheadMeta(const NsheadMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.full_method_name_){}
    , decltype(_impl_.user_string_){}
    , decltype(_impl_.correlation_id_){}
    , decltype(_impl_.log_id_){}
    , decltype(_impl_.attachment_size_){}
    , decltype(_impl_.compress_type_){}
    , decltype(_impl_.trace_id_){}
    , decltype(_impl_.span_id_){}
    , decltype(_impl_.parent_span_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.full_method_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.full_method_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_full_method_name()) {
    _impl_.full_method_name_.Set(from._internal_full_method_name(), 
      GetArenaForAllocation());
  }
  _impl_.user_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_string()) {
    _impl_.user_string_.Set(from._internal_user_string(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.correlation_id_, &from._impl_.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.parent_span_id_) -
    reinterpret_cast<char*>(&_impl_.correlation_id_)) + sizeof(_impl_.parent_span_id_));
  // @@protoc_insertion_point(copy_constructor:brpc.NsheadMeta)
}

inline void NsheadMeta::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.full_method_name_){}
    , decltype(_impl_.user_string_){}
    , decltype(_impl_.correlation_id_){int64_t{0}}
    , decltype(_impl_.log_id_){int64_t{0}}
    , decltype(_impl_.attachment_size_){0}
    , decltype(_impl_.compress_type_){0}
    , decltype(_impl_.trace_id_){int64_t{0}}
    , decltype(_impl_.span_id_){int64_t{0}}
    , decltype(_impl_.parent_span_id_){int64_t{0}}
  };
  _impl_.full_method_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.full_method_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NsheadMeta::~NsheadMeta() {
  // @@protoc_insertion_point(destructor:brpc.NsheadMeta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NsheadMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.full_method_name_.Destroy();
  _impl_.user_string_.Destroy();
}

void NsheadMeta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NsheadMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.NsheadMeta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.full_method_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.user_string_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.correlation_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.span_id_) -
        reinterpret_cast<char*>(&_impl_.correlation_id_)) + sizeof(_impl_.span_id_));
  }
  _impl_.parent_span_id_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NsheadMeta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string full_method_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_full_method_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "brpc.NsheadMeta.full_method_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 correlation_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_correlation_id(&has_bits);
          _impl_.correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 log_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_log_id(&has_bits);
          _impl_.log_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 attachment_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_attachment_size(&has_bits);
          _impl_.attachment_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .brpc.CompressType compress_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::brpc::CompressType_IsValid(val))) {
            _internal_set_compress_type(static_cast<::brpc::CompressType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 trace_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_trace_id(&has_bits);
          _impl_.trace_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 span_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_span_id(&has_bits);
          _impl_.span_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 parent_span_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_parent_span_id(&has_bits);
          _impl_.parent_span_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes user_string = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_user_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NsheadMeta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:brpc.NsheadMeta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string full_method_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_full_method_name().data(), static_cast<int>(this->_internal_full_method_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "brpc.NsheadMeta.full_method_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_full_method_name(), target);
  }

  // optional int64 correlation_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_correlation_id(), target);
  }

  // optional int64 log_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_log_id(), target);
  }

  // optional int32 attachment_size = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_attachment_size(), target);
  }

  // optional .brpc.CompressType compress_type = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_compress_type(), target);
  }

  // optional int64 trace_id = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_trace_id(), target);
  }

  // optional int64 span_id = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_span_id(), target);
  }

  // optional int64 parent_span_id = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_parent_span_id(), target);
  }

  // optional bytes user_string = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_user_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.NsheadMeta)
  return target;
}

size_t NsheadMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.NsheadMeta)
  size_t total_size = 0;

  // required string full_method_name = 1;
  if (_internal_has_full_method_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_full_method_name());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional bytes user_string = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_user_string());
    }

    // optional int64 correlation_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_correlation_id());
    }

    // optional int64 log_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_log_id());
    }

    // optional int32 attachment_size = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_attachment_size());
    }

    // optional .brpc.CompressType compress_type = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_compress_type());
    }

    // optional int64 trace_id = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_trace_id());
    }

    // optional int64 span_id = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_span_id());
    }

  }
  // optional int64 parent_span_id = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_parent_span_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NsheadMeta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NsheadMeta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NsheadMeta::GetClassData() const { return &_class_data_; }

void NsheadMeta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NsheadMeta *>(to)->MergeFrom(
      static_cast<const NsheadMeta &>(from));
}


void NsheadMeta::MergeFrom(const NsheadMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.NsheadMeta)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_full_method_name(from._internal_full_method_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_string(from._internal_user_string());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.correlation_id_ = from._impl_.correlation_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.log_id_ = from._impl_.log_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.attachment_size_ = from._impl_.attachment_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.compress_type_ = from._impl_.compress_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.trace_id_ = from._impl_.trace_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.span_id_ = from._impl_.span_id_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_parent_span_id(from._internal_parent_span_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NsheadMeta::CopyFrom(const NsheadMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.NsheadMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NsheadMeta::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void NsheadMeta::InternalSwap(NsheadMeta* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.full_method_name_, lhs_arena,
      &other->_impl_.full_method_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_string_, lhs_arena,
      &other->_impl_.user_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NsheadMeta, _impl_.parent_span_id_)
      + sizeof(NsheadMeta::_impl_.parent_span_id_)
      - PROTOBUF_FIELD_OFFSET(NsheadMeta, _impl_.correlation_id_)>(
          reinterpret_cast<char*>(&_impl_.correlation_id_),
          reinterpret_cast<char*>(&other->_impl_.correlation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NsheadMeta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_brpc_2fnshead_5fmeta_2eproto_getter, &descriptor_table_brpc_2fnshead_5fmeta_2eproto_once,
      file_level_metadata_brpc_2fnshead_5fmeta_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace brpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::brpc::NsheadMeta*
Arena::CreateMaybeMessage< ::brpc::NsheadMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::brpc::NsheadMeta >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
